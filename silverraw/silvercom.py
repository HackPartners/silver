# ./silvercom.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:6426ad848d588840c68ed5f2701ac41fc9ba6999
# Generated 2015-11-14 16:58:02.797660 by PyXB version 1.2.4 using Python 2.7.9.final.0
# Namespace http://railgds.net/ws/commontypes [xmlns:com]

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:dd5dc02e-8af0-11e5-954c-7831c1d0cf70')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.4'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://railgds.net/ws/commontypes', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 21, 4)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.HOME = STD_ANON._CF_enumeration.addEnumeration(unicode_value='HOME', tag='HOME')
STD_ANON.BUSINESS = STD_ANON._CF_enumeration.addEnumeration(unicode_value='BUSINESS', tag='BUSINESS')
STD_ANON.UNKNOWN = STD_ANON._CF_enumeration.addEnumeration(unicode_value='UNKNOWN', tag='UNKNOWN')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}AgencyCodeType
class AgencyCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AgencyCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 31, 1)
    _Documentation = None
AgencyCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10))
AgencyCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
AgencyCodeType._CF_pattern = pyxb.binding.facets.CF_pattern()
AgencyCodeType._CF_pattern.addPattern(pattern='[a-zA-Z0-9]+')
AgencyCodeType._InitializeFacetMap(AgencyCodeType._CF_maxLength,
   AgencyCodeType._CF_minLength,
   AgencyCodeType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'AgencyCodeType', AgencyCodeType)

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 42, 18)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.BAGGAGE = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='BAGGAGE', tag='BAGGAGE')
STD_ANON_.BAR = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='BAR', tag='BAR')
STD_ANON_.BUFFET = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='BUFFET', tag='BUFFET')
STD_ANON_.DINING = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='DINING', tag='DINING')
STD_ANON_.HOT_FOOD = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='HOT_FOOD', tag='HOT_FOOD')
STD_ANON_.LOUNGE = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='LOUNGE', tag='LOUNGE')
STD_ANON_.MEAL = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='MEAL', tag='MEAL')
STD_ANON_.NETWORK = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='NETWORK', tag='NETWORK')
STD_ANON_.NEWSPAPER = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='NEWSPAPER', tag='NEWSPAPER')
STD_ANON_.QUIET = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='QUIET', tag='QUIET')
STD_ANON_.SNACK = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='SNACK', tag='SNACK')
STD_ANON_.TAXI = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='TAXI', tag='TAXI')
STD_ANON_.TROLLEY = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='TROLLEY', tag='TROLLEY')
STD_ANON_.WHEELCHAIR = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='WHEELCHAIR', tag='WHEELCHAIR')
STD_ANON_.WHEELCHAIR_RES = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='WHEELCHAIR_RES', tag='WHEELCHAIR_RES')
STD_ANON_.AUDIO = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='AUDIO', tag='AUDIO')
STD_ANON_.VIDEO = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='VIDEO', tag='VIDEO')
STD_ANON_.POWER_SOCKET = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='POWER_SOCKET', tag='POWER_SOCKET')
STD_ANON_.LOUNGE_ACCESS = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='LOUNGE_ACCESS', tag='LOUNGE_ACCESS')
STD_ANON_.INTERNET = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='INTERNET', tag='INTERNET')
STD_ANON_.INTERNET_AVAILABLE = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='INTERNET_AVAILABLE', tag='INTERNET_AVAILABLE')
STD_ANON_.PARKING = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='PARKING', tag='PARKING')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}AnorakRecordLocatorType
class AnorakRecordLocatorType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnorakRecordLocatorType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 73, 1)
    _Documentation = None
AnorakRecordLocatorType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'AnorakRecordLocatorType', AnorakRecordLocatorType)

# Atomic simple type: {http://railgds.net/ws/commontypes}AnorakReceiptLocatorType
class AnorakReceiptLocatorType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnorakReceiptLocatorType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 76, 1)
    _Documentation = None
AnorakReceiptLocatorType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'AnorakReceiptLocatorType', AnorakReceiptLocatorType)

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 89, 3)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.AX = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='AX', tag='AX')
STD_ANON_2.VI = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='VI', tag='VI')
STD_ANON_2.CA = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='CA', tag='CA')
STD_ANON_2.DI = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='DI', tag='DI')
STD_ANON_2.UA = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='UA', tag='UA')
STD_ANON_2.DC = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='DC', tag='DC')
STD_ANON_2.JC = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='JC', tag='JC')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 112, 3)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.SD = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='SD', tag='SD')
STD_ANON_3.VD = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='VD', tag='VD')
STD_ANON_3.MD = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='MD', tag='MD')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 328, 7)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.ANY = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='ANY', tag='ANY')
STD_ANON_4.ORDER_TOTAL = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='ORDER_TOTAL', tag='ORDER_TOTAL')
STD_ANON_4.BOOKING_TOTAL = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='BOOKING_TOTAL', tag='BOOKING_TOTAL')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 415, 3)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.BALANCED = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='BALANCED', tag='BALANCED')
STD_ANON_5.CREDIT = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='CREDIT', tag='CREDIT')
STD_ANON_5.DEBIT = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='DEBIT', tag='DEBIT')
STD_ANON_5.CLOSED = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='CLOSED', tag='CLOSED')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}CabinClassType
class CabinClassType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CabinClassType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 461, 1)
    _Documentation = None
CabinClassType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'CabinClassType', CabinClassType)

# Atomic simple type: {http://railgds.net/ws/commontypes}CancellationReasonType
class CancellationReasonType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CancellationReasonType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 464, 1)
    _Documentation = None
CancellationReasonType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CancellationReasonType, enum_prefix=None)
CancellationReasonType.DISRUPTION = CancellationReasonType._CF_enumeration.addEnumeration(unicode_value='DISRUPTION', tag='DISRUPTION')
CancellationReasonType.FULFILLMENT_FAILURE = CancellationReasonType._CF_enumeration.addEnumeration(unicode_value='FULFILLMENT_FAILURE', tag='FULFILLMENT_FAILURE')
CancellationReasonType.FULL_TICKET_NOT_REQD = CancellationReasonType._CF_enumeration.addEnumeration(unicode_value='FULL_TICKET_NOT_REQD', tag='FULL_TICKET_NOT_REQD')
CancellationReasonType.NO_UPGRADE_AVAILABLE = CancellationReasonType._CF_enumeration.addEnumeration(unicode_value='NO_UPGRADE_AVAILABLE', tag='NO_UPGRADE_AVAILABLE')
CancellationReasonType.NO_RESERVATION_AVAILABLE = CancellationReasonType._CF_enumeration.addEnumeration(unicode_value='NO_RESERVATION_AVAILABLE', tag='NO_RESERVATION_AVAILABLE')
CancellationReasonType.PARTIAL_TICKET_NOT_REQD = CancellationReasonType._CF_enumeration.addEnumeration(unicode_value='PARTIAL_TICKET_NOT_REQD', tag='PARTIAL_TICKET_NOT_REQD')
CancellationReasonType.OTHER = CancellationReasonType._CF_enumeration.addEnumeration(unicode_value='OTHER', tag='OTHER')
CancellationReasonType._InitializeFacetMap(CancellationReasonType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'CancellationReasonType', CancellationReasonType)

# Atomic simple type: {http://railgds.net/ws/commontypes}RefundTargetType
class RefundTargetType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RefundTargetType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 475, 4)
    _Documentation = None
RefundTargetType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RefundTargetType, enum_prefix=None)
RefundTargetType.FORM_OF_PAYMENT = RefundTargetType._CF_enumeration.addEnumeration(unicode_value='FORM_OF_PAYMENT', tag='FORM_OF_PAYMENT')
RefundTargetType.VOUCHER = RefundTargetType._CF_enumeration.addEnumeration(unicode_value='VOUCHER', tag='VOUCHER')
RefundTargetType.SPLIT_FORM_OF_PAYMENT_VOUCHER = RefundTargetType._CF_enumeration.addEnumeration(unicode_value='SPLIT_FORM_OF_PAYMENT_VOUCHER', tag='SPLIT_FORM_OF_PAYMENT_VOUCHER')
RefundTargetType._InitializeFacetMap(RefundTargetType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RefundTargetType', RefundTargetType)

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 522, 20)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.TICKET = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='TICKET', tag='TICKET')
STD_ANON_6.RESERVATION = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='RESERVATION', tag='RESERVATION')
STD_ANON_6.ACCOMMODATION = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='ACCOMMODATION', tag='ACCOMMODATION')
STD_ANON_6.FEE = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='FEE', tag='FEE')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}ChannelType
class ChannelType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ChannelType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 586, 1)
    _Documentation = None
ChannelType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10))
ChannelType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
ChannelType._CF_pattern = pyxb.binding.facets.CF_pattern()
ChannelType._CF_pattern.addPattern(pattern='[a-zA-Z0-9]+')
ChannelType._InitializeFacetMap(ChannelType._CF_maxLength,
   ChannelType._CF_minLength,
   ChannelType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ChannelType', ChannelType)

# Atomic simple type: {http://railgds.net/ws/commontypes}ChannelCodeType
class ChannelCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ChannelCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 598, 1)
    _Documentation = None
ChannelCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10))
ChannelCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
ChannelCodeType._CF_pattern = pyxb.binding.facets.CF_pattern()
ChannelCodeType._CF_pattern.addPattern(pattern='[a-zA-Z0-9]+')
ChannelCodeType._InitializeFacetMap(ChannelCodeType._CF_maxLength,
   ChannelCodeType._CF_minLength,
   ChannelCodeType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ChannelCodeType', ChannelCodeType)

# Atomic simple type: {http://railgds.net/ws/commontypes}CompanyCodeType
class CompanyCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CompanyCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 610, 1)
    _Documentation = None
CompanyCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10))
CompanyCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
CompanyCodeType._CF_pattern = pyxb.binding.facets.CF_pattern()
CompanyCodeType._CF_pattern.addPattern(pattern='[a-zA-Z0-9]+')
CompanyCodeType._InitializeFacetMap(CompanyCodeType._CF_maxLength,
   CompanyCodeType._CF_minLength,
   CompanyCodeType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'CompanyCodeType', CompanyCodeType)

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 669, 4)
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.BUSINESS = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='BUSINESS', tag='BUSINESS')
STD_ANON_7.HOME = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='HOME', tag='HOME')
STD_ANON_7.MOBILE = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='MOBILE', tag='MOBILE')
STD_ANON_7.AGENCY = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='AGENCY', tag='AGENCY')
STD_ANON_7.HOTEL = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='HOTEL', tag='HOTEL')
STD_ANON_7.COMMERCIAL = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='COMMERCIAL', tag='COMMERCIAL')
STD_ANON_7.DESTINATION = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='DESTINATION', tag='DESTINATION')
STD_ANON_7.UNKNOWN = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='UNKNOWN', tag='UNKNOWN')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 683, 4)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.EMAIL = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='EMAIL', tag='EMAIL')
STD_ANON_8.PHONE = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='PHONE', tag='PHONE')
STD_ANON_8.FAX = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='FAX', tag='FAX')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 752, 5)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.MILES = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='MILES', tag='MILES')
STD_ANON_9.KILOMETERS = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='KILOMETERS', tag='KILOMETERS')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}DistributorCodeType
class DistributorCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DistributorCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 762, 1)
    _Documentation = None
DistributorCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10))
DistributorCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
DistributorCodeType._CF_pattern = pyxb.binding.facets.CF_pattern()
DistributorCodeType._CF_pattern.addPattern(pattern='[a-zA-Z0-9]+')
DistributorCodeType._InitializeFacetMap(DistributorCodeType._CF_maxLength,
   DistributorCodeType._CF_minLength,
   DistributorCodeType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'DistributorCodeType', DistributorCodeType)

# Atomic simple type: {http://railgds.net/ws/commontypes}NameFirstType
class NameFirstType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NameFirstType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 769, 1)
    _Documentation = None
NameFirstType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
NameFirstType._InitializeFacetMap(NameFirstType._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'NameFirstType', NameFirstType)

# Atomic simple type: {http://railgds.net/ws/commontypes}NameLastType
class NameLastType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NameLastType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 774, 1)
    _Documentation = None
NameLastType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
NameLastType._InitializeFacetMap(NameLastType._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'NameLastType', NameLastType)

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 792, 5)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.HSP = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='HSP', tag='HSP')
STD_ANON_10.ICY = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='ICY', tag='ICY')
STD_ANON_10.BLR = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='BLR', tag='BLR')
STD_ANON_10.APT = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='APT', tag='APT')
STD_ANON_10.CMT = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='CMT', tag='CMT')
STD_ANON_10.BUS = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='BUS', tag='BUS')
STD_ANON_10.XBU = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='XBU', tag='XBU')
STD_ANON_10.MCT = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='MCT', tag='MCT')
STD_ANON_10.NIT = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='NIT', tag='NIT')
STD_ANON_10.NAT = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='NAT', tag='NAT')
STD_ANON_10.FRY = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='FRY', tag='FRY')
STD_ANON_10.PED = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='PED', tag='PED')
STD_ANON_10.STR = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='STR', tag='STR')
STD_ANON_10.TAX = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='TAX', tag='TAX')
STD_ANON_10.TRM = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='TRM', tag='TRM')
STD_ANON_10.PFC = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='PFC', tag='PFC')
STD_ANON_10.HOV = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='HOV', tag='HOV')
STD_ANON_10.TRS = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='TRS', tag='TRS')
STD_ANON_10.UNK = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='UNK', tag='UNK')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}EquipmentTypeDescriptionType
class EquipmentTypeDescriptionType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EquipmentTypeDescriptionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 819, 1)
    _Documentation = None
EquipmentTypeDescriptionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EquipmentTypeDescriptionType, enum_prefix=None)
EquipmentTypeDescriptionType.High_speed = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='High-speed', tag='High_speed')
EquipmentTypeDescriptionType.Inter_City = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Inter-City', tag='Inter_City')
EquipmentTypeDescriptionType.Branch_LineRegional = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Branch-Line/Regional', tag='Branch_LineRegional')
EquipmentTypeDescriptionType.Airport = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Airport', tag='Airport')
EquipmentTypeDescriptionType.Commuter = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Commuter', tag='Commuter')
EquipmentTypeDescriptionType.Bus = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Bus', tag='Bus')
EquipmentTypeDescriptionType.Express_Bus = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Express Bus', tag='Express_Bus')
EquipmentTypeDescriptionType.MetroCity_Transit = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Metro/City-Transit', tag='MetroCity_Transit')
EquipmentTypeDescriptionType.Night_Train = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Night-Train', tag='Night_Train')
EquipmentTypeDescriptionType.Named_Train = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Named-Train', tag='Named_Train')
EquipmentTypeDescriptionType.Ferry = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Ferry', tag='Ferry')
EquipmentTypeDescriptionType.Pedestrian = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Pedestrian', tag='Pedestrian')
EquipmentTypeDescriptionType.Self_Transfer = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Self-Transfer', tag='Self_Transfer')
EquipmentTypeDescriptionType.Taxi = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Taxi', tag='Taxi')
EquipmentTypeDescriptionType.Tram = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Tram', tag='Tram')
EquipmentTypeDescriptionType.Platform_Change = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Platform Change', tag='Platform_Change')
EquipmentTypeDescriptionType.Hovercraft = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Hovercraft', tag='Hovercraft')
EquipmentTypeDescriptionType.Transfer = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Transfer', tag='Transfer')
EquipmentTypeDescriptionType.Unknown = EquipmentTypeDescriptionType._CF_enumeration.addEnumeration(unicode_value='Unknown', tag='Unknown')
EquipmentTypeDescriptionType._InitializeFacetMap(EquipmentTypeDescriptionType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EquipmentTypeDescriptionType', EquipmentTypeDescriptionType)

# Atomic simple type: {http://railgds.net/ws/commontypes}FareClassType
class FareClassType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FareClassType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 849, 1)
    _Documentation = None
FareClassType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'FareClassType', FareClassType)

# Atomic simple type: {http://railgds.net/ws/commontypes}FareDisplayNameType
class FareDisplayNameType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FareDisplayNameType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 852, 1)
    _Documentation = None
FareDisplayNameType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'FareDisplayNameType', FareDisplayNameType)

# Atomic simple type: {http://railgds.net/ws/commontypes}FareApplicabilityBasisType
class FareApplicabilityBasisType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FareApplicabilityBasisType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 972, 4)
    _Documentation = None
FareApplicabilityBasisType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FareApplicabilityBasisType, enum_prefix=None)
FareApplicabilityBasisType.SCHEDULE = FareApplicabilityBasisType._CF_enumeration.addEnumeration(unicode_value='SCHEDULE', tag='SCHEDULE')
FareApplicabilityBasisType._InitializeFacetMap(FareApplicabilityBasisType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'FareApplicabilityBasisType', FareApplicabilityBasisType)

# Atomic simple type: {http://railgds.net/ws/commontypes}FareApplicabilityRestrictionType
class FareApplicabilityRestrictionType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FareApplicabilityRestrictionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 977, 4)
    _Documentation = None
FareApplicabilityRestrictionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FareApplicabilityRestrictionType, enum_prefix=None)
FareApplicabilityRestrictionType.OPEN = FareApplicabilityRestrictionType._CF_enumeration.addEnumeration(unicode_value='OPEN', tag='OPEN')
FareApplicabilityRestrictionType.SEMI_OPEN = FareApplicabilityRestrictionType._CF_enumeration.addEnumeration(unicode_value='SEMI-OPEN', tag='SEMI_OPEN')
FareApplicabilityRestrictionType.RESTRICTED = FareApplicabilityRestrictionType._CF_enumeration.addEnumeration(unicode_value='RESTRICTED', tag='RESTRICTED')
FareApplicabilityRestrictionType._InitializeFacetMap(FareApplicabilityRestrictionType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'FareApplicabilityRestrictionType', FareApplicabilityRestrictionType)

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 998, 3)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.CORPORATE = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='CORPORATE', tag='CORPORATE')
STD_ANON_11.DISCOUNT_CARD = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='DISCOUNT_CARD', tag='DISCOUNT_CARD')
STD_ANON_11.PROMOTION = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='PROMOTION', tag='PROMOTION')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}NonValidatedServiceFeeType
class NonValidatedServiceFeeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NonValidatedServiceFeeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1037, 1)
    _Documentation = None
NonValidatedServiceFeeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NonValidatedServiceFeeType, enum_prefix=None)
NonValidatedServiceFeeType.CC_Surcharge_Fee_Assessment = NonValidatedServiceFeeType._CF_enumeration.addEnumeration(unicode_value='CC_Surcharge_Fee_Assessment', tag='CC_Surcharge_Fee_Assessment')
NonValidatedServiceFeeType.Misc_Fee_Assessment = NonValidatedServiceFeeType._CF_enumeration.addEnumeration(unicode_value='Misc_Fee_Assessment', tag='Misc_Fee_Assessment')
NonValidatedServiceFeeType.Misc_Agency_Service_Fee_Assessment = NonValidatedServiceFeeType._CF_enumeration.addEnumeration(unicode_value='Misc_Agency_Service_Fee_Assessment', tag='Misc_Agency_Service_Fee_Assessment')
NonValidatedServiceFeeType.Misc_Distributor_Service_Fee_Assessment = NonValidatedServiceFeeType._CF_enumeration.addEnumeration(unicode_value='Misc_Distributor_Service_Fee_Assessment', tag='Misc_Distributor_Service_Fee_Assessment')
NonValidatedServiceFeeType.Misc_Company_Service_Fee_Assessment = NonValidatedServiceFeeType._CF_enumeration.addEnumeration(unicode_value='Misc_Company_Service_Fee_Assessment', tag='Misc_Company_Service_Fee_Assessment')
NonValidatedServiceFeeType._InitializeFacetMap(NonValidatedServiceFeeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NonValidatedServiceFeeType', NonValidatedServiceFeeType)

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1059, 5)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.CC = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='CC', tag='CC')
STD_ANON_12.CK = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='CK', tag='CK')
STD_ANON_12.OA = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='OA', tag='OA')
STD_ANON_12.DB = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='DB', tag='DB')
STD_ANON_12.VO = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='VO', tag='VO')
STD_ANON_12.EK = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='EK', tag='EK')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}GenderType
class GenderType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GenderType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1074, 1)
    _Documentation = None
GenderType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=GenderType, enum_prefix=None)
GenderType.MALE = GenderType._CF_enumeration.addEnumeration(unicode_value='MALE', tag='MALE')
GenderType.FEMALE = GenderType._CF_enumeration.addEnumeration(unicode_value='FEMALE', tag='FEMALE')
GenderType._InitializeFacetMap(GenderType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'GenderType', GenderType)

# Atomic simple type: {http://railgds.net/ws/commontypes}HoldExpirationType
class HoldExpirationType (pyxb.binding.datatypes.dateTime):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HoldExpirationType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1080, 1)
    _Documentation = None
HoldExpirationType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'HoldExpirationType', HoldExpirationType)

# Atomic simple type: {http://railgds.net/ws/commontypes}IdentificationType
class IdentificationType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IdentificationType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1083, 1)
    _Documentation = None
IdentificationType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
IdentificationType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
IdentificationType._InitializeFacetMap(IdentificationType._CF_maxLength,
   IdentificationType._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'IdentificationType', IdentificationType)

# Atomic simple type: {http://railgds.net/ws/commontypes}ISOCountryCodeType
class ISOCountryCodeType (pyxb.binding.datatypes.string):

    """An ISO 3166 country code"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ISOCountryCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1089, 1)
    _Documentation = 'An ISO 3166 country code'
ISOCountryCodeType._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(2))
ISOCountryCodeType._CF_pattern = pyxb.binding.facets.CF_pattern()
ISOCountryCodeType._CF_pattern.addPattern(pattern='[a-zA-Z]+')
ISOCountryCodeType._InitializeFacetMap(ISOCountryCodeType._CF_length,
   ISOCountryCodeType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ISOCountryCodeType', ISOCountryCodeType)

# Atomic simple type: {http://railgds.net/ws/commontypes}ISOCountryCode3Type
class ISOCountryCode3Type (pyxb.binding.datatypes.string):

    """An ISO 3166 country code"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ISOCountryCode3Type')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1099, 4)
    _Documentation = 'An ISO 3166 country code'
ISOCountryCode3Type._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(3))
ISOCountryCode3Type._CF_pattern = pyxb.binding.facets.CF_pattern()
ISOCountryCode3Type._CF_pattern.addPattern(pattern='[a-zA-Z]+')
ISOCountryCode3Type._InitializeFacetMap(ISOCountryCode3Type._CF_length,
   ISOCountryCode3Type._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ISOCountryCode3Type', ISOCountryCode3Type)

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1219, 5)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.TICKET = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='TICKET', tag='TICKET')
STD_ANON_13.RESERVATION = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='RESERVATION', tag='RESERVATION')
STD_ANON_13.TICKETED_RES = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='TICKETED_RES', tag='TICKETED_RES')
STD_ANON_13.TRAVEL_PASS = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='TRAVEL_PASS', tag='TRAVEL_PASS')
STD_ANON_13.ACCOMMODATION = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='ACCOMMODATION', tag='ACCOMMODATION')
STD_ANON_13.TAX = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='TAX', tag='TAX')
STD_ANON_13.TAX_NATIONAL = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='TAX_NATIONAL', tag='TAX_NATIONAL')
STD_ANON_13.TAX_STATEPROVINCE = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='TAX_STATEPROVINCE', tag='TAX_STATEPROVINCE')
STD_ANON_13.FEE = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='FEE', tag='FEE')
STD_ANON_13.CORP_DISCOUNT = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='CORP_DISCOUNT', tag='CORP_DISCOUNT')
STD_ANON_13.VAT = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='VAT', tag='VAT')
STD_ANON_13.VAT_TICKET = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='VAT_TICKET', tag='VAT_TICKET')
STD_ANON_13.VAT_RESERVATION = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='VAT_RESERVATION', tag='VAT_RESERVATION')
STD_ANON_13.VAT_FEE = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='VAT_FEE', tag='VAT_FEE')
STD_ANON_13.VAT_ONBOARD_SERVICES = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='VAT_ONBOARD_SERVICES', tag='VAT_ONBOARD_SERVICES')
STD_ANON_13.ONBOARD_SERVICES = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='ONBOARD_SERVICES', tag='ONBOARD_SERVICES')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1253, 32)
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.RESERVATION = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='RESERVATION', tag='RESERVATION')
STD_ANON_14.ACCOMMODATION = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='ACCOMMODATION', tag='ACCOMMODATION')
STD_ANON_14.AMENITY = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='AMENITY', tag='AMENITY')
STD_ANON_14.LOCAL_SERVICE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='LOCAL_SERVICE', tag='LOCAL_SERVICE')
STD_ANON_14.ONBOARD_SERVICES = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='ONBOARD_SERVICES', tag='ONBOARD_SERVICES')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1292, 12)
    _Documentation = None
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.SEAT_RESERVATION = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='SEAT_RESERVATION', tag='SEAT_RESERVATION')
STD_ANON_15.ACCOMMODATION = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='ACCOMMODATION', tag='ACCOMMODATION')
STD_ANON_15.MEAL = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='MEAL', tag='MEAL')
STD_ANON_15.INTERNET = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='INTERNET', tag='INTERNET')
STD_ANON_15.LOCAL_TRANSIT = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='LOCAL_TRANSIT', tag='LOCAL_TRANSIT')
STD_ANON_15.OFFICE_SPACE = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='OFFICE_SPACE', tag='OFFICE_SPACE')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1357, 20)
    _Documentation = None
STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.TICKET = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='TICKET', tag='TICKET')
STD_ANON_16.TRAVEL_PASS = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='TRAVEL_PASS', tag='TRAVEL_PASS')
STD_ANON_16.RESERVATION = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='RESERVATION', tag='RESERVATION')
STD_ANON_16.TICKETED_RES = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='TICKETED_RES', tag='TICKETED_RES')
STD_ANON_16.ACCOMMODATION = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='ACCOMMODATION', tag='ACCOMMODATION')
STD_ANON_16.TAX = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='TAX', tag='TAX')
STD_ANON_16.TAX_NATIONAL = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='TAX_NATIONAL', tag='TAX_NATIONAL')
STD_ANON_16.TAX_STATEPROVINCE = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='TAX_STATEPROVINCE', tag='TAX_STATEPROVINCE')
STD_ANON_16.FEE = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='FEE', tag='FEE')
STD_ANON_16.VAT = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='VAT', tag='VAT')
STD_ANON_16.ONBOARD_SERVICES = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='ONBOARD_SERVICES', tag='ONBOARD_SERVICES')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1382, 20)
    _Documentation = None
STD_ANON_17._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_17, enum_prefix=None)
STD_ANON_17.SUPPLIER = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='SUPPLIER', tag='SUPPLIER')
STD_ANON_17.DISTRIBUTOR = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='DISTRIBUTOR', tag='DISTRIBUTOR')
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}MoneyValueType
class MoneyValueType (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MoneyValueType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1394, 1)
    _Documentation = None
MoneyValueType._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(value=pyxb.binding.datatypes.nonNegativeInteger(2))
MoneyValueType._InitializeFacetMap(MoneyValueType._CF_fractionDigits)
Namespace.addCategoryObject('typeBinding', 'MoneyValueType', MoneyValueType)

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1458, 57)
    _Documentation = None
STD_ANON_18._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_18, enum_prefix=None)
STD_ANON_18.TICKET = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='TICKET', tag='TICKET')
STD_ANON_18.TICKETED_RES = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='TICKETED_RES', tag='TICKETED_RES')
STD_ANON_18.RESERVATION = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='RESERVATION', tag='RESERVATION')
STD_ANON_18.FEE = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='FEE', tag='FEE')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1508, 3)
    _Documentation = None
STD_ANON_19._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_19, enum_prefix=None)
STD_ANON_19.PENDING = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='PENDING', tag='PENDING')
STD_ANON_19.BOOKED = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='BOOKED', tag='BOOKED')
STD_ANON_19.CONFIRMED = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='CONFIRMED', tag='CONFIRMED')
STD_ANON_19.TICKETED = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='TICKETED', tag='TICKETED')
STD_ANON_19.ABANDONED = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='ABANDONED', tag='ABANDONED')
STD_ANON_19.RELEASED = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='RELEASED', tag='RELEASED')
STD_ANON_19.CANCELED = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='CANCELED', tag='CANCELED')
STD_ANON_19.RETURNED = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='RETURNED', tag='RETURNED')
STD_ANON_19.WITHDRAWN = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='WITHDRAWN', tag='WITHDRAWN')
STD_ANON_19.INVALID = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='INVALID', tag='INVALID')
STD_ANON_19.PRINTING = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='PRINTING', tag='PRINTING')
STD_ANON_19.REPLACED = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='REPLACED', tag='REPLACED')
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_20 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1533, 3)
    _Documentation = None
STD_ANON_20._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_20, enum_prefix=None)
STD_ANON_20.LOYALTY = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='LOYALTY', tag='LOYALTY')
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_21 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1642, 3)
    _Documentation = None
STD_ANON_21._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_21, enum_prefix=None)
STD_ANON_21.PAYMENT = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='PAYMENT', tag='PAYMENT')
STD_ANON_21.PAYMENT_FAILED = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='PAYMENT_FAILED', tag='PAYMENT_FAILED')
STD_ANON_21.DEPOSIT = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='DEPOSIT', tag='DEPOSIT')
STD_ANON_21.REFUND = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='REFUND', tag='REFUND')
STD_ANON_21.REFUND_FAILED = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='REFUND_FAILED', tag='REFUND_FAILED')
STD_ANON_21.CREDIT = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='CREDIT', tag='CREDIT')
STD_ANON_21._InitializeFacetMap(STD_ANON_21._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}PointOfSaleCodeType
class PointOfSaleCodeType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PointOfSaleCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1654, 1)
    _Documentation = None
PointOfSaleCodeType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(2))
PointOfSaleCodeType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(2))
PointOfSaleCodeType._CF_pattern = pyxb.binding.facets.CF_pattern()
PointOfSaleCodeType._CF_pattern.addPattern(pattern='[A-Z][A-Z]')
PointOfSaleCodeType._InitializeFacetMap(PointOfSaleCodeType._CF_maxLength,
   PointOfSaleCodeType._CF_minLength,
   PointOfSaleCodeType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'PointOfSaleCodeType', PointOfSaleCodeType)

# Atomic simple type: {http://railgds.net/ws/commontypes}ReservableType
class ReservableType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReservableType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1730, 1)
    _Documentation = None
ReservableType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReservableType, enum_prefix=None)
ReservableType.MANDATORY = ReservableType._CF_enumeration.addEnumeration(unicode_value='MANDATORY', tag='MANDATORY')
ReservableType.NOT_POSSIBLE = ReservableType._CF_enumeration.addEnumeration(unicode_value='NOT_POSSIBLE', tag='NOT_POSSIBLE')
ReservableType.OPTIONAL = ReservableType._CF_enumeration.addEnumeration(unicode_value='OPTIONAL', tag='OPTIONAL')
ReservableType.INCLUDED = ReservableType._CF_enumeration.addEnumeration(unicode_value='INCLUDED', tag='INCLUDED')
ReservableType._InitializeFacetMap(ReservableType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReservableType', ReservableType)

# Atomic simple type: [anonymous]
class STD_ANON_22 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1756, 3)
    _Documentation = None
STD_ANON_22._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_22, enum_prefix=None)
STD_ANON_22.PREFERRED = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='PREFERRED', tag='PREFERRED')
STD_ANON_22.RESTRICTED = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='RESTRICTED', tag='RESTRICTED')
STD_ANON_22.PERMITTED = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='PERMITTED', tag='PERMITTED')
STD_ANON_22._InitializeFacetMap(STD_ANON_22._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_23 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1785, 3)
    _Documentation = None
STD_ANON_23._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_23, enum_prefix=None)
STD_ANON_23.EXCHANGE_ALLOWED = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='EXCHANGE_ALLOWED', tag='EXCHANGE_ALLOWED')
STD_ANON_23.EXCHANGE_PROHIBITED = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='EXCHANGE_PROHIBITED', tag='EXCHANGE_PROHIBITED')
STD_ANON_23.REFUND_ALLOWED = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='REFUND_ALLOWED', tag='REFUND_ALLOWED')
STD_ANON_23.REFUND_PROHIBITED = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='REFUND_PROHIBITED', tag='REFUND_PROHIBITED')
STD_ANON_23.TEXT = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='TEXT', tag='TEXT')
STD_ANON_23._InitializeFacetMap(STD_ANON_23._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_24 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1796, 12)
    _Documentation = None
STD_ANON_24._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_24, enum_prefix=None)
STD_ANON_24.TICKET = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='TICKET', tag='TICKET')
STD_ANON_24.RESERVATION = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='RESERVATION', tag='RESERVATION')
STD_ANON_24.TRAVEL_PASS = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='TRAVEL_PASS', tag='TRAVEL_PASS')
STD_ANON_24.FEE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='FEE', tag='FEE')
STD_ANON_24.ACCOMMODATION = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ACCOMMODATION', tag='ACCOMMODATION')
STD_ANON_24.LOCAL_SERVICE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='LOCAL_SERVICE', tag='LOCAL_SERVICE')
STD_ANON_24.ONBOARD_SERVICES = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='ONBOARD_SERVICES', tag='ONBOARD_SERVICES')
STD_ANON_24._InitializeFacetMap(STD_ANON_24._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_25 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1809, 3)
    _Documentation = None
STD_ANON_25._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_25, enum_prefix=None)
STD_ANON_25.BOOKED = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value='BOOKED', tag='BOOKED')
STD_ANON_25.CONFIRMED = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value='CONFIRMED', tag='CONFIRMED')
STD_ANON_25.TICKETED = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value='TICKETED', tag='TICKETED')
STD_ANON_25.RETURNED = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value='RETURNED', tag='RETURNED')
STD_ANON_25._InitializeFacetMap(STD_ANON_25._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_26 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1819, 3)
    _Documentation = None
STD_ANON_26._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_26, enum_prefix=None)
STD_ANON_26.TVM = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='TVM', tag='TVM')
STD_ANON_26.TBX = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='TBX', tag='TBX')
STD_ANON_26.TBM = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='TBM', tag='TBM')
STD_ANON_26.TBO = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='TBO', tag='TBO')
STD_ANON_26.TML = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='TML', tag='TML')
STD_ANON_26.TOF = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='TOF', tag='TOF')
STD_ANON_26.TBC = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='TBC', tag='TBC')
STD_ANON_26.PAH = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='PAH', tag='PAH')
STD_ANON_26.ETK = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='ETK', tag='ETK')
STD_ANON_26.PRN = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='PRN', tag='PRN')
STD_ANON_26.SMS = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value='SMS', tag='SMS')
STD_ANON_26._InitializeFacetMap(STD_ANON_26._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_27 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1838, 12)
    _Documentation = None
STD_ANON_27._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_27, enum_prefix=None)
STD_ANON_27.NOT_POSSIBLE = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='NOT_POSSIBLE', tag='NOT_POSSIBLE')
STD_ANON_27.OPTIONAL = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='OPTIONAL', tag='OPTIONAL')
STD_ANON_27.MANDATORY = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='MANDATORY', tag='MANDATORY')
STD_ANON_27.SPLIT = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='SPLIT', tag='SPLIT')
STD_ANON_27._InitializeFacetMap(STD_ANON_27._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}SeatAssignmentDirectionType
class SeatAssignmentDirectionType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SeatAssignmentDirectionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1849, 1)
    _Documentation = None
SeatAssignmentDirectionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SeatAssignmentDirectionType, enum_prefix=None)
SeatAssignmentDirectionType.FORWARD = SeatAssignmentDirectionType._CF_enumeration.addEnumeration(unicode_value='FORWARD', tag='FORWARD')
SeatAssignmentDirectionType.BACKWARD = SeatAssignmentDirectionType._CF_enumeration.addEnumeration(unicode_value='BACKWARD', tag='BACKWARD')
SeatAssignmentDirectionType.UNKNOWN = SeatAssignmentDirectionType._CF_enumeration.addEnumeration(unicode_value='UNKNOWN', tag='UNKNOWN')
SeatAssignmentDirectionType.UNASSIGNED = SeatAssignmentDirectionType._CF_enumeration.addEnumeration(unicode_value='UNASSIGNED', tag='UNASSIGNED')
SeatAssignmentDirectionType.AIRLINE = SeatAssignmentDirectionType._CF_enumeration.addEnumeration(unicode_value='AIRLINE', tag='AIRLINE')
SeatAssignmentDirectionType._InitializeFacetMap(SeatAssignmentDirectionType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SeatAssignmentDirectionType', SeatAssignmentDirectionType)

# Atomic simple type: {http://railgds.net/ws/commontypes}SeatAttributeType
class SeatAttributeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SeatAttributeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1888, 4)
    _Documentation = None
SeatAttributeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SeatAttributeType, enum_prefix=None)
SeatAttributeType.WINDOW = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='WINDOW', tag='WINDOW')
SeatAttributeType.AISLE = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='AISLE', tag='AISLE')
SeatAttributeType.COMPARTMENT = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='COMPARTMENT', tag='COMPARTMENT')
SeatAttributeType.MIDDLE = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='MIDDLE', tag='MIDDLE')
SeatAttributeType.QUIET = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='QUIET', tag='QUIET')
SeatAttributeType.TABLE = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='TABLE', tag='TABLE')
SeatAttributeType.POWER = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='POWER', tag='POWER')
SeatAttributeType.PHONE = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='PHONE', tag='PHONE')
SeatAttributeType.LUGGAGE = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='LUGGAGE', tag='LUGGAGE')
SeatAttributeType.LAVATORY = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='LAVATORY', tag='LAVATORY')
SeatAttributeType.SINGLE = SeatAttributeType._CF_enumeration.addEnumeration(unicode_value='SINGLE', tag='SINGLE')
SeatAttributeType._InitializeFacetMap(SeatAttributeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SeatAttributeType', SeatAttributeType)

# Atomic simple type: {http://railgds.net/ws/commontypes}SeatPreferenceType
class SeatPreferenceType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SeatPreferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1904, 1)
    _Documentation = None
SeatPreferenceType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SeatPreferenceType, enum_prefix=None)
SeatPreferenceType.FORWARD = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='FORWARD', tag='FORWARD')
SeatPreferenceType.BACKWARD = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='BACKWARD', tag='BACKWARD')
SeatPreferenceType.AIRLINE = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='AIRLINE', tag='AIRLINE')
SeatPreferenceType.WINDOW = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='WINDOW', tag='WINDOW')
SeatPreferenceType.AISLE = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='AISLE', tag='AISLE')
SeatPreferenceType.COMPARTMENT = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='COMPARTMENT', tag='COMPARTMENT')
SeatPreferenceType.MIDDLE = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='MIDDLE', tag='MIDDLE')
SeatPreferenceType.QUIET = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='QUIET', tag='QUIET')
SeatPreferenceType.TABLE = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='TABLE', tag='TABLE')
SeatPreferenceType.POWER = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='POWER', tag='POWER')
SeatPreferenceType.PHONE = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='PHONE', tag='PHONE')
SeatPreferenceType.LUGGAGE = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='LUGGAGE', tag='LUGGAGE')
SeatPreferenceType.LAVATORY = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='LAVATORY', tag='LAVATORY')
SeatPreferenceType.SINGLE = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='SINGLE', tag='SINGLE')
SeatPreferenceType.NEARBY = SeatPreferenceType._CF_enumeration.addEnumeration(unicode_value='NEARBY', tag='NEARBY')
SeatPreferenceType._InitializeFacetMap(SeatPreferenceType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SeatPreferenceType', SeatPreferenceType)

# Atomic simple type: {http://railgds.net/ws/commontypes}ServiceClassType
class ServiceClassType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ServiceClassType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1969, 1)
    _Documentation = None
ServiceClassType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ServiceClassType, enum_prefix=None)
ServiceClassType.FIRST = ServiceClassType._CF_enumeration.addEnumeration(unicode_value='FIRST', tag='FIRST')
ServiceClassType.SECOND = ServiceClassType._CF_enumeration.addEnumeration(unicode_value='SECOND', tag='SECOND')
ServiceClassType.THIRD = ServiceClassType._CF_enumeration.addEnumeration(unicode_value='THIRD', tag='THIRD')
ServiceClassType.PREMIER = ServiceClassType._CF_enumeration.addEnumeration(unicode_value='PREMIER', tag='PREMIER')
ServiceClassType.SLEEPER = ServiceClassType._CF_enumeration.addEnumeration(unicode_value='SLEEPER', tag='SLEEPER')
ServiceClassType.AUTO = ServiceClassType._CF_enumeration.addEnumeration(unicode_value='AUTO', tag='AUTO')
ServiceClassType.BEDROOM = ServiceClassType._CF_enumeration.addEnumeration(unicode_value='BEDROOM', tag='BEDROOM')
ServiceClassType.MISC = ServiceClassType._CF_enumeration.addEnumeration(unicode_value='MISC', tag='MISC')
ServiceClassType.NOT_APPLICABLE = ServiceClassType._CF_enumeration.addEnumeration(unicode_value='NOT_APPLICABLE', tag='NOT_APPLICABLE')
ServiceClassType.SLEEPERPLUS = ServiceClassType._CF_enumeration.addEnumeration(unicode_value='SLEEPERPLUS', tag='SLEEPERPLUS')
ServiceClassType._InitializeFacetMap(ServiceClassType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ServiceClassType', ServiceClassType)

# Atomic simple type: {http://railgds.net/ws/commontypes}StateProvType
class StateProvType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StateProvType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1993, 1)
    _Documentation = None
StateProvType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'StateProvType', StateProvType)

# Atomic simple type: [anonymous]
class STD_ANON_28 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2275, 3)
    _Documentation = None
STD_ANON_28._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_28, enum_prefix=None)
STD_ANON_28.TVM = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='TVM', tag='TVM')
STD_ANON_28.TBX = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='TBX', tag='TBX')
STD_ANON_28.TBM = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='TBM', tag='TBM')
STD_ANON_28.TBO = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='TBO', tag='TBO')
STD_ANON_28.TML = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='TML', tag='TML')
STD_ANON_28.TOF = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='TOF', tag='TOF')
STD_ANON_28.TBC = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='TBC', tag='TBC')
STD_ANON_28.PAH = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='PAH', tag='PAH')
STD_ANON_28.ETK = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='ETK', tag='ETK')
STD_ANON_28.PRN = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='PRN', tag='PRN')
STD_ANON_28.EML = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='EML', tag='EML')
STD_ANON_28.SMS = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='SMS', tag='SMS')
STD_ANON_28._InitializeFacetMap(STD_ANON_28._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_29 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2367, 3)
    _Documentation = None
STD_ANON_29._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_29, value=pyxb.binding.datatypes.int(0))
STD_ANON_29._InitializeFacetMap(STD_ANON_29._CF_minInclusive)

# Atomic simple type: [anonymous]
class STD_ANON_30 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2385, 4)
    _Documentation = None
STD_ANON_30._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_30, enum_prefix=None)
STD_ANON_30.PHOTOCARD = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='PHOTOCARD', tag='PHOTOCARD')
STD_ANON_30.PERMRESIDENT = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='PERMRESIDENT', tag='PERMRESIDENT')
STD_ANON_30.PASSPORT = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='PASSPORT', tag='PASSPORT')
STD_ANON_30.NATURALCERT = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='NATURALCERT', tag='NATURALCERT')
STD_ANON_30.MILORDER = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='MILORDER', tag='MILORDER')
STD_ANON_30._InitializeFacetMap(STD_ANON_30._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_31 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2405, 4)
    _Documentation = None
STD_ANON_31._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_31, enum_prefix=None)
STD_ANON_31.CITIZENSHIP = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='CITIZENSHIP', tag='CITIZENSHIP')
STD_ANON_31._InitializeFacetMap(STD_ANON_31._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}TravelPointTypeEnumeration
class TravelPointTypeEnumeration (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TravelPointTypeEnumeration')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2413, 1)
    _Documentation = None
TravelPointTypeEnumeration._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TravelPointTypeEnumeration, enum_prefix=None)
TravelPointTypeEnumeration.STATION = TravelPointTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='STATION', tag='STATION')
TravelPointTypeEnumeration.CITY = TravelPointTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='CITY', tag='CITY')
TravelPointTypeEnumeration.REGION = TravelPointTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='REGION', tag='REGION')
TravelPointTypeEnumeration.COUNTRY = TravelPointTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='COUNTRY', tag='COUNTRY')
TravelPointTypeEnumeration._InitializeFacetMap(TravelPointTypeEnumeration._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TravelPointTypeEnumeration', TravelPointTypeEnumeration)

# Atomic simple type: [anonymous]
class STD_ANON_32 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2447, 20)
    _Documentation = None
STD_ANON_32._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_32, enum_prefix=None)
STD_ANON_32.SEAT = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='SEAT', tag='SEAT')
STD_ANON_32.TICKET = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='TICKET', tag='TICKET')
STD_ANON_32.TICKETED_RES = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='TICKETED_RES', tag='TICKETED_RES')
STD_ANON_32._InitializeFacetMap(STD_ANON_32._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_33 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2486, 3)
    _Documentation = None
STD_ANON_33._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_33, enum_prefix=None)
STD_ANON_33.READY = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='READY', tag='READY')
STD_ANON_33.CANCELED = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='CANCELED', tag='CANCELED')
STD_ANON_33.PROCESSED = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='PROCESSED', tag='PROCESSED')
STD_ANON_33.ISSUED = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='ISSUED', tag='ISSUED')
STD_ANON_33.RETURNED = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='RETURNED', tag='RETURNED')
STD_ANON_33.RETURNED_PARTIAL = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='RETURNED_PARTIAL', tag='RETURNED_PARTIAL')
STD_ANON_33.CONSUMED = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='CONSUMED', tag='CONSUMED')
STD_ANON_33.PRINTING = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='PRINTING', tag='PRINTING')
STD_ANON_33.FAILED = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='FAILED', tag='FAILED')
STD_ANON_33._InitializeFacetMap(STD_ANON_33._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}YesNoType
class YesNoType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'YesNoType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2510, 1)
    _Documentation = None
YesNoType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=YesNoType, enum_prefix=None)
YesNoType.YES = YesNoType._CF_enumeration.addEnumeration(unicode_value='YES', tag='YES')
YesNoType.NO = YesNoType._CF_enumeration.addEnumeration(unicode_value='NO', tag='NO')
YesNoType._InitializeFacetMap(YesNoType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'YesNoType', YesNoType)

# Atomic simple type: [anonymous]
class STD_ANON_34 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2530, 16)
    _Documentation = None
STD_ANON_34._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_34, enum_prefix=None)
STD_ANON_34.PERMRESIDENT = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='PERMRESIDENT', tag='PERMRESIDENT')
STD_ANON_34.PASSPORT = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='PASSPORT', tag='PASSPORT')
STD_ANON_34.NATURALCERT = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='NATURALCERT', tag='NATURALCERT')
STD_ANON_34.MILORDER = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='MILORDER', tag='MILORDER')
STD_ANON_34.PHOTOCARD = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='PHOTOCARD', tag='PHOTOCARD')
STD_ANON_34._InitializeFacetMap(STD_ANON_34._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_35 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2542, 12)
    _Documentation = None
STD_ANON_35._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_35, enum_prefix=None)
STD_ANON_35.PASSENGER_ADDRESS = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='PASSENGER_ADDRESS', tag='PASSENGER_ADDRESS')
STD_ANON_35.TRAVEL_DOCUMENTS = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='TRAVEL_DOCUMENTS', tag='TRAVEL_DOCUMENTS')
STD_ANON_35.DATE_OF_BIRTH = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='DATE_OF_BIRTH', tag='DATE_OF_BIRTH')
STD_ANON_35.GENDER = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='GENDER', tag='GENDER')
STD_ANON_35.RESIDENCE_INFORMATION = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='RESIDENCE_INFORMATION', tag='RESIDENCE_INFORMATION')
STD_ANON_35.PASSENGER_NAME = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='PASSENGER_NAME', tag='PASSENGER_NAME')
STD_ANON_35.PASSENGER_TITLE = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='PASSENGER_TITLE', tag='PASSENGER_TITLE')
STD_ANON_35._InitializeFacetMap(STD_ANON_35._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_36 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2657, 12)
    _Documentation = None
STD_ANON_36._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_36, enum_prefix=None)
STD_ANON_36.PREFERRED = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='PREFERRED', tag='PREFERRED')
STD_ANON_36.PERMITTED = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='PERMITTED', tag='PERMITTED')
STD_ANON_36.RESTRICTED = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='RESTRICTED', tag='RESTRICTED')
STD_ANON_36._InitializeFacetMap(STD_ANON_36._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_37 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2672, 12)
    _Documentation = None
STD_ANON_37._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_37, enum_prefix=None)
STD_ANON_37.PERMITTED = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='PERMITTED', tag='PERMITTED')
STD_ANON_37.RESTRICTED = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='RESTRICTED', tag='RESTRICTED')
STD_ANON_37._InitializeFacetMap(STD_ANON_37._CF_enumeration)

# Atomic simple type: {http://railgds.net/ws/commontypes}IssueType
class IssueType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IssueType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2703, 1)
    _Documentation = None
IssueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IssueType, enum_prefix=None)
IssueType.NEW = IssueType._CF_enumeration.addEnumeration(unicode_value='NEW', tag='NEW')
IssueType._InitializeFacetMap(IssueType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'IssueType', IssueType)

# Complex type {http://railgds.net/ws/commontypes}AddressType with content type ELEMENT_ONLY
class AddressType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}AddressType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AddressType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 9, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}company uses Python identifier company
    __company = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'company'), 'company', '__httprailgds_netwscommontypes_AddressType_httprailgds_netwscommontypescompany', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 11, 3), )

    
    company = property(__company.value, __company.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}address1 uses Python identifier address1
    __address1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'address1'), 'address1', '__httprailgds_netwscommontypes_AddressType_httprailgds_netwscommontypesaddress1', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 12, 3), )

    
    address1 = property(__address1.value, __address1.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}address2 uses Python identifier address2
    __address2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'address2'), 'address2', '__httprailgds_netwscommontypes_AddressType_httprailgds_netwscommontypesaddress2', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 13, 3), )

    
    address2 = property(__address2.value, __address2.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}city uses Python identifier city
    __city = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'city'), 'city', '__httprailgds_netwscommontypes_AddressType_httprailgds_netwscommontypescity', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 14, 3), )

    
    city = property(__city.value, __city.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}stateProv uses Python identifier stateProv
    __stateProv = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'stateProv'), 'stateProv', '__httprailgds_netwscommontypes_AddressType_httprailgds_netwscommontypesstateProv', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 15, 3), )

    
    stateProv = property(__stateProv.value, __stateProv.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}zipCode uses Python identifier zipCode
    __zipCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zipCode'), 'zipCode', '__httprailgds_netwscommontypes_AddressType_httprailgds_netwscommontypeszipCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 16, 3), )

    
    zipCode = property(__zipCode.value, __zipCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}country uses Python identifier country
    __country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'country'), 'country', '__httprailgds_netwscommontypes_AddressType_httprailgds_netwscommontypescountry', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 17, 3), )

    
    country = property(__country.value, __country.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}country3 uses Python identifier country3
    __country3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'country3'), 'country3', '__httprailgds_netwscommontypes_AddressType_httprailgds_netwscommontypescountry3', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 18, 12), )

    
    country3 = property(__country3.value, __country3.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}email uses Python identifier email
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'email'), 'email', '__httprailgds_netwscommontypes_AddressType_httprailgds_netwscommontypesemail', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 19, 12), )

    
    email = property(__email.value, __email.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}addressType uses Python identifier addressType
    __addressType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressType'), 'addressType', '__httprailgds_netwscommontypes_AddressType_httprailgds_netwscommontypesaddressType', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 20, 3), )

    
    addressType = property(__addressType.value, __addressType.set, None, None)

    _ElementMap.update({
        __company.name() : __company,
        __address1.name() : __address1,
        __address2.name() : __address2,
        __city.name() : __city,
        __stateProv.name() : __stateProv,
        __zipCode.name() : __zipCode,
        __country.name() : __country,
        __country3.name() : __country3,
        __email.name() : __email,
        __addressType.name() : __addressType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'AddressType', AddressType)


# Complex type {http://railgds.net/ws/commontypes}BaseConfirmationCardType with content type ELEMENT_ONLY
class BaseConfirmationCardType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseConfirmationCardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseConfirmationCardType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 121, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}cardholderNameLast uses Python identifier cardholderNameLast
    __cardholderNameLast = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameLast'), 'cardholderNameLast', '__httprailgds_netwscommontypes_BaseConfirmationCardType_httprailgds_netwscommontypescardholderNameLast', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 123, 12), )

    
    cardholderNameLast = property(__cardholderNameLast.value, __cardholderNameLast.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cardholderNameFirst uses Python identifier cardholderNameFirst
    __cardholderNameFirst = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameFirst'), 'cardholderNameFirst', '__httprailgds_netwscommontypes_BaseConfirmationCardType_httprailgds_netwscommontypescardholderNameFirst', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 124, 12), )

    
    cardholderNameFirst = property(__cardholderNameFirst.value, __cardholderNameFirst.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cardholderNameMiddle uses Python identifier cardholderNameMiddle
    __cardholderNameMiddle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameMiddle'), 'cardholderNameMiddle', '__httprailgds_netwscommontypes_BaseConfirmationCardType_httprailgds_netwscommontypescardholderNameMiddle', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 125, 12), )

    
    cardholderNameMiddle = property(__cardholderNameMiddle.value, __cardholderNameMiddle.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cardNumber uses Python identifier cardNumber
    __cardNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardNumber'), 'cardNumber', '__httprailgds_netwscommontypes_BaseConfirmationCardType_httprailgds_netwscommontypescardNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 126, 12), )

    
    cardNumber = property(__cardNumber.value, __cardNumber.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}paymentToken uses Python identifier paymentToken
    __paymentToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentToken'), 'paymentToken', '__httprailgds_netwscommontypes_BaseConfirmationCardType_httprailgds_netwscommontypespaymentToken', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 127, 12), )

    
    paymentToken = property(__paymentToken.value, __paymentToken.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}expirationYearMonth uses Python identifier expirationYearMonth
    __expirationYearMonth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth'), 'expirationYearMonth', '__httprailgds_netwscommontypes_BaseConfirmationCardType_httprailgds_netwscommontypesexpirationYearMonth', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 128, 12), )

    
    expirationYearMonth = property(__expirationYearMonth.value, __expirationYearMonth.set, None, None)

    _ElementMap.update({
        __cardholderNameLast.name() : __cardholderNameLast,
        __cardholderNameFirst.name() : __cardholderNameFirst,
        __cardholderNameMiddle.name() : __cardholderNameMiddle,
        __cardNumber.name() : __cardNumber,
        __paymentToken.name() : __paymentToken,
        __expirationYearMonth.name() : __expirationYearMonth
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BaseConfirmationCardType', BaseConfirmationCardType)


# Complex type {http://railgds.net/ws/commontypes}selectedConfirmationOptionType with content type ELEMENT_ONLY
class selectedConfirmationOptionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}selectedConfirmationOptionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'selectedConfirmationOptionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 131, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}creditCardOption uses Python identifier creditCardOption
    __creditCardOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'creditCardOption'), 'creditCardOption', '__httprailgds_netwscommontypes_selectedConfirmationOptionType_httprailgds_netwscommontypescreditCardOption', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 134, 12), )

    
    creditCardOption = property(__creditCardOption.value, __creditCardOption.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}debitCardOption uses Python identifier debitCardOption
    __debitCardOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debitCardOption'), 'debitCardOption', '__httprailgds_netwscommontypes_selectedConfirmationOptionType_httprailgds_netwscommontypesdebitCardOption', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 141, 12), )

    
    debitCardOption = property(__debitCardOption.value, __debitCardOption.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}loyaltyCardOption uses Python identifier loyaltyCardOption
    __loyaltyCardOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCardOption'), 'loyaltyCardOption', '__httprailgds_netwscommontypes_selectedConfirmationOptionType_httprailgds_netwscommontypesloyaltyCardOption', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 152, 12), )

    
    loyaltyCardOption = property(__loyaltyCardOption.value, __loyaltyCardOption.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}personalIdentificationCardOption uses Python identifier personalIdentificationCardOption
    __personalIdentificationCardOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'personalIdentificationCardOption'), 'personalIdentificationCardOption', '__httprailgds_netwscommontypes_selectedConfirmationOptionType_httprailgds_netwscommontypespersonalIdentificationCardOption', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 161, 12), )

    
    personalIdentificationCardOption = property(__personalIdentificationCardOption.value, __personalIdentificationCardOption.set, None, None)

    _ElementMap.update({
        __creditCardOption.name() : __creditCardOption,
        __debitCardOption.name() : __debitCardOption,
        __loyaltyCardOption.name() : __loyaltyCardOption,
        __personalIdentificationCardOption.name() : __personalIdentificationCardOption
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'selectedConfirmationOptionType', selectedConfirmationOptionType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 153, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}program uses Python identifier program
    __program = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'program'), 'program', '__httprailgds_netwscommontypes_CTD_ANON_httprailgds_netwscommontypesprogram', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 155, 24), )

    
    program = property(__program.value, __program.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'identifier'), 'identifier', '__httprailgds_netwscommontypes_CTD_ANON_httprailgds_netwscommontypesidentifier', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 156, 24), )

    
    identifier = property(__identifier.value, __identifier.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}expirationYearMonthDay uses Python identifier expirationYearMonthDay
    __expirationYearMonthDay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonthDay'), 'expirationYearMonthDay', '__httprailgds_netwscommontypes_CTD_ANON_httprailgds_netwscommontypesexpirationYearMonthDay', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 157, 24), )

    
    expirationYearMonthDay = property(__expirationYearMonthDay.value, __expirationYearMonthDay.set, None, None)

    _ElementMap.update({
        __program.name() : __program,
        __identifier.name() : __identifier,
        __expirationYearMonthDay.name() : __expirationYearMonthDay
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 162, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}cardholderNameLast uses Python identifier cardholderNameLast
    __cardholderNameLast = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameLast'), 'cardholderNameLast', '__httprailgds_netwscommontypes_CTD_ANON__httprailgds_netwscommontypescardholderNameLast', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 164, 24), )

    
    cardholderNameLast = property(__cardholderNameLast.value, __cardholderNameLast.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cardholderNameFirst uses Python identifier cardholderNameFirst
    __cardholderNameFirst = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameFirst'), 'cardholderNameFirst', '__httprailgds_netwscommontypes_CTD_ANON__httprailgds_netwscommontypescardholderNameFirst', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 165, 24), )

    
    cardholderNameFirst = property(__cardholderNameFirst.value, __cardholderNameFirst.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cardholderNameMiddle uses Python identifier cardholderNameMiddle
    __cardholderNameMiddle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameMiddle'), 'cardholderNameMiddle', '__httprailgds_netwscommontypes_CTD_ANON__httprailgds_netwscommontypescardholderNameMiddle', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 166, 24), )

    
    cardholderNameMiddle = property(__cardholderNameMiddle.value, __cardholderNameMiddle.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'identifier'), 'identifier', '__httprailgds_netwscommontypes_CTD_ANON__httprailgds_netwscommontypesidentifier', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 167, 24), )

    
    identifier = property(__identifier.value, __identifier.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}countryCode uses Python identifier countryCode
    __countryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'countryCode'), 'countryCode', '__httprailgds_netwscommontypes_CTD_ANON__httprailgds_netwscommontypescountryCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 168, 24), )

    
    countryCode = property(__countryCode.value, __countryCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}expirationYearMonthDay uses Python identifier expirationYearMonthDay
    __expirationYearMonthDay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonthDay'), 'expirationYearMonthDay', '__httprailgds_netwscommontypes_CTD_ANON__httprailgds_netwscommontypesexpirationYearMonthDay', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 169, 24), )

    
    expirationYearMonthDay = property(__expirationYearMonthDay.value, __expirationYearMonthDay.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}dateOfBirth uses Python identifier dateOfBirth
    __dateOfBirth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth'), 'dateOfBirth', '__httprailgds_netwscommontypes_CTD_ANON__httprailgds_netwscommontypesdateOfBirth', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 170, 24), )

    
    dateOfBirth = property(__dateOfBirth.value, __dateOfBirth.set, None, None)

    _ElementMap.update({
        __cardholderNameLast.name() : __cardholderNameLast,
        __cardholderNameFirst.name() : __cardholderNameFirst,
        __cardholderNameMiddle.name() : __cardholderNameMiddle,
        __identifier.name() : __identifier,
        __countryCode.name() : __countryCode,
        __expirationYearMonthDay.name() : __expirationYearMonthDay,
        __dateOfBirth.name() : __dateOfBirth
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}BaseECheckType with content type ELEMENT_ONLY
class BaseECheckType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseECheckType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseECheckType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 178, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httprailgds_netwscommontypes_BaseECheckType_httprailgds_netwscommontypesnumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 180, 3), )

    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __number.name() : __number
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BaseECheckType', BaseECheckType)


# Complex type {http://railgds.net/ws/commontypes}BaseRequestType with content type ELEMENT_ONLY
class BaseRequestType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseRequestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseRequestType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 183, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}context uses Python identifier context
    __context = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'context'), 'context', '__httprailgds_netwscommontypes_BaseRequestType_httprailgds_netwscommontypescontext', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 185, 3), )

    
    context = property(__context.value, __context.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}overrides uses Python identifier overrides
    __overrides = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'overrides'), 'overrides', '__httprailgds_netwscommontypes_BaseRequestType_httprailgds_netwscommontypesoverrides', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 186, 3), )

    
    overrides = property(__overrides.value, __overrides.set, None, 'Optional request overrides for testing.')

    
    # Attribute conversationToken uses Python identifier conversationToken
    __conversationToken = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'conversationToken'), 'conversationToken', '__httprailgds_netwscommontypes_BaseRequestType_conversationToken', pyxb.binding.datatypes.string)
    __conversationToken._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 203, 2)
    __conversationToken._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 203, 2)
    
    conversationToken = property(__conversationToken.value, __conversationToken.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httprailgds_netwscommontypes_BaseRequestType_version', pyxb.binding.datatypes.string)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 204, 2)
    __version._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 204, 2)
    
    version = property(__version.value, __version.set, None, None)

    
    # Attribute dateTime uses Python identifier dateTime
    __dateTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dateTime'), 'dateTime', '__httprailgds_netwscommontypes_BaseRequestType_dateTime', pyxb.binding.datatypes.string)
    __dateTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 205, 2)
    __dateTime._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 205, 2)
    
    dateTime = property(__dateTime.value, __dateTime.set, None, None)

    _ElementMap.update({
        __context.name() : __context,
        __overrides.name() : __overrides
    })
    _AttributeMap.update({
        __conversationToken.name() : __conversationToken,
        __version.name() : __version,
        __dateTime.name() : __dateTime
    })
Namespace.addCategoryObject('typeBinding', 'BaseRequestType', BaseRequestType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Optional request overrides for testing."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 190, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}override uses Python identifier override
    __override = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'override'), 'override', '__httprailgds_netwscommontypes_CTD_ANON_2_httprailgds_netwscommontypesoverride', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 192, 6), )

    
    override = property(__override.value, __override.set, None, None)

    _ElementMap.update({
        __override.name() : __override
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 193, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httprailgds_netwscommontypes_CTD_ANON_3_name', pyxb.binding.datatypes.anySimpleType, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 194, 8)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 194, 8)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CTD_ANON_3_type', pyxb.binding.datatypes.anySimpleType, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 195, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 195, 8)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httprailgds_netwscommontypes_CTD_ANON_3_value', pyxb.binding.datatypes.anySimpleType, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 196, 8)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 196, 8)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name,
        __type.name() : __type,
        __value.name() : __value
    })



# Complex type {http://railgds.net/ws/commontypes}BaseResponseType with content type ELEMENT_ONLY
class BaseResponseType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseResponseType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseResponseType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 207, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}requestStatus uses Python identifier requestStatus
    __requestStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'requestStatus'), 'requestStatus', '__httprailgds_netwscommontypes_BaseResponseType_httprailgds_netwscommontypesrequestStatus', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 209, 3), )

    
    requestStatus = property(__requestStatus.value, __requestStatus.set, None, None)

    
    # Attribute conversationToken uses Python identifier conversationToken
    __conversationToken = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'conversationToken'), 'conversationToken', '__httprailgds_netwscommontypes_BaseResponseType_conversationToken', pyxb.binding.datatypes.string)
    __conversationToken._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 211, 2)
    __conversationToken._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 211, 2)
    
    conversationToken = property(__conversationToken.value, __conversationToken.set, None, None)

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'version'), 'version', '__httprailgds_netwscommontypes_BaseResponseType_version', pyxb.binding.datatypes.string)
    __version._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 212, 2)
    __version._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 212, 2)
    
    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __requestStatus.name() : __requestStatus
    })
    _AttributeMap.update({
        __conversationToken.name() : __conversationToken,
        __version.name() : __version
    })
Namespace.addCategoryObject('typeBinding', 'BaseResponseType', BaseResponseType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 223, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passenger uses Python identifier passenger
    __passenger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passenger'), 'passenger', '__httprailgds_netwscommontypes_CTD_ANON_4_httprailgds_netwscommontypespassenger', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 225, 6), )

    
    passenger = property(__passenger.value, __passenger.set, None, None)

    _ElementMap.update({
        __passenger.name() : __passenger
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 231, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}order uses Python identifier order
    __order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httprailgds_netwscommontypes_CTD_ANON_5_httprailgds_netwscommontypesorder', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 233, 6), )

    
    order = property(__order.value, __order.set, None, None)

    _ElementMap.update({
        __order.name() : __order
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 240, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}travelSegment uses Python identifier travelSegment
    __travelSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelSegment'), 'travelSegment', '__httprailgds_netwscommontypes_CTD_ANON_6_httprailgds_netwscommontypestravelSegment', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 242, 12), )

    
    travelSegment = property(__travelSegment.value, __travelSegment.set, None, None)

    _ElementMap.update({
        __travelSegment.name() : __travelSegment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 249, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}ticketableFare uses Python identifier ticketableFare
    __ticketableFare = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketableFare'), 'ticketableFare', '__httprailgds_netwscommontypes_CTD_ANON_7_httprailgds_netwscommontypesticketableFare', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 251, 12), )

    
    ticketableFare = property(__ticketableFare.value, __ticketableFare.set, None, None)

    _ElementMap.update({
        __ticketableFare.name() : __ticketableFare
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 258, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}ticketingOption uses Python identifier ticketingOption
    __ticketingOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketingOption'), 'ticketingOption', '__httprailgds_netwscommontypes_CTD_ANON_8_httprailgds_netwscommontypesticketingOption', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 260, 12), )

    
    ticketingOption = property(__ticketingOption.value, __ticketingOption.set, None, None)

    _ElementMap.update({
        __ticketingOption.name() : __ticketingOption
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 267, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}totalPrice uses Python identifier totalPrice
    __totalPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), 'totalPrice', '__httprailgds_netwscommontypes_CTD_ANON_9_httprailgds_netwscommontypestotalPrice', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 269, 12), )

    
    totalPrice = property(__totalPrice.value, __totalPrice.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}basePrice uses Python identifier basePrice
    __basePrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'basePrice'), 'basePrice', '__httprailgds_netwscommontypes_CTD_ANON_9_httprailgds_netwscommontypesbasePrice', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 270, 12), )

    
    basePrice = property(__basePrice.value, __basePrice.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}upgradePrice uses Python identifier upgradePrice
    __upgradePrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'upgradePrice'), 'upgradePrice', '__httprailgds_netwscommontypes_CTD_ANON_9_httprailgds_netwscommontypesupgradePrice', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 272, 12), )

    
    upgradePrice = property(__upgradePrice.value, __upgradePrice.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}accommodationPrice uses Python identifier accommodationPrice
    __accommodationPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accommodationPrice'), 'accommodationPrice', '__httprailgds_netwscommontypes_CTD_ANON_9_httprailgds_netwscommontypesaccommodationPrice', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 274, 12), )

    
    accommodationPrice = property(__accommodationPrice.value, __accommodationPrice.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}taxes uses Python identifier taxes
    __taxes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'taxes'), 'taxes', '__httprailgds_netwscommontypes_CTD_ANON_9_httprailgds_netwscommontypestaxes', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 276, 12), )

    
    taxes = property(__taxes.value, __taxes.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fees uses Python identifier fees
    __fees = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fees'), 'fees', '__httprailgds_netwscommontypes_CTD_ANON_9_httprailgds_netwscommontypesfees', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 278, 12), )

    
    fees = property(__fees.value, __fees.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}commissionAmount uses Python identifier commissionAmount
    __commissionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commissionAmount'), 'commissionAmount', '__httprailgds_netwscommontypes_CTD_ANON_9_httprailgds_netwscommontypescommissionAmount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 280, 12), )

    
    commissionAmount = property(__commissionAmount.value, __commissionAmount.set, None, None)

    _ElementMap.update({
        __totalPrice.name() : __totalPrice,
        __basePrice.name() : __basePrice,
        __upgradePrice.name() : __upgradePrice,
        __accommodationPrice.name() : __accommodationPrice,
        __taxes.name() : __taxes,
        __fees.name() : __fees,
        __commissionAmount.name() : __commissionAmount
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 286, 48)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}supplyChannelPassengerReference uses Python identifier supplyChannelPassengerReference
    __supplyChannelPassengerReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'supplyChannelPassengerReference'), 'supplyChannelPassengerReference', '__httprailgds_netwscommontypes_CTD_ANON_10_httprailgds_netwscommontypessupplyChannelPassengerReference', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 288, 56), )

    
    supplyChannelPassengerReference = property(__supplyChannelPassengerReference.value, __supplyChannelPassengerReference.set, None, None)

    _ElementMap.update({
        __supplyChannelPassengerReference.name() : __supplyChannelPassengerReference
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 295, 48)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}orderNote uses Python identifier orderNote
    __orderNote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderNote'), 'orderNote', '__httprailgds_netwscommontypes_CTD_ANON_11_httprailgds_netwscommontypesorderNote', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 297, 56), )

    
    orderNote = property(__orderNote.value, __orderNote.set, None, None)

    _ElementMap.update({
        __orderNote.name() : __orderNote
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 324, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}paymentDue uses Python identifier paymentDue
    __paymentDue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentDue'), 'paymentDue', '__httprailgds_netwscommontypes_CTD_ANON_12_httprailgds_netwscommontypespaymentDue', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 326, 6), )

    
    paymentDue = property(__paymentDue.value, __paymentDue.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}paymentInformation uses Python identifier paymentInformation
    __paymentInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentInformation'), 'paymentInformation', '__httprailgds_netwscommontypes_CTD_ANON_12_httprailgds_netwscommontypespaymentInformation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 327, 6), )

    
    paymentInformation = property(__paymentInformation.value, __paymentInformation.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}nextDepositDue uses Python identifier nextDepositDue
    __nextDepositDue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nextDepositDue'), 'nextDepositDue', '__httprailgds_netwscommontypes_CTD_ANON_12_httprailgds_netwscommontypesnextDepositDue', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 336, 6), )

    
    nextDepositDue = property(__nextDepositDue.value, __nextDepositDue.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}minimumDepositAmount uses Python identifier minimumDepositAmount
    __minimumDepositAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'minimumDepositAmount'), 'minimumDepositAmount', '__httprailgds_netwscommontypes_CTD_ANON_12_httprailgds_netwscommontypesminimumDepositAmount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 337, 6), )

    
    minimumDepositAmount = property(__minimumDepositAmount.value, __minimumDepositAmount.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}acceptableFormsOfPayment uses Python identifier acceptableFormsOfPayment
    __acceptableFormsOfPayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'acceptableFormsOfPayment'), 'acceptableFormsOfPayment', '__httprailgds_netwscommontypes_CTD_ANON_12_httprailgds_netwscommontypesacceptableFormsOfPayment', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 338, 6), )

    
    acceptableFormsOfPayment = property(__acceptableFormsOfPayment.value, __acceptableFormsOfPayment.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}refundIsProcessedOnCancel uses Python identifier refundIsProcessedOnCancel
    __refundIsProcessedOnCancel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'refundIsProcessedOnCancel'), 'refundIsProcessedOnCancel', '__httprailgds_netwscommontypes_CTD_ANON_12_httprailgds_netwscommontypesrefundIsProcessedOnCancel', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 346, 24), )

    
    refundIsProcessedOnCancel = property(__refundIsProcessedOnCancel.value, __refundIsProcessedOnCancel.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}confirmationUponAddPayment uses Python identifier confirmationUponAddPayment
    __confirmationUponAddPayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'confirmationUponAddPayment'), 'confirmationUponAddPayment', '__httprailgds_netwscommontypes_CTD_ANON_12_httprailgds_netwscommontypesconfirmationUponAddPayment', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 347, 24), )

    
    confirmationUponAddPayment = property(__confirmationUponAddPayment.value, __confirmationUponAddPayment.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}confirmationInformationRequired uses Python identifier confirmationInformationRequired
    __confirmationInformationRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'confirmationInformationRequired'), 'confirmationInformationRequired', '__httprailgds_netwscommontypes_CTD_ANON_12_httprailgds_netwscommontypesconfirmationInformationRequired', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 348, 24), )

    
    confirmationInformationRequired = property(__confirmationInformationRequired.value, __confirmationInformationRequired.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}paymentCardRequiredForConfirmationInformation uses Python identifier paymentCardRequiredForConfirmationInformation
    __paymentCardRequiredForConfirmationInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentCardRequiredForConfirmationInformation'), 'paymentCardRequiredForConfirmationInformation', '__httprailgds_netwscommontypes_CTD_ANON_12_httprailgds_netwscommontypespaymentCardRequiredForConfirmationInformation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 349, 24), )

    
    paymentCardRequiredForConfirmationInformation = property(__paymentCardRequiredForConfirmationInformation.value, __paymentCardRequiredForConfirmationInformation.set, None, None)

    _ElementMap.update({
        __paymentDue.name() : __paymentDue,
        __paymentInformation.name() : __paymentInformation,
        __nextDepositDue.name() : __nextDepositDue,
        __minimumDepositAmount.name() : __minimumDepositAmount,
        __acceptableFormsOfPayment.name() : __acceptableFormsOfPayment,
        __refundIsProcessedOnCancel.name() : __refundIsProcessedOnCancel,
        __confirmationUponAddPayment.name() : __confirmationUponAddPayment,
        __confirmationInformationRequired.name() : __confirmationInformationRequired,
        __paymentCardRequiredForConfirmationInformation.name() : __paymentCardRequiredForConfirmationInformation
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 339, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}formOfPayment uses Python identifier formOfPayment
    __formOfPayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'formOfPayment'), 'formOfPayment', '__httprailgds_netwscommontypes_CTD_ANON_13_httprailgds_netwscommontypesformOfPayment', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 341, 9), )

    
    formOfPayment = property(__formOfPayment.value, __formOfPayment.set, None, None)

    _ElementMap.update({
        __formOfPayment.name() : __formOfPayment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 355, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}prices uses Python identifier prices
    __prices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'prices'), 'prices', '__httprailgds_netwscommontypes_CTD_ANON_14_httprailgds_netwscommontypesprices', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 357, 6), )

    
    prices = property(__prices.value, __prices.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}payments uses Python identifier payments
    __payments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payments'), 'payments', '__httprailgds_netwscommontypes_CTD_ANON_14_httprailgds_netwscommontypespayments', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 386, 24), )

    
    payments = property(__payments.value, __payments.set, None, None)

    _ElementMap.update({
        __prices.name() : __prices,
        __payments.name() : __payments
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 358, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}price uses Python identifier price
    __price = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'price'), 'price', '__httprailgds_netwscommontypes_CTD_ANON_15_httprailgds_netwscommontypesprice', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 360, 9), )

    
    price = property(__price.value, __price.set, None, None)

    _ElementMap.update({
        __price.name() : __price
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 361, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}orderIDRef uses Python identifier orderIDRef
    __orderIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderIDRef'), 'orderIDRef', '__httprailgds_netwscommontypes_CTD_ANON_16_httprailgds_netwscommontypesorderIDRef', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 363, 12), )

    
    orderIDRef = property(__orderIDRef.value, __orderIDRef.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httprailgds_netwscommontypes_CTD_ANON_16_httprailgds_netwscommontypesamount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 365, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}postingDate uses Python identifier postingDate
    __postingDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postingDate'), 'postingDate', '__httprailgds_netwscommontypes_CTD_ANON_16_httprailgds_netwscommontypespostingDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 366, 12), )

    
    postingDate = property(__postingDate.value, __postingDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}commission uses Python identifier commission
    __commission = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commission'), 'commission', '__httprailgds_netwscommontypes_CTD_ANON_16_httprailgds_netwscommontypescommission', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 368, 12), )

    
    commission = property(__commission.value, __commission.set, None, None)

    
    # Attribute priceID uses Python identifier priceID
    __priceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'priceID'), 'priceID', '__httprailgds_netwscommontypes_CTD_ANON_16_priceID', pyxb.binding.datatypes.ID, required=True)
    __priceID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 379, 11)
    __priceID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 379, 11)
    
    priceID = property(__priceID.value, __priceID.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CTD_ANON_16_type', pyxb.binding.datatypes.string)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 380, 11)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 380, 11)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __orderIDRef.name() : __orderIDRef,
        __amount.name() : __amount,
        __postingDate.name() : __postingDate,
        __commission.name() : __commission
    })
    _AttributeMap.update({
        __priceID.name() : __priceID,
        __type.name() : __type
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 369, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httprailgds_netwscommontypes_CTD_ANON_17_httprailgds_netwscommontypesamount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 371, 12), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute commissionable uses Python identifier commissionable
    __commissionable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'commissionable'), 'commissionable', '__httprailgds_netwscommontypes_CTD_ANON_17_commissionable', pyxb.binding.datatypes.boolean)
    __commissionable._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 374, 12)
    __commissionable._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 374, 12)
    
    commissionable = property(__commissionable.value, __commissionable.set, None, None)

    _ElementMap.update({
        __amount.name() : __amount
    })
    _AttributeMap.update({
        __commissionable.name() : __commissionable
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 387, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}payment uses Python identifier payment
    __payment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'payment'), 'payment', '__httprailgds_netwscommontypes_CTD_ANON_18_httprailgds_netwscommontypespayment', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 389, 36), )

    
    payment = property(__payment.value, __payment.set, None, None)

    _ElementMap.update({
        __payment.name() : __payment
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}UpdateableBookingType with content type ELEMENT_ONLY
class UpdateableBookingType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}UpdateableBookingType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UpdateableBookingType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 425, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passengerIdentity uses Python identifier passengerIdentity
    __passengerIdentity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerIdentity'), 'passengerIdentity', '__httprailgds_netwscommontypes_UpdateableBookingType_httprailgds_netwscommontypespassengerIdentity', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 427, 12), )

    
    passengerIdentity = property(__passengerIdentity.value, __passengerIdentity.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}passengerAddress uses Python identifier passengerAddress
    __passengerAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerAddress'), 'passengerAddress', '__httprailgds_netwscommontypes_UpdateableBookingType_httprailgds_netwscommontypespassengerAddress', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 428, 12), )

    
    passengerAddress = property(__passengerAddress.value, __passengerAddress.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}passengerContactInfo uses Python identifier passengerContactInfo
    __passengerContactInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerContactInfo'), 'passengerContactInfo', '__httprailgds_netwscommontypes_UpdateableBookingType_httprailgds_netwscommontypespassengerContactInfo', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 429, 12), )

    
    passengerContactInfo = property(__passengerContactInfo.value, __passengerContactInfo.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}loyaltyCard uses Python identifier loyaltyCard
    __loyaltyCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard'), 'loyaltyCard', '__httprailgds_netwscommontypes_UpdateableBookingType_httprailgds_netwscommontypesloyaltyCard', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 430, 12), )

    
    loyaltyCard = property(__loyaltyCard.value, __loyaltyCard.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}travelDocument uses Python identifier travelDocument
    __travelDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelDocument'), 'travelDocument', '__httprailgds_netwscommontypes_UpdateableBookingType_httprailgds_netwscommontypestravelDocument', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 431, 12), )

    
    travelDocument = property(__travelDocument.value, __travelDocument.set, None, None)

    _ElementMap.update({
        __passengerIdentity.name() : __passengerIdentity,
        __passengerAddress.name() : __passengerAddress,
        __passengerContactInfo.name() : __passengerContactInfo,
        __loyaltyCard.name() : __loyaltyCard,
        __travelDocument.name() : __travelDocument
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UpdateableBookingType', UpdateableBookingType)


# Complex type {http://railgds.net/ws/commontypes}UpdateableOrderType with content type ELEMENT_ONLY
class UpdateableOrderType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}UpdateableOrderType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UpdateableOrderType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 434, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}ticketOption uses Python identifier ticketOption
    __ticketOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketOption'), 'ticketOption', '__httprailgds_netwscommontypes_UpdateableOrderType_httprailgds_netwscommontypesticketOption', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 436, 12), )

    
    ticketOption = property(__ticketOption.value, __ticketOption.set, None, None)

    _ElementMap.update({
        __ticketOption.name() : __ticketOption
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UpdateableOrderType', UpdateableOrderType)


# Complex type {http://railgds.net/ws/commontypes}BookingNoteType with content type ELEMENT_ONLY
class BookingNoteType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BookingNoteType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BookingNoteType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 439, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httprailgds_netwscommontypes_BookingNoteType_httprailgds_netwscommontypesmessage', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 441, 12), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}createdDateTime uses Python identifier createdDateTime
    __createdDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createdDateTime'), 'createdDateTime', '__httprailgds_netwscommontypes_BookingNoteType_httprailgds_netwscommontypescreatedDateTime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 442, 12), )

    
    createdDateTime = property(__createdDateTime.value, __createdDateTime.set, None, None)

    
    # Attribute agentId uses Python identifier agentId
    __agentId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'agentId'), 'agentId', '__httprailgds_netwscommontypes_BookingNoteType_agentId', pyxb.binding.datatypes.string)
    __agentId._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 444, 8)
    __agentId._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 444, 8)
    
    agentId = property(__agentId.value, __agentId.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_BookingNoteType_type', pyxb.binding.datatypes.string)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 445, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 445, 8)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __message.name() : __message,
        __createdDateTime.name() : __createdDateTime
    })
    _AttributeMap.update({
        __agentId.name() : __agentId,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'BookingNoteType', BookingNoteType)


# Complex type {http://railgds.net/ws/commontypes}OrderNoteType with content type ELEMENT_ONLY
class OrderNoteType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}OrderNoteType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OrderNoteType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 447, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httprailgds_netwscommontypes_OrderNoteType_httprailgds_netwscommontypesmessage', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 449, 12), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}createdDateTime uses Python identifier createdDateTime
    __createdDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createdDateTime'), 'createdDateTime', '__httprailgds_netwscommontypes_OrderNoteType_httprailgds_netwscommontypescreatedDateTime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 450, 12), )

    
    createdDateTime = property(__createdDateTime.value, __createdDateTime.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_OrderNoteType_type', pyxb.binding.datatypes.string)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 452, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 452, 8)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __message.name() : __message,
        __createdDateTime.name() : __createdDateTime
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'OrderNoteType', OrderNoteType)


# Complex type {http://railgds.net/ws/commontypes}BaseCancellationOptionType with content type ELEMENT_ONLY
class BaseCancellationOptionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseCancellationOptionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseCancellationOptionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 483, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}refundTarget uses Python identifier refundTarget
    __refundTarget = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'refundTarget'), 'refundTarget', '__httprailgds_netwscommontypes_BaseCancellationOptionType_httprailgds_netwscommontypesrefundTarget', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 485, 12), )

    
    refundTarget = property(__refundTarget.value, __refundTarget.set, None, None)

    _ElementMap.update({
        __refundTarget.name() : __refundTarget
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BaseCancellationOptionType', BaseCancellationOptionType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 511, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}total uses Python identifier total
    __total = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'total'), 'total', '__httprailgds_netwscommontypes_CTD_ANON_19_httprailgds_netwscommontypestotal', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 513, 12), )

    
    total = property(__total.value, __total.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}breakdown uses Python identifier breakdown
    __breakdown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'breakdown'), 'breakdown', '__httprailgds_netwscommontypes_CTD_ANON_19_httprailgds_netwscommontypesbreakdown', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 514, 12), )

    
    breakdown = property(__breakdown.value, __breakdown.set, None, None)

    _ElementMap.update({
        __total.name() : __total,
        __breakdown.name() : __breakdown
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 515, 13)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}component uses Python identifier component
    __component = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'component'), 'component', '__httprailgds_netwscommontypes_CTD_ANON_20_httprailgds_netwscommontypescomponent', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 517, 15), )

    
    component = property(__component.value, __component.set, None, None)

    _ElementMap.update({
        __component.name() : __component
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}CancellationSummaryType with content type ELEMENT_ONLY
class CancellationSummaryType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}CancellationSummaryType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CancellationSummaryType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 546, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}cancellationOptions uses Python identifier cancellationOptions
    __cancellationOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cancellationOptions'), 'cancellationOptions', '__httprailgds_netwscommontypes_CancellationSummaryType_httprailgds_netwscommontypescancellationOptions', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 548, 12), )

    
    cancellationOptions = property(__cancellationOptions.value, __cancellationOptions.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}priceReversals uses Python identifier priceReversals
    __priceReversals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'priceReversals'), 'priceReversals', '__httprailgds_netwscommontypes_CancellationSummaryType_httprailgds_netwscommontypespriceReversals', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 556, 3), )

    
    priceReversals = property(__priceReversals.value, __priceReversals.set, None, None)

    
    # Attribute isCancellable uses Python identifier isCancellable
    __isCancellable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isCancellable'), 'isCancellable', '__httprailgds_netwscommontypes_CancellationSummaryType_isCancellable', pyxb.binding.datatypes.boolean, required=True)
    __isCancellable._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 578, 8)
    __isCancellable._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 578, 8)
    
    isCancellable = property(__isCancellable.value, __isCancellable.set, None, None)

    
    # Attribute isPartiallyCancellable uses Python identifier isPartiallyCancellable
    __isPartiallyCancellable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isPartiallyCancellable'), 'isPartiallyCancellable', '__httprailgds_netwscommontypes_CancellationSummaryType_isPartiallyCancellable', pyxb.binding.datatypes.boolean)
    __isPartiallyCancellable._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 579, 8)
    __isPartiallyCancellable._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 579, 8)
    
    isPartiallyCancellable = property(__isPartiallyCancellable.value, __isPartiallyCancellable.set, None, None)

    _ElementMap.update({
        __cancellationOptions.name() : __cancellationOptions,
        __priceReversals.name() : __priceReversals
    })
    _AttributeMap.update({
        __isCancellable.name() : __isCancellable,
        __isPartiallyCancellable.name() : __isPartiallyCancellable
    })
Namespace.addCategoryObject('typeBinding', 'CancellationSummaryType', CancellationSummaryType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 549, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}cancellationOption uses Python identifier cancellationOption
    __cancellationOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cancellationOption'), 'cancellationOption', '__httprailgds_netwscommontypes_CTD_ANON_21_httprailgds_netwscommontypescancellationOption', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 551, 24), )

    
    cancellationOption = property(__cancellationOption.value, __cancellationOption.set, None, None)

    _ElementMap.update({
        __cancellationOption.name() : __cancellationOption
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 557, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}total uses Python identifier total
    __total = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'total'), 'total', '__httprailgds_netwscommontypes_CTD_ANON_22_httprailgds_netwscommontypestotal', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 559, 24), )

    
    total = property(__total.value, __total.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}breakdown uses Python identifier breakdown
    __breakdown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'breakdown'), 'breakdown', '__httprailgds_netwscommontypes_CTD_ANON_22_httprailgds_netwscommontypesbreakdown', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 560, 24), )

    
    breakdown = property(__breakdown.value, __breakdown.set, None, None)

    _ElementMap.update({
        __total.name() : __total,
        __breakdown.name() : __breakdown
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 561, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}component uses Python identifier component
    __component = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'component'), 'component', '__httprailgds_netwscommontypes_CTD_ANON_23_httprailgds_netwscommontypescomponent', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 563, 36), )

    
    component = property(__component.value, __component.set, None, None)

    _ElementMap.update({
        __component.name() : __component
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 564, 40)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httprailgds_netwscommontypes_CTD_ANON_24_httprailgds_netwscommontypesamount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 566, 48), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CTD_ANON_24_type', pyxb.binding.datatypes.string)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 568, 44)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 568, 44)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __amount.name() : __amount
    })
    _AttributeMap.update({
        __type.name() : __type
    })



# Complex type {http://railgds.net/ws/commontypes}CarrierType with content type SIMPLE
class CarrierType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}CarrierType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CarrierType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 581, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CarrierType', CarrierType)


# Complex type {http://railgds.net/ws/commontypes}SupplierEquipmentTypeType with content type SIMPLE
class SupplierEquipmentTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}SupplierEquipmentTypeType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SupplierEquipmentTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 593, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SupplierEquipmentTypeType', SupplierEquipmentTypeType)


# Complex type {http://railgds.net/ws/commontypes}CheckType with content type ELEMENT_ONLY
class CheckType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}CheckType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CheckType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 605, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httprailgds_netwscommontypes_CheckType_httprailgds_netwscommontypesnumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 607, 3), )

    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __number.name() : __number
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CheckType', CheckType)


# Complex type {http://railgds.net/ws/commontypes}ContextType with content type ELEMENT_ONLY
class ContextType (pyxb.binding.basis.complexTypeDefinition):
    """Context defines the parameters of the API request."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContextType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 617, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}distributorCode uses Python identifier distributorCode
    __distributorCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'distributorCode'), 'distributorCode', '__httprailgds_netwscommontypes_ContextType_httprailgds_netwscommontypesdistributorCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 622, 3), )

    
    distributorCode = property(__distributorCode.value, __distributorCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}pointOfSaleCode uses Python identifier pointOfSaleCode
    __pointOfSaleCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pointOfSaleCode'), 'pointOfSaleCode', '__httprailgds_netwscommontypes_ContextType_httprailgds_netwscommontypespointOfSaleCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 623, 3), )

    
    pointOfSaleCode = property(__pointOfSaleCode.value, __pointOfSaleCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}channel uses Python identifier channel
    __channel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'channel'), 'channel', '__httprailgds_netwscommontypes_ContextType_httprailgds_netwscommontypeschannel', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 628, 4), )

    
    channel = property(__channel.value, __channel.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}channelCode uses Python identifier channelCode
    __channelCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'channelCode'), 'channelCode', '__httprailgds_netwscommontypes_ContextType_httprailgds_netwscommontypeschannelCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 629, 4), )

    
    channelCode = property(__channelCode.value, __channelCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}agencyCode uses Python identifier agencyCode
    __agencyCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'agencyCode'), 'agencyCode', '__httprailgds_netwscommontypes_ContextType_httprailgds_netwscommontypesagencyCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 631, 3), )

    
    agencyCode = property(__agencyCode.value, __agencyCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}companyCode uses Python identifier companyCode
    __companyCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'companyCode'), 'companyCode', '__httprailgds_netwscommontypes_ContextType_httprailgds_netwscommontypescompanyCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 632, 3), )

    
    companyCode = property(__companyCode.value, __companyCode.set, None, None)

    _ElementMap.update({
        __distributorCode.name() : __distributorCode,
        __pointOfSaleCode.name() : __pointOfSaleCode,
        __channel.name() : __channel,
        __channelCode.name() : __channelCode,
        __agencyCode.name() : __agencyCode,
        __companyCode.name() : __companyCode
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ContextType', ContextType)


# Complex type {http://railgds.net/ws/commontypes}CouponType with content type ELEMENT_ONLY
class CouponType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}CouponType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CouponType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 635, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}couponNumber uses Python identifier couponNumber
    __couponNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'couponNumber'), 'couponNumber', '__httprailgds_netwscommontypes_CouponType_httprailgds_netwscommontypescouponNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 637, 3), )

    
    couponNumber = property(__couponNumber.value, __couponNumber.set, None, None)

    _ElementMap.update({
        __couponNumber.name() : __couponNumber
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CouponType', CouponType)


# Complex type {http://railgds.net/ws/commontypes}CustomInformationType with content type ELEMENT_ONLY
class CustomInformationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}CustomInformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CustomInformationType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 650, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}customInformationPair uses Python identifier customInformationPair
    __customInformationPair = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customInformationPair'), 'customInformationPair', '__httprailgds_netwscommontypes_CustomInformationType_httprailgds_netwscommontypescustomInformationPair', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 652, 3), )

    
    customInformationPair = property(__customInformationPair.value, __customInformationPair.set, None, None)

    _ElementMap.update({
        __customInformationPair.name() : __customInformationPair
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CustomInformationType', CustomInformationType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 653, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}key uses Python identifier key
    __key = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'key'), 'key', '__httprailgds_netwscommontypes_CTD_ANON_25_httprailgds_netwscommontypeskey', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 655, 6), )

    
    key = property(__key.value, __key.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httprailgds_netwscommontypes_CTD_ANON_25_httprailgds_netwscommontypesvalue', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 656, 6), )

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}createdDateTime uses Python identifier createdDateTime
    __createdDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createdDateTime'), 'createdDateTime', '__httprailgds_netwscommontypes_CTD_ANON_25_httprailgds_netwscommontypescreatedDateTime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 659, 6), )

    
    createdDateTime = property(__createdDateTime.value, __createdDateTime.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}updatedDateTime uses Python identifier updatedDateTime
    __updatedDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updatedDateTime'), 'updatedDateTime', '__httprailgds_netwscommontypes_CTD_ANON_25_httprailgds_netwscommontypesupdatedDateTime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 660, 6), )

    
    updatedDateTime = property(__updatedDateTime.value, __updatedDateTime.set, None, None)

    _ElementMap.update({
        __key.name() : __key,
        __value.name() : __value,
        __createdDateTime.name() : __createdDateTime,
        __updatedDateTime.name() : __updatedDateTime
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}CustomerContactType with content type ELEMENT_ONLY
class CustomerContactType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}CustomerContactType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CustomerContactType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 666, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}contactType uses Python identifier contactType
    __contactType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'contactType'), 'contactType', '__httprailgds_netwscommontypes_CustomerContactType_httprailgds_netwscommontypescontactType', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 668, 3), )

    
    contactType = property(__contactType.value, __contactType.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}contactMedium uses Python identifier contactMedium
    __contactMedium = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'contactMedium'), 'contactMedium', '__httprailgds_netwscommontypes_CustomerContactType_httprailgds_netwscommontypescontactMedium', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 682, 3), )

    
    contactMedium = property(__contactMedium.value, __contactMedium.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}contactInfo uses Python identifier contactInfo
    __contactInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'contactInfo'), 'contactInfo', '__httprailgds_netwscommontypes_CustomerContactType_httprailgds_netwscommontypescontactInfo', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 692, 3), )

    
    contactInfo = property(__contactInfo.value, __contactInfo.set, None, None)

    _ElementMap.update({
        __contactType.name() : __contactType,
        __contactMedium.name() : __contactMedium,
        __contactInfo.name() : __contactInfo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CustomerContactType', CustomerContactType)


# Complex type {http://railgds.net/ws/commontypes}CustomerType with content type ELEMENT_ONLY
class CustomerType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}CustomerType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CustomerType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 695, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'title'), 'title', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypestitle', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 697, 3), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}nameFirst uses Python identifier nameFirst
    __nameFirst = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nameFirst'), 'nameFirst', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypesnameFirst', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 698, 3), )

    
    nameFirst = property(__nameFirst.value, __nameFirst.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}nameMiddle uses Python identifier nameMiddle
    __nameMiddle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nameMiddle'), 'nameMiddle', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypesnameMiddle', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 699, 3), )

    
    nameMiddle = property(__nameMiddle.value, __nameMiddle.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}nameLast uses Python identifier nameLast
    __nameLast = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nameLast'), 'nameLast', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypesnameLast', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 700, 3), )

    
    nameLast = property(__nameLast.value, __nameLast.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}suffix uses Python identifier suffix
    __suffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'suffix'), 'suffix', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypessuffix', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 701, 3), )

    
    suffix = property(__suffix.value, __suffix.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}dob uses Python identifier dob
    __dob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dob'), 'dob', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypesdob', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 702, 3), )

    
    dob = property(__dob.value, __dob.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}gender uses Python identifier gender
    __gender = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'gender'), 'gender', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypesgender', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 703, 3), )

    
    gender = property(__gender.value, __gender.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}residenceInformation uses Python identifier residenceInformation
    __residenceInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'residenceInformation'), 'residenceInformation', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypesresidenceInformation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 704, 3), )

    
    residenceInformation = property(__residenceInformation.value, __residenceInformation.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}address uses Python identifier address
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'address'), 'address', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypesaddress', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 705, 3), )

    
    address = property(__address.value, __address.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}contactInformation uses Python identifier contactInformation
    __contactInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'contactInformation'), 'contactInformation', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypescontactInformation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 706, 3), )

    
    contactInformation = property(__contactInformation.value, __contactInformation.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ageAtTimeOfTravel uses Python identifier ageAtTimeOfTravel
    __ageAtTimeOfTravel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ageAtTimeOfTravel'), 'ageAtTimeOfTravel', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypesageAtTimeOfTravel', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 714, 3), )

    
    ageAtTimeOfTravel = property(__ageAtTimeOfTravel.value, __ageAtTimeOfTravel.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}loyaltyCards uses Python identifier loyaltyCards
    __loyaltyCards = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCards'), 'loyaltyCards', '__httprailgds_netwscommontypes_CustomerType_httprailgds_netwscommontypesloyaltyCards', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 715, 12), )

    
    loyaltyCards = property(__loyaltyCards.value, __loyaltyCards.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __nameFirst.name() : __nameFirst,
        __nameMiddle.name() : __nameMiddle,
        __nameLast.name() : __nameLast,
        __suffix.name() : __suffix,
        __dob.name() : __dob,
        __gender.name() : __gender,
        __residenceInformation.name() : __residenceInformation,
        __address.name() : __address,
        __contactInformation.name() : __contactInformation,
        __ageAtTimeOfTravel.name() : __ageAtTimeOfTravel,
        __loyaltyCards.name() : __loyaltyCards
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CustomerType', CustomerType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 707, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}contact uses Python identifier contact
    __contact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'contact'), 'contact', '__httprailgds_netwscommontypes_CTD_ANON_26_httprailgds_netwscommontypescontact', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 709, 6), )

    
    contact = property(__contact.value, __contact.set, None, None)

    _ElementMap.update({
        __contact.name() : __contact
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 716, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}loyaltyCard uses Python identifier loyaltyCard
    __loyaltyCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard'), 'loyaltyCard', '__httprailgds_netwscommontypes_CTD_ANON_27_httprailgds_netwscommontypesloyaltyCard', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 718, 24), )

    
    loyaltyCard = property(__loyaltyCard.value, __loyaltyCard.set, None, None)

    _ElementMap.update({
        __loyaltyCard.name() : __loyaltyCard
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}DateTimeWindowType with content type ELEMENT_ONLY
class DateTimeWindowType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}DateTimeWindowType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DateTimeWindowType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 724, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}date uses Python identifier date
    __date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'date'), 'date', '__httprailgds_netwscommontypes_DateTimeWindowType_httprailgds_netwscommontypesdate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 726, 3), )

    
    date = property(__date.value, __date.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}time uses Python identifier time
    __time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'time'), 'time', '__httprailgds_netwscommontypes_DateTimeWindowType_httprailgds_netwscommontypestime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 727, 3), )

    
    time = property(__time.value, __time.set, None, None)

    _ElementMap.update({
        __date.name() : __date,
        __time.name() : __time
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DateTimeWindowType', DateTimeWindowType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.time
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 728, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.time
    
    # Attribute hoursBeforeOffset uses Python identifier hoursBeforeOffset
    __hoursBeforeOffset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'hoursBeforeOffset'), 'hoursBeforeOffset', '__httprailgds_netwscommontypes_CTD_ANON_28_hoursBeforeOffset', pyxb.binding.datatypes.int)
    __hoursBeforeOffset._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 731, 7)
    __hoursBeforeOffset._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 731, 7)
    
    hoursBeforeOffset = property(__hoursBeforeOffset.value, __hoursBeforeOffset.set, None, None)

    
    # Attribute hoursAfterOffset uses Python identifier hoursAfterOffset
    __hoursAfterOffset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'hoursAfterOffset'), 'hoursAfterOffset', '__httprailgds_netwscommontypes_CTD_ANON_28_hoursAfterOffset', pyxb.binding.datatypes.int)
    __hoursAfterOffset._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 732, 7)
    __hoursAfterOffset._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 732, 7)
    
    hoursAfterOffset = property(__hoursAfterOffset.value, __hoursAfterOffset.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __hoursBeforeOffset.name() : __hoursBeforeOffset,
        __hoursAfterOffset.name() : __hoursAfterOffset
    })



# Complex type {http://railgds.net/ws/commontypes}ExternalIdentificationType with content type ELEMENT_ONLY
class ExternalIdentificationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ExternalIdentificationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExternalIdentificationType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 842, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}referenceNumber uses Python identifier referenceNumber
    __referenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'referenceNumber'), 'referenceNumber', '__httprailgds_netwscommontypes_ExternalIdentificationType_httprailgds_netwscommontypesreferenceNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 844, 3), )

    
    referenceNumber = property(__referenceNumber.value, __referenceNumber.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}purchaseOrderNumber uses Python identifier purchaseOrderNumber
    __purchaseOrderNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'purchaseOrderNumber'), 'purchaseOrderNumber', '__httprailgds_netwscommontypes_ExternalIdentificationType_httprailgds_netwscommontypespurchaseOrderNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 845, 3), )

    
    purchaseOrderNumber = property(__purchaseOrderNumber.value, __purchaseOrderNumber.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}customerNumber uses Python identifier customerNumber
    __customerNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerNumber'), 'customerNumber', '__httprailgds_netwscommontypes_ExternalIdentificationType_httprailgds_netwscommontypescustomerNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 846, 3), )

    
    customerNumber = property(__customerNumber.value, __customerNumber.set, None, None)

    _ElementMap.update({
        __referenceNumber.name() : __referenceNumber,
        __purchaseOrderNumber.name() : __purchaseOrderNumber,
        __customerNumber.name() : __customerNumber
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ExternalIdentificationType', ExternalIdentificationType)


# Complex type {http://railgds.net/ws/commontypes}FareCodeType with content type ELEMENT_ONLY
class FareCodeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}FareCodeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FareCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 855, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}serviceClass uses Python identifier serviceClass
    __serviceClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceClass'), 'serviceClass', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesserviceClass', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 857, 3), )

    
    serviceClass = property(__serviceClass.value, __serviceClass.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}travelSegmentIDRef uses Python identifier travelSegmentIDRef
    __travelSegmentIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelSegmentIDRef'), 'travelSegmentIDRef', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypestravelSegmentIDRef', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 858, 3), )

    
    travelSegmentIDRef = property(__travelSegmentIDRef.value, __travelSegmentIDRef.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cabinClass uses Python identifier cabinClass
    __cabinClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cabinClass'), 'cabinClass', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypescabinClass', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 859, 3), )

    
    cabinClass = property(__cabinClass.value, __cabinClass.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}rewardsEligible uses Python identifier rewardsEligible
    __rewardsEligible = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rewardsEligible'), 'rewardsEligible', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesrewardsEligible', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 860, 3), )

    
    rewardsEligible = property(__rewardsEligible.value, __rewardsEligible.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareClass uses Python identifier fareClass
    __fareClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareClass'), 'fareClass', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesfareClass', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 861, 3), )

    
    fareClass = property(__fareClass.value, __fareClass.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareDisplayName uses Python identifier fareDisplayName
    __fareDisplayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareDisplayName'), 'fareDisplayName', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesfareDisplayName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 862, 3), )

    
    fareDisplayName = property(__fareDisplayName.value, __fareDisplayName.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}openReturn uses Python identifier openReturn
    __openReturn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'openReturn'), 'openReturn', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesopenReturn', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 863, 3), )

    
    openReturn = property(__openReturn.value, __openReturn.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}reservable uses Python identifier reservable
    __reservable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'reservable'), 'reservable', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesreservable', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 864, 3), )

    
    reservable = property(__reservable.value, __reservable.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}reservationRequested uses Python identifier reservationRequested
    __reservationRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'reservationRequested'), 'reservationRequested', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesreservationRequested', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 865, 3), )

    
    reservationRequested = property(__reservationRequested.value, __reservationRequested.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareExpirationDateTime uses Python identifier fareExpirationDateTime
    __fareExpirationDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareExpirationDateTime'), 'fareExpirationDateTime', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesfareExpirationDateTime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 866, 12), )

    
    fareExpirationDateTime = property(__fareExpirationDateTime.value, __fareExpirationDateTime.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}seatAssignment uses Python identifier seatAssignment
    __seatAssignment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'seatAssignment'), 'seatAssignment', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesseatAssignment', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 867, 12), )

    
    seatAssignment = property(__seatAssignment.value, __seatAssignment.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}seats uses Python identifier seats
    __seats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'seats'), 'seats', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesseats', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 868, 12), )

    
    seats = property(__seats.value, __seats.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}seatPreferences uses Python identifier seatPreferences
    __seatPreferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'seatPreferences'), 'seatPreferences', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesseatPreferences', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 869, 3), )

    
    seatPreferences = property(__seatPreferences.value, __seatPreferences.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}amenities uses Python identifier amenities
    __amenities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amenities'), 'amenities', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesamenities', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 876, 12), )

    
    amenities = property(__amenities.value, __amenities.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}services uses Python identifier services
    __services = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'services'), 'services', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesservices', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 883, 12), )

    
    services = property(__services.value, __services.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareApplicabilities uses Python identifier fareApplicabilities
    __fareApplicabilities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilities'), 'fareApplicabilities', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesfareApplicabilities', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 898, 12), )

    
    fareApplicabilities = property(__fareApplicabilities.value, __fareApplicabilities.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}optionalPricesRequested uses Python identifier optionalPricesRequested
    __optionalPricesRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'optionalPricesRequested'), 'optionalPricesRequested', '__httprailgds_netwscommontypes_FareCodeType_httprailgds_netwscommontypesoptionalPricesRequested', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 914, 3), )

    
    optionalPricesRequested = property(__optionalPricesRequested.value, __optionalPricesRequested.set, None, None)

    
    # Attribute code uses Python identifier code
    __code = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httprailgds_netwscommontypes_FareCodeType_code', pyxb.binding.datatypes.anySimpleType, required=True)
    __code._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 922, 2)
    __code._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 922, 2)
    
    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        __serviceClass.name() : __serviceClass,
        __travelSegmentIDRef.name() : __travelSegmentIDRef,
        __cabinClass.name() : __cabinClass,
        __rewardsEligible.name() : __rewardsEligible,
        __fareClass.name() : __fareClass,
        __fareDisplayName.name() : __fareDisplayName,
        __openReturn.name() : __openReturn,
        __reservable.name() : __reservable,
        __reservationRequested.name() : __reservationRequested,
        __fareExpirationDateTime.name() : __fareExpirationDateTime,
        __seatAssignment.name() : __seatAssignment,
        __seats.name() : __seats,
        __seatPreferences.name() : __seatPreferences,
        __amenities.name() : __amenities,
        __services.name() : __services,
        __fareApplicabilities.name() : __fareApplicabilities,
        __optionalPricesRequested.name() : __optionalPricesRequested
    })
    _AttributeMap.update({
        __code.name() : __code
    })
Namespace.addCategoryObject('typeBinding', 'FareCodeType', FareCodeType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 870, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}seatPreference uses Python identifier seatPreference
    __seatPreference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'seatPreference'), 'seatPreference', '__httprailgds_netwscommontypes_CTD_ANON_29_httprailgds_netwscommontypesseatPreference', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 872, 6), )

    
    seatPreference = property(__seatPreference.value, __seatPreference.set, None, None)

    _ElementMap.update({
        __seatPreference.name() : __seatPreference
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 877, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}amenity uses Python identifier amenity
    __amenity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amenity'), 'amenity', '__httprailgds_netwscommontypes_CTD_ANON_30_httprailgds_netwscommontypesamenity', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 879, 24), )

    
    amenity = property(__amenity.value, __amenity.set, None, None)

    _ElementMap.update({
        __amenity.name() : __amenity
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 884, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}service uses Python identifier service
    __service = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'service'), 'service', '__httprailgds_netwscommontypes_CTD_ANON_31_httprailgds_netwscommontypesservice', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 886, 24), )

    
    service = property(__service.value, __service.set, None, None)

    _ElementMap.update({
        __service.name() : __service
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 887, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute category uses Python identifier category
    __category = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'category'), 'category', '__httprailgds_netwscommontypes_CTD_ANON_32_category', pyxb.binding.datatypes.string, required=True)
    __category._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 890, 40)
    __category._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 890, 40)
    
    category = property(__category.value, __category.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __category.name() : __category
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 899, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareApplicability uses Python identifier fareApplicability
    __fareApplicability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareApplicability'), 'fareApplicability', '__httprailgds_netwscommontypes_CTD_ANON_33_httprailgds_netwscommontypesfareApplicability', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 901, 24), )

    
    fareApplicability = property(__fareApplicability.value, __fareApplicability.set, None, None)

    _ElementMap.update({
        __fareApplicability.name() : __fareApplicability
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 915, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}optionalPriceIDRef uses Python identifier optionalPriceIDRef
    __optionalPriceIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'optionalPriceIDRef'), 'optionalPriceIDRef', '__httprailgds_netwscommontypes_CTD_ANON_34_httprailgds_netwscommontypesoptionalPriceIDRef', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 917, 6), )

    
    optionalPriceIDRef = property(__optionalPriceIDRef.value, __optionalPriceIDRef.set, None, None)

    _ElementMap.update({
        __optionalPriceIDRef.name() : __optionalPriceIDRef
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}PassFareCodeType with content type ELEMENT_ONLY
class PassFareCodeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PassFareCodeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PassFareCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 924, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}serviceClass uses Python identifier serviceClass
    __serviceClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceClass'), 'serviceClass', '__httprailgds_netwscommontypes_PassFareCodeType_httprailgds_netwscommontypesserviceClass', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 926, 3), )

    
    serviceClass = property(__serviceClass.value, __serviceClass.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cabinClass uses Python identifier cabinClass
    __cabinClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cabinClass'), 'cabinClass', '__httprailgds_netwscommontypes_PassFareCodeType_httprailgds_netwscommontypescabinClass', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 927, 3), )

    
    cabinClass = property(__cabinClass.value, __cabinClass.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}rewardsEligible uses Python identifier rewardsEligible
    __rewardsEligible = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rewardsEligible'), 'rewardsEligible', '__httprailgds_netwscommontypes_PassFareCodeType_httprailgds_netwscommontypesrewardsEligible', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 928, 3), )

    
    rewardsEligible = property(__rewardsEligible.value, __rewardsEligible.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareClass uses Python identifier fareClass
    __fareClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareClass'), 'fareClass', '__httprailgds_netwscommontypes_PassFareCodeType_httprailgds_netwscommontypesfareClass', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 929, 3), )

    
    fareClass = property(__fareClass.value, __fareClass.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareDisplayName uses Python identifier fareDisplayName
    __fareDisplayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareDisplayName'), 'fareDisplayName', '__httprailgds_netwscommontypes_PassFareCodeType_httprailgds_netwscommontypesfareDisplayName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 930, 3), )

    
    fareDisplayName = property(__fareDisplayName.value, __fareDisplayName.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}services uses Python identifier services
    __services = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'services'), 'services', '__httprailgds_netwscommontypes_PassFareCodeType_httprailgds_netwscommontypesservices', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 931, 12), )

    
    services = property(__services.value, __services.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareApplicabilities uses Python identifier fareApplicabilities
    __fareApplicabilities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilities'), 'fareApplicabilities', '__httprailgds_netwscommontypes_PassFareCodeType_httprailgds_netwscommontypesfareApplicabilities', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 946, 12), )

    
    fareApplicabilities = property(__fareApplicabilities.value, __fareApplicabilities.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}optionalPricesRequested uses Python identifier optionalPricesRequested
    __optionalPricesRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'optionalPricesRequested'), 'optionalPricesRequested', '__httprailgds_netwscommontypes_PassFareCodeType_httprailgds_netwscommontypesoptionalPricesRequested', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 962, 3), )

    
    optionalPricesRequested = property(__optionalPricesRequested.value, __optionalPricesRequested.set, None, None)

    
    # Attribute code uses Python identifier code
    __code = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httprailgds_netwscommontypes_PassFareCodeType_code', pyxb.binding.datatypes.anySimpleType, required=True)
    __code._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 970, 2)
    __code._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 970, 2)
    
    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        __serviceClass.name() : __serviceClass,
        __cabinClass.name() : __cabinClass,
        __rewardsEligible.name() : __rewardsEligible,
        __fareClass.name() : __fareClass,
        __fareDisplayName.name() : __fareDisplayName,
        __services.name() : __services,
        __fareApplicabilities.name() : __fareApplicabilities,
        __optionalPricesRequested.name() : __optionalPricesRequested
    })
    _AttributeMap.update({
        __code.name() : __code
    })
Namespace.addCategoryObject('typeBinding', 'PassFareCodeType', PassFareCodeType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 932, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}service uses Python identifier service
    __service = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'service'), 'service', '__httprailgds_netwscommontypes_CTD_ANON_35_httprailgds_netwscommontypesservice', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 934, 24), )

    
    service = property(__service.value, __service.set, None, None)

    _ElementMap.update({
        __service.name() : __service
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 935, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute category uses Python identifier category
    __category = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'category'), 'category', '__httprailgds_netwscommontypes_CTD_ANON_36_category', pyxb.binding.datatypes.string, required=True)
    __category._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 938, 40)
    __category._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 938, 40)
    
    category = property(__category.value, __category.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __category.name() : __category
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 947, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareApplicability uses Python identifier fareApplicability
    __fareApplicability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareApplicability'), 'fareApplicability', '__httprailgds_netwscommontypes_CTD_ANON_37_httprailgds_netwscommontypesfareApplicability', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 949, 24), )

    
    fareApplicability = property(__fareApplicability.value, __fareApplicability.set, None, None)

    _ElementMap.update({
        __fareApplicability.name() : __fareApplicability
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 963, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}optionalPriceIDRef uses Python identifier optionalPriceIDRef
    __optionalPriceIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'optionalPriceIDRef'), 'optionalPriceIDRef', '__httprailgds_netwscommontypes_CTD_ANON_38_httprailgds_netwscommontypesoptionalPriceIDRef', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 965, 6), )

    
    optionalPriceIDRef = property(__optionalPriceIDRef.value, __optionalPriceIDRef.set, None, None)

    _ElementMap.update({
        __optionalPriceIDRef.name() : __optionalPriceIDRef
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 990, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passengerIDRef uses Python identifier passengerIDRef
    __passengerIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef'), 'passengerIDRef', '__httprailgds_netwscommontypes_CTD_ANON_39_httprailgds_netwscommontypespassengerIDRef', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 992, 22), )

    
    passengerIDRef = property(__passengerIDRef.value, __passengerIDRef.set, None, None)

    _ElementMap.update({
        __passengerIDRef.name() : __passengerIDRef
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}AuthorizationNumbersType with content type ELEMENT_ONLY
class AuthorizationNumbersType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}AuthorizationNumbersType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AuthorizationNumbersType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1011, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}authorizationNumber uses Python identifier authorizationNumber
    __authorizationNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authorizationNumber'), 'authorizationNumber', '__httprailgds_netwscommontypes_AuthorizationNumbersType_httprailgds_netwscommontypesauthorizationNumber', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1013, 12), )

    
    authorizationNumber = property(__authorizationNumber.value, __authorizationNumber.set, None, None)

    _ElementMap.update({
        __authorizationNumber.name() : __authorizationNumber
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'AuthorizationNumbersType', AuthorizationNumbersType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1014, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passengerIDRef uses Python identifier passengerIDRef
    __passengerIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef'), 'passengerIDRef', '__httprailgds_netwscommontypes_CTD_ANON_40_httprailgds_netwscommontypespassengerIDRef', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1016, 24), )

    
    passengerIDRef = property(__passengerIDRef.value, __passengerIDRef.set, None, None)

    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httprailgds_netwscommontypes_CTD_ANON_40_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1018, 20)
    __value._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1018, 20)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __passengerIDRef.name() : __passengerIDRef
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type {http://railgds.net/ws/commontypes}FeeType with content type ELEMENT_ONLY
class FeeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}FeeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FeeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1030, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httprailgds_netwscommontypes_FeeType_httprailgds_netwscommontypesdescription', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1032, 3), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httprailgds_netwscommontypes_FeeType_httprailgds_netwscommontypesamount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1033, 3), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}feeType uses Python identifier feeType
    __feeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'feeType'), 'feeType', '__httprailgds_netwscommontypes_FeeType_httprailgds_netwscommontypesfeeType', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1034, 3), )

    
    feeType = property(__feeType.value, __feeType.set, None, None)

    _ElementMap.update({
        __description.name() : __description,
        __amount.name() : __amount,
        __feeType.name() : __feeType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FeeType', FeeType)


# Complex type {http://railgds.net/ws/commontypes}FeesType with content type ELEMENT_ONLY
class FeesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}FeesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FeesType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1046, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fee uses Python identifier fee
    __fee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fee'), 'fee', '__httprailgds_netwscommontypes_FeesType_httprailgds_netwscommontypesfee', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1048, 3), )

    
    fee = property(__fee.value, __fee.set, None, None)

    _ElementMap.update({
        __fee.name() : __fee
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FeesType', FeesType)


# Complex type {http://railgds.net/ws/commontypes}CompatiblePricesType with content type ELEMENT_ONLY
class CompatiblePricesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}CompatiblePricesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CompatiblePricesType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1109, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}compatiblePriceIDRef uses Python identifier compatiblePriceIDRef
    __compatiblePriceIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'compatiblePriceIDRef'), 'compatiblePriceIDRef', '__httprailgds_netwscommontypes_CompatiblePricesType_httprailgds_netwscommontypescompatiblePriceIDRef', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1111, 12), )

    
    compatiblePriceIDRef = property(__compatiblePriceIDRef.value, __compatiblePriceIDRef.set, None, None)

    _ElementMap.update({
        __compatiblePriceIDRef.name() : __compatiblePriceIDRef
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CompatiblePricesType', CompatiblePricesType)


# Complex type {http://railgds.net/ws/commontypes}LegReferencesType with content type ELEMENT_ONLY
class LegReferencesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}LegReferencesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LegReferencesType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1115, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}legIDRef uses Python identifier legIDRef
    __legIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'legIDRef'), 'legIDRef', '__httprailgds_netwscommontypes_LegReferencesType_httprailgds_netwscommontypeslegIDRef', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1118, 4), )

    
    legIDRef = property(__legIDRef.value, __legIDRef.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}legSolutionIDRef uses Python identifier legSolutionIDRef
    __legSolutionIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'legSolutionIDRef'), 'legSolutionIDRef', '__httprailgds_netwscommontypes_LegReferencesType_httprailgds_netwscommontypeslegSolutionIDRef', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1119, 4), )

    
    legSolutionIDRef = property(__legSolutionIDRef.value, __legSolutionIDRef.set, None, None)

    _ElementMap.update({
        __legIDRef.name() : __legIDRef,
        __legSolutionIDRef.name() : __legSolutionIDRef
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LegReferencesType', LegReferencesType)


# Complex type {http://railgds.net/ws/commontypes}LegSolutionType with content type ELEMENT_ONLY
class LegSolutionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}LegSolutionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LegSolutionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1123, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}numberOfConnections uses Python identifier numberOfConnections
    __numberOfConnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfConnections'), 'numberOfConnections', '__httprailgds_netwscommontypes_LegSolutionType_httprailgds_netwscommontypesnumberOfConnections', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1125, 3), )

    
    numberOfConnections = property(__numberOfConnections.value, __numberOfConnections.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}serviceAlerts uses Python identifier serviceAlerts
    __serviceAlerts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceAlerts'), 'serviceAlerts', '__httprailgds_netwscommontypes_LegSolutionType_httprailgds_netwscommontypesserviceAlerts', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1126, 3), )

    
    serviceAlerts = property(__serviceAlerts.value, __serviceAlerts.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}travelSegments uses Python identifier travelSegments
    __travelSegments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelSegments'), 'travelSegments', '__httprailgds_netwscommontypes_LegSolutionType_httprailgds_netwscommontypestravelSegments', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1134, 3), )

    
    travelSegments = property(__travelSegments.value, __travelSegments.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}overtakenJourney uses Python identifier overtakenJourney
    __overtakenJourney = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'overtakenJourney'), 'overtakenJourney', '__httprailgds_netwscommontypes_LegSolutionType_httprailgds_netwscommontypesovertakenJourney', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1142, 3), )

    
    overtakenJourney = property(__overtakenJourney.value, __overtakenJourney.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}duration uses Python identifier duration
    __duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'duration'), 'duration', '__httprailgds_netwscommontypes_LegSolutionType_httprailgds_netwscommontypesduration', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1143, 12), )

    
    duration = property(__duration.value, __duration.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}routingRestrictions uses Python identifier routingRestrictions
    __routingRestrictions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingRestrictions'), 'routingRestrictions', '__httprailgds_netwscommontypes_LegSolutionType_httprailgds_netwscommontypesroutingRestrictions', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1144, 3), )

    
    routingRestrictions = property(__routingRestrictions.value, __routingRestrictions.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}passengerInformationRequired uses Python identifier passengerInformationRequired
    __passengerInformationRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerInformationRequired'), 'passengerInformationRequired', '__httprailgds_netwscommontypes_LegSolutionType_httprailgds_netwscommontypespassengerInformationRequired', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1145, 12), )

    
    passengerInformationRequired = property(__passengerInformationRequired.value, __passengerInformationRequired.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}availableSeatPreferences uses Python identifier availableSeatPreferences
    __availableSeatPreferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'availableSeatPreferences'), 'availableSeatPreferences', '__httprailgds_netwscommontypes_LegSolutionType_httprailgds_netwscommontypesavailableSeatPreferences', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1152, 12), )

    
    availableSeatPreferences = property(__availableSeatPreferences.value, __availableSeatPreferences.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}loyaltyCards uses Python identifier loyaltyCards
    __loyaltyCards = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCards'), 'loyaltyCards', '__httprailgds_netwscommontypes_LegSolutionType_httprailgds_netwscommontypesloyaltyCards', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1159, 12), )

    
    loyaltyCards = property(__loyaltyCards.value, __loyaltyCards.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}revisions uses Python identifier revisions
    __revisions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'revisions'), 'revisions', '__httprailgds_netwscommontypes_LegSolutionType_httprailgds_netwscommontypesrevisions', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1166, 3), )

    
    revisions = property(__revisions.value, __revisions.set, None, None)

    
    # Attribute legSolutionID uses Python identifier legSolutionID
    __legSolutionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'legSolutionID'), 'legSolutionID', '__httprailgds_netwscommontypes_LegSolutionType_legSolutionID', pyxb.binding.datatypes.ID, required=True)
    __legSolutionID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1174, 2)
    __legSolutionID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1174, 2)
    
    legSolutionID = property(__legSolutionID.value, __legSolutionID.set, None, None)

    _ElementMap.update({
        __numberOfConnections.name() : __numberOfConnections,
        __serviceAlerts.name() : __serviceAlerts,
        __travelSegments.name() : __travelSegments,
        __overtakenJourney.name() : __overtakenJourney,
        __duration.name() : __duration,
        __routingRestrictions.name() : __routingRestrictions,
        __passengerInformationRequired.name() : __passengerInformationRequired,
        __availableSeatPreferences.name() : __availableSeatPreferences,
        __loyaltyCards.name() : __loyaltyCards,
        __revisions.name() : __revisions
    })
    _AttributeMap.update({
        __legSolutionID.name() : __legSolutionID
    })
Namespace.addCategoryObject('typeBinding', 'LegSolutionType', LegSolutionType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1127, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}serviceAlert uses Python identifier serviceAlert
    __serviceAlert = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceAlert'), 'serviceAlert', '__httprailgds_netwscommontypes_CTD_ANON_41_httprailgds_netwscommontypesserviceAlert', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1129, 6), )

    
    serviceAlert = property(__serviceAlert.value, __serviceAlert.set, None, None)

    _ElementMap.update({
        __serviceAlert.name() : __serviceAlert
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1135, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}travelSegment uses Python identifier travelSegment
    __travelSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelSegment'), 'travelSegment', '__httprailgds_netwscommontypes_CTD_ANON_42_httprailgds_netwscommontypestravelSegment', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1137, 6), )

    
    travelSegment = property(__travelSegment.value, __travelSegment.set, None, None)

    _ElementMap.update({
        __travelSegment.name() : __travelSegment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1146, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passengerInformation uses Python identifier passengerInformation
    __passengerInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerInformation'), 'passengerInformation', '__httprailgds_netwscommontypes_CTD_ANON_43_httprailgds_netwscommontypespassengerInformation', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1148, 24), )

    
    passengerInformation = property(__passengerInformation.value, __passengerInformation.set, None, None)

    _ElementMap.update({
        __passengerInformation.name() : __passengerInformation
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1153, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}availableSeatPreference uses Python identifier availableSeatPreference
    __availableSeatPreference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'availableSeatPreference'), 'availableSeatPreference', '__httprailgds_netwscommontypes_CTD_ANON_44_httprailgds_netwscommontypesavailableSeatPreference', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1155, 24), )

    
    availableSeatPreference = property(__availableSeatPreference.value, __availableSeatPreference.set, None, None)

    _ElementMap.update({
        __availableSeatPreference.name() : __availableSeatPreference
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1160, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}loyaltyCard uses Python identifier loyaltyCard
    __loyaltyCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard'), 'loyaltyCard', '__httprailgds_netwscommontypes_CTD_ANON_45_httprailgds_netwscommontypesloyaltyCard', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1162, 24), )

    
    loyaltyCard = property(__loyaltyCard.value, __loyaltyCard.set, None, None)

    _ElementMap.update({
        __loyaltyCard.name() : __loyaltyCard
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1167, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}revision uses Python identifier revision
    __revision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'revision'), 'revision', '__httprailgds_netwscommontypes_CTD_ANON_46_httprailgds_netwscommontypesrevision', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1169, 6), )

    
    revision = property(__revision.value, __revision.set, None, None)

    _ElementMap.update({
        __revision.name() : __revision
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}LegSolutionsType with content type ELEMENT_ONLY
class LegSolutionsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}LegSolutionsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LegSolutionsType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1176, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}legSolution uses Python identifier legSolution
    __legSolution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'legSolution'), 'legSolution', '__httprailgds_netwscommontypes_LegSolutionsType_httprailgds_netwscommontypeslegSolution', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1178, 3), )

    
    legSolution = property(__legSolution.value, __legSolution.set, None, None)

    _ElementMap.update({
        __legSolution.name() : __legSolution
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LegSolutionsType', LegSolutionsType)


# Complex type {http://railgds.net/ws/commontypes}LegType with content type ELEMENT_ONLY
class LegType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}LegType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LegType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1182, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}originTravelPoint uses Python identifier originTravelPoint
    __originTravelPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint'), 'originTravelPoint', '__httprailgds_netwscommontypes_LegType_httprailgds_netwscommontypesoriginTravelPoint', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1184, 3), )

    
    originTravelPoint = property(__originTravelPoint.value, __originTravelPoint.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}destinationTravelPoint uses Python identifier destinationTravelPoint
    __destinationTravelPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint'), 'destinationTravelPoint', '__httprailgds_netwscommontypes_LegType_httprailgds_netwscommontypesdestinationTravelPoint', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1185, 3), )

    
    destinationTravelPoint = property(__destinationTravelPoint.value, __destinationTravelPoint.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}legSolutions uses Python identifier legSolutions
    __legSolutions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'legSolutions'), 'legSolutions', '__httprailgds_netwscommontypes_LegType_httprailgds_netwscommontypeslegSolutions', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1186, 3), )

    
    legSolutions = property(__legSolutions.value, __legSolutions.set, None, None)

    
    # Attribute legID uses Python identifier legID
    __legID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'legID'), 'legID', '__httprailgds_netwscommontypes_LegType_legID', pyxb.binding.datatypes.ID, required=True)
    __legID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1188, 2)
    __legID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1188, 2)
    
    legID = property(__legID.value, __legID.set, None, None)

    _ElementMap.update({
        __originTravelPoint.name() : __originTravelPoint,
        __destinationTravelPoint.name() : __destinationTravelPoint,
        __legSolutions.name() : __legSolutions
    })
    _AttributeMap.update({
        __legID.name() : __legID
    })
Namespace.addCategoryObject('typeBinding', 'LegType', LegType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1269, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}travelSegmentIDRef uses Python identifier travelSegmentIDRef
    __travelSegmentIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelSegmentIDRef'), 'travelSegmentIDRef', '__httprailgds_netwscommontypes_CTD_ANON_47_httprailgds_netwscommontypestravelSegmentIDRef', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1271, 24), )

    
    travelSegmentIDRef = property(__travelSegmentIDRef.value, __travelSegmentIDRef.set, None, None)

    
    # Attribute minQuantity uses Python identifier minQuantity
    __minQuantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'minQuantity'), 'minQuantity', '__httprailgds_netwscommontypes_CTD_ANON_47_minQuantity', pyxb.binding.datatypes.integer)
    __minQuantity._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1273, 20)
    __minQuantity._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1273, 20)
    
    minQuantity = property(__minQuantity.value, __minQuantity.set, None, None)

    
    # Attribute maxQuantity uses Python identifier maxQuantity
    __maxQuantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'maxQuantity'), 'maxQuantity', '__httprailgds_netwscommontypes_CTD_ANON_47_maxQuantity', pyxb.binding.datatypes.integer)
    __maxQuantity._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1274, 20)
    __maxQuantity._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1274, 20)
    
    maxQuantity = property(__maxQuantity.value, __maxQuantity.set, None, None)

    _ElementMap.update({
        __travelSegmentIDRef.name() : __travelSegmentIDRef
    })
    _AttributeMap.update({
        __minQuantity.name() : __minQuantity,
        __maxQuantity.name() : __maxQuantity
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1279, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareCode uses Python identifier fareCode
    __fareCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareCode'), 'fareCode', '__httprailgds_netwscommontypes_CTD_ANON_48_httprailgds_netwscommontypesfareCode', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1281, 12), )

    
    fareCode = property(__fareCode.value, __fareCode.set, None, None)

    _ElementMap.update({
        __fareCode.name() : __fareCode
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}OptionalPriceFareCodeType with content type ELEMENT_ONLY
class OptionalPriceFareCodeType (pyxb.binding.basis.complexTypeDefinition):
    """
				We have to add OptionalPriceFareCodeType instead of just reusing FareCodeType. If we made the changes needed for optional prices
				to FareCodeType, it would no longer be backwards compatible. Once we go to the next major version of the API,
				we can coalesce FareCodeType and OptionalPriceFareCodeType then.
			"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OptionalPriceFareCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1304, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}serviceClass uses Python identifier serviceClass
    __serviceClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceClass'), 'serviceClass', '__httprailgds_netwscommontypes_OptionalPriceFareCodeType_httprailgds_netwscommontypesserviceClass', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1313, 3), )

    
    serviceClass = property(__serviceClass.value, __serviceClass.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}travelSegmentIDRef uses Python identifier travelSegmentIDRef
    __travelSegmentIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelSegmentIDRef'), 'travelSegmentIDRef', '__httprailgds_netwscommontypes_OptionalPriceFareCodeType_httprailgds_netwscommontypestravelSegmentIDRef', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1314, 3), )

    
    travelSegmentIDRef = property(__travelSegmentIDRef.value, __travelSegmentIDRef.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cabinClass uses Python identifier cabinClass
    __cabinClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cabinClass'), 'cabinClass', '__httprailgds_netwscommontypes_OptionalPriceFareCodeType_httprailgds_netwscommontypescabinClass', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1315, 3), )

    
    cabinClass = property(__cabinClass.value, __cabinClass.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareClass uses Python identifier fareClass
    __fareClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareClass'), 'fareClass', '__httprailgds_netwscommontypes_OptionalPriceFareCodeType_httprailgds_netwscommontypesfareClass', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1316, 3), )

    
    fareClass = property(__fareClass.value, __fareClass.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareDisplayName uses Python identifier fareDisplayName
    __fareDisplayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareDisplayName'), 'fareDisplayName', '__httprailgds_netwscommontypes_OptionalPriceFareCodeType_httprailgds_netwscommontypesfareDisplayName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1317, 3), )

    
    fareDisplayName = property(__fareDisplayName.value, __fareDisplayName.set, None, None)

    
    # Attribute code uses Python identifier code
    __code = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httprailgds_netwscommontypes_OptionalPriceFareCodeType_code', pyxb.binding.datatypes.anySimpleType, required=True)
    __code._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1319, 2)
    __code._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1319, 2)
    
    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        __serviceClass.name() : __serviceClass,
        __travelSegmentIDRef.name() : __travelSegmentIDRef,
        __cabinClass.name() : __cabinClass,
        __fareClass.name() : __fareClass,
        __fareDisplayName.name() : __fareDisplayName
    })
    _AttributeMap.update({
        __code.name() : __code
    })
Namespace.addCategoryObject('typeBinding', 'OptionalPriceFareCodeType', OptionalPriceFareCodeType)


# Complex type {http://railgds.net/ws/commontypes}ConsumptionRulesType with content type ELEMENT_ONLY
class ConsumptionRulesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ConsumptionRulesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConsumptionRulesType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1321, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}ageBreakConsumptionRule uses Python identifier ageBreakConsumptionRule
    __ageBreakConsumptionRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ageBreakConsumptionRule'), 'ageBreakConsumptionRule', '__httprailgds_netwscommontypes_ConsumptionRulesType_httprailgds_netwscommontypesageBreakConsumptionRule', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1323, 3), )

    
    ageBreakConsumptionRule = property(__ageBreakConsumptionRule.value, __ageBreakConsumptionRule.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}totalPassengersConsumptionRule uses Python identifier totalPassengersConsumptionRule
    __totalPassengersConsumptionRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'totalPassengersConsumptionRule'), 'totalPassengersConsumptionRule', '__httprailgds_netwscommontypes_ConsumptionRulesType_httprailgds_netwscommontypestotalPassengersConsumptionRule', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1324, 3), )

    
    totalPassengersConsumptionRule = property(__totalPassengersConsumptionRule.value, __totalPassengersConsumptionRule.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}travelCardZoneConsumptionRule uses Python identifier travelCardZoneConsumptionRule
    __travelCardZoneConsumptionRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelCardZoneConsumptionRule'), 'travelCardZoneConsumptionRule', '__httprailgds_netwscommontypes_ConsumptionRulesType_httprailgds_netwscommontypestravelCardZoneConsumptionRule', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1325, 3), )

    
    travelCardZoneConsumptionRule = property(__travelCardZoneConsumptionRule.value, __travelCardZoneConsumptionRule.set, None, None)

    _ElementMap.update({
        __ageBreakConsumptionRule.name() : __ageBreakConsumptionRule,
        __totalPassengersConsumptionRule.name() : __totalPassengersConsumptionRule,
        __travelCardZoneConsumptionRule.name() : __travelCardZoneConsumptionRule
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ConsumptionRulesType', ConsumptionRulesType)


# Complex type {http://railgds.net/ws/commontypes}ConsumptionRuleType with content type EMPTY
class ConsumptionRuleType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ConsumptionRuleType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConsumptionRuleType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1328, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute minQuantity uses Python identifier minQuantity
    __minQuantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'minQuantity'), 'minQuantity', '__httprailgds_netwscommontypes_ConsumptionRuleType_minQuantity', pyxb.binding.datatypes.int, required=True)
    __minQuantity._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1329, 8)
    __minQuantity._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1329, 8)
    
    minQuantity = property(__minQuantity.value, __minQuantity.set, None, None)

    
    # Attribute maxQuantity uses Python identifier maxQuantity
    __maxQuantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'maxQuantity'), 'maxQuantity', '__httprailgds_netwscommontypes_ConsumptionRuleType_maxQuantity', pyxb.binding.datatypes.int, required=True)
    __maxQuantity._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1330, 8)
    __maxQuantity._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1330, 8)
    
    maxQuantity = property(__maxQuantity.value, __maxQuantity.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __minQuantity.name() : __minQuantity,
        __maxQuantity.name() : __maxQuantity
    })
Namespace.addCategoryObject('typeBinding', 'ConsumptionRuleType', ConsumptionRuleType)


# Complex type {http://railgds.net/ws/commontypes}TravelCardZoneConsumptionRuleType with content type ELEMENT_ONLY
class TravelCardZoneConsumptionRuleType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TravelCardZoneConsumptionRuleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TravelCardZoneConsumptionRuleType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1347, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}travelCardZone uses Python identifier travelCardZone
    __travelCardZone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelCardZone'), 'travelCardZone', '__httprailgds_netwscommontypes_TravelCardZoneConsumptionRuleType_httprailgds_netwscommontypestravelCardZone', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1349, 12), )

    
    travelCardZone = property(__travelCardZone.value, __travelCardZone.set, None, None)

    _ElementMap.update({
        __travelCardZone.name() : __travelCardZone
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TravelCardZoneConsumptionRuleType', TravelCardZoneConsumptionRuleType)


# Complex type {http://railgds.net/ws/commontypes}OnAccountType with content type ELEMENT_ONLY
class OnAccountType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}OnAccountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OnAccountType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1399, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httprailgds_netwscommontypes_OnAccountType_httprailgds_netwscommontypesnumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1401, 3), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}validationCode uses Python identifier validationCode
    __validationCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'validationCode'), 'validationCode', '__httprailgds_netwscommontypes_OnAccountType_httprailgds_netwscommontypesvalidationCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1402, 3), )

    
    validationCode = property(__validationCode.value, __validationCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}accountName uses Python identifier accountName
    __accountName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accountName'), 'accountName', '__httprailgds_netwscommontypes_OnAccountType_httprailgds_netwscommontypesaccountName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1403, 3), )

    
    accountName = property(__accountName.value, __accountName.set, None, None)

    _ElementMap.update({
        __number.name() : __number,
        __validationCode.name() : __validationCode,
        __accountName.name() : __accountName
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OnAccountType', OnAccountType)


# Complex type {http://railgds.net/ws/commontypes}ShippingInformationType with content type ELEMENT_ONLY
class ShippingInformationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ShippingInformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ShippingInformationType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1408, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}shippingName uses Python identifier shippingName
    __shippingName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shippingName'), 'shippingName', '__httprailgds_netwscommontypes_ShippingInformationType_httprailgds_netwscommontypesshippingName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1410, 12), )

    
    shippingName = property(__shippingName.value, __shippingName.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}shippingAddress uses Python identifier shippingAddress
    __shippingAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shippingAddress'), 'shippingAddress', '__httprailgds_netwscommontypes_ShippingInformationType_httprailgds_netwscommontypesshippingAddress', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1411, 12), )

    
    shippingAddress = property(__shippingAddress.value, __shippingAddress.set, None, None)

    _ElementMap.update({
        __shippingName.name() : __shippingName,
        __shippingAddress.name() : __shippingAddress
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ShippingInformationType', ShippingInformationType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1422, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}serviceAlert uses Python identifier serviceAlert
    __serviceAlert = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceAlert'), 'serviceAlert', '__httprailgds_netwscommontypes_CTD_ANON_49_httprailgds_netwscommontypesserviceAlert', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1424, 6), )

    
    serviceAlert = property(__serviceAlert.value, __serviceAlert.set, None, None)

    _ElementMap.update({
        __serviceAlert.name() : __serviceAlert
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1431, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}selectedTicketingOption uses Python identifier selectedTicketingOption
    __selectedTicketingOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'selectedTicketingOption'), 'selectedTicketingOption', '__httprailgds_netwscommontypes_CTD_ANON_50_httprailgds_netwscommontypesselectedTicketingOption', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1433, 6), )

    
    selectedTicketingOption = property(__selectedTicketingOption.value, __selectedTicketingOption.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}shippingName uses Python identifier shippingName
    __shippingName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shippingName'), 'shippingName', '__httprailgds_netwscommontypes_CTD_ANON_50_httprailgds_netwscommontypesshippingName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1435, 6), )

    
    shippingName = property(__shippingName.value, __shippingName.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}shippingAddress uses Python identifier shippingAddress
    __shippingAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shippingAddress'), 'shippingAddress', '__httprailgds_netwscommontypes_CTD_ANON_50_httprailgds_netwscommontypesshippingAddress', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1436, 6), )

    
    shippingAddress = property(__shippingAddress.value, __shippingAddress.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}valueDocument uses Python identifier valueDocument
    __valueDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'valueDocument'), 'valueDocument', '__httprailgds_netwscommontypes_CTD_ANON_50_httprailgds_netwscommontypesvalueDocument', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1437, 6), )

    
    valueDocument = property(__valueDocument.value, __valueDocument.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}phoneNumber uses Python identifier phoneNumber
    __phoneNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber'), 'phoneNumber', '__httprailgds_netwscommontypes_CTD_ANON_50_httprailgds_netwscommontypesphoneNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1438, 24), )

    
    phoneNumber = property(__phoneNumber.value, __phoneNumber.set, None, None)

    _ElementMap.update({
        __selectedTicketingOption.name() : __selectedTicketingOption,
        __shippingName.name() : __shippingName,
        __shippingAddress.name() : __shippingAddress,
        __valueDocument.name() : __valueDocument,
        __phoneNumber.name() : __phoneNumber
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """refundEligibility is deprecated. Please use cancellationSummary instead."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1447, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}penalty uses Python identifier penalty
    __penalty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'penalty'), 'penalty', '__httprailgds_netwscommontypes_CTD_ANON_51_httprailgds_netwscommontypespenalty', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1449, 6), )

    
    penalty = property(__penalty.value, __penalty.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}penaltyBreakdown uses Python identifier penaltyBreakdown
    __penaltyBreakdown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'penaltyBreakdown'), 'penaltyBreakdown', '__httprailgds_netwscommontypes_CTD_ANON_51_httprailgds_netwscommontypespenaltyBreakdown', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1450, 24), )

    
    penaltyBreakdown = property(__penaltyBreakdown.value, __penaltyBreakdown.set, None, None)

    
    # Attribute eligible uses Python identifier eligible
    __eligible = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'eligible'), 'eligible', '__httprailgds_netwscommontypes_CTD_ANON_51_eligible', pyxb.binding.datatypes.boolean, required=True)
    __eligible._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1475, 5)
    __eligible._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1475, 5)
    
    eligible = property(__eligible.value, __eligible.set, None, None)

    
    # Attribute cancelRequiredForRefund uses Python identifier cancelRequiredForRefund
    __cancelRequiredForRefund = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'cancelRequiredForRefund'), 'cancelRequiredForRefund', '__httprailgds_netwscommontypes_CTD_ANON_51_cancelRequiredForRefund', pyxb.binding.datatypes.boolean)
    __cancelRequiredForRefund._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1476, 20)
    __cancelRequiredForRefund._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1476, 20)
    
    cancelRequiredForRefund = property(__cancelRequiredForRefund.value, __cancelRequiredForRefund.set, None, None)

    _ElementMap.update({
        __penalty.name() : __penalty,
        __penaltyBreakdown.name() : __penaltyBreakdown
    })
    _AttributeMap.update({
        __eligible.name() : __eligible,
        __cancelRequiredForRefund.name() : __cancelRequiredForRefund
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1451, 29)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}penaltyItem uses Python identifier penaltyItem
    __penaltyItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'penaltyItem'), 'penaltyItem', '__httprailgds_netwscommontypes_CTD_ANON_52_httprailgds_netwscommontypespenaltyItem', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1453, 37), )

    
    penaltyItem = property(__penaltyItem.value, __penaltyItem.set, None, None)

    _ElementMap.update({
        __penaltyItem.name() : __penaltyItem
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1485, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}shipmentTracking uses Python identifier shipmentTracking
    __shipmentTracking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipmentTracking'), 'shipmentTracking', '__httprailgds_netwscommontypes_CTD_ANON_53_httprailgds_netwscommontypesshipmentTracking', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1487, 6), )

    
    shipmentTracking = property(__shipmentTracking.value, __shipmentTracking.set, None, None)

    _ElementMap.update({
        __shipmentTracking.name() : __shipmentTracking
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1497, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'language'), 'language', '__httprailgds_netwscommontypes_CTD_ANON_54_httprailgds_netwscommontypeslanguage', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1499, 24), )

    
    language = property(__language.value, __language.set, None, None)

    _ElementMap.update({
        __language.name() : __language
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}PassengerSpecType with content type ELEMENT_ONLY
class PassengerSpecType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PassengerSpecType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PassengerSpecType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1540, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}age uses Python identifier age
    __age = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'age'), 'age', '__httprailgds_netwscommontypes_PassengerSpecType_httprailgds_netwscommontypesage', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1543, 4), )

    
    age = property(__age.value, __age.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}dateOfBirth uses Python identifier dateOfBirth
    __dateOfBirth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth'), 'dateOfBirth', '__httprailgds_netwscommontypes_PassengerSpecType_httprailgds_netwscommontypesdateOfBirth', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1544, 4), )

    
    dateOfBirth = property(__dateOfBirth.value, __dateOfBirth.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}residenceInformation uses Python identifier residenceInformation
    __residenceInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'residenceInformation'), 'residenceInformation', '__httprailgds_netwscommontypes_PassengerSpecType_httprailgds_netwscommontypesresidenceInformation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1546, 3), )

    
    residenceInformation = property(__residenceInformation.value, __residenceInformation.set, None, None)

    
    # Attribute passengerSpecID uses Python identifier passengerSpecID
    __passengerSpecID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'passengerSpecID'), 'passengerSpecID', '__httprailgds_netwscommontypes_PassengerSpecType_passengerSpecID', pyxb.binding.datatypes.ID)
    __passengerSpecID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1549, 2)
    __passengerSpecID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1549, 2)
    
    passengerSpecID = property(__passengerSpecID.value, __passengerSpecID.set, None, None)

    _ElementMap.update({
        __age.name() : __age,
        __dateOfBirth.name() : __dateOfBirth,
        __residenceInformation.name() : __residenceInformation
    })
    _AttributeMap.update({
        __passengerSpecID.name() : __passengerSpecID
    })
Namespace.addCategoryObject('typeBinding', 'PassengerSpecType', PassengerSpecType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1556, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}travelDocument uses Python identifier travelDocument
    __travelDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelDocument'), 'travelDocument', '__httprailgds_netwscommontypes_CTD_ANON_55_httprailgds_netwscommontypestravelDocument', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1558, 8), )

    
    travelDocument = property(__travelDocument.value, __travelDocument.set, None, None)

    _ElementMap.update({
        __travelDocument.name() : __travelDocument
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """Will only be returned if the includeOrderDetails flag is true in the request """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1567, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}orderIDRef uses Python identifier orderIDRef
    __orderIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderIDRef'), 'orderIDRef', '__httprailgds_netwscommontypes_CTD_ANON_56_httprailgds_netwscommontypesorderIDRef', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1569, 8), )

    
    orderIDRef = property(__orderIDRef.value, __orderIDRef.set, None, None)

    _ElementMap.update({
        __orderIDRef.name() : __orderIDRef
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """Will only be returned if the includeOrderDetails flag is true in the request """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1578, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}crmNumber uses Python identifier crmNumber
    __crmNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'crmNumber'), 'crmNumber', '__httprailgds_netwscommontypes_CTD_ANON_57_httprailgds_netwscommontypescrmNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1580, 32), )

    
    crmNumber = property(__crmNumber.value, __crmNumber.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}username uses Python identifier username
    __username = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'username'), 'username', '__httprailgds_netwscommontypes_CTD_ANON_57_httprailgds_netwscommontypesusername', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1581, 32), )

    
    username = property(__username.value, __username.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}customerNumber uses Python identifier customerNumber
    __customerNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerNumber'), 'customerNumber', '__httprailgds_netwscommontypes_CTD_ANON_57_httprailgds_netwscommontypescustomerNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1582, 32), )

    
    customerNumber = property(__customerNumber.value, __customerNumber.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}customerSource uses Python identifier customerSource
    __customerSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerSource'), 'customerSource', '__httprailgds_netwscommontypes_CTD_ANON_57_httprailgds_netwscommontypescustomerSource', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1583, 32), )

    
    customerSource = property(__customerSource.value, __customerSource.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}campaignReference uses Python identifier campaignReference
    __campaignReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'campaignReference'), 'campaignReference', '__httprailgds_netwscommontypes_CTD_ANON_57_httprailgds_netwscommontypescampaignReference', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1584, 32), )

    
    campaignReference = property(__campaignReference.value, __campaignReference.set, None, None)

    _ElementMap.update({
        __crmNumber.name() : __crmNumber,
        __username.name() : __username,
        __customerNumber.name() : __customerNumber,
        __customerSource.name() : __customerSource,
        __campaignReference.name() : __campaignReference
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}PaymentProcessorInfoType with content type ELEMENT_ONLY
class PaymentProcessorInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PaymentProcessorInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PaymentProcessorInfoType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1603, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}approvalNumber uses Python identifier approvalNumber
    __approvalNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'approvalNumber'), 'approvalNumber', '__httprailgds_netwscommontypes_PaymentProcessorInfoType_httprailgds_netwscommontypesapprovalNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1605, 3), )

    
    approvalNumber = property(__approvalNumber.value, __approvalNumber.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}paymentProcessor uses Python identifier paymentProcessor
    __paymentProcessor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessor'), 'paymentProcessor', '__httprailgds_netwscommontypes_PaymentProcessorInfoType_httprailgds_netwscommontypespaymentProcessor', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1606, 3), )

    
    paymentProcessor = property(__paymentProcessor.value, __paymentProcessor.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}doingBusinessAs uses Python identifier doingBusinessAs
    __doingBusinessAs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'doingBusinessAs'), 'doingBusinessAs', '__httprailgds_netwscommontypes_PaymentProcessorInfoType_httprailgds_netwscommontypesdoingBusinessAs', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1607, 3), )

    
    doingBusinessAs = property(__doingBusinessAs.value, __doingBusinessAs.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}error uses Python identifier error
    __error = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'error'), 'error', '__httprailgds_netwscommontypes_PaymentProcessorInfoType_httprailgds_netwscommontypeserror', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1608, 3), )

    
    error = property(__error.value, __error.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}descriptiveBillingInformationCollection uses Python identifier descriptiveBillingInformationCollection
    __descriptiveBillingInformationCollection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'descriptiveBillingInformationCollection'), 'descriptiveBillingInformationCollection', '__httprailgds_netwscommontypes_PaymentProcessorInfoType_httprailgds_netwscommontypesdescriptiveBillingInformationCollection', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1617, 3), )

    
    descriptiveBillingInformationCollection = property(__descriptiveBillingInformationCollection.value, __descriptiveBillingInformationCollection.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}transactionCode uses Python identifier transactionCode
    __transactionCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transactionCode'), 'transactionCode', '__httprailgds_netwscommontypes_PaymentProcessorInfoType_httprailgds_netwscommontypestransactionCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1625, 3), )

    
    transactionCode = property(__transactionCode.value, __transactionCode.set, None, None)

    _ElementMap.update({
        __approvalNumber.name() : __approvalNumber,
        __paymentProcessor.name() : __paymentProcessor,
        __doingBusinessAs.name() : __doingBusinessAs,
        __error.name() : __error,
        __descriptiveBillingInformationCollection.name() : __descriptiveBillingInformationCollection,
        __transactionCode.name() : __transactionCode
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PaymentProcessorInfoType', PaymentProcessorInfoType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1609, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute code uses Python identifier code
    __code = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httprailgds_netwscommontypes_CTD_ANON_58_code', pyxb.binding.datatypes.anySimpleType)
    __code._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1612, 7)
    __code._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1612, 7)
    
    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __code.name() : __code
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1618, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}descriptiveBillingInformation uses Python identifier descriptiveBillingInformation
    __descriptiveBillingInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'descriptiveBillingInformation'), 'descriptiveBillingInformation', '__httprailgds_netwscommontypes_CTD_ANON_59_httprailgds_netwscommontypesdescriptiveBillingInformation', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1620, 6), )

    
    descriptiveBillingInformation = property(__descriptiveBillingInformation.value, __descriptiveBillingInformation.set, None, None)

    _ElementMap.update({
        __descriptiveBillingInformation.name() : __descriptiveBillingInformation
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}PointToPointPriceType with content type ELEMENT_ONLY
class PointToPointPriceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PointToPointPriceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PointToPointPriceType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1661, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}totalPrice uses Python identifier totalPrice
    __totalPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), 'totalPrice', '__httprailgds_netwscommontypes_PointToPointPriceType_httprailgds_netwscommontypestotalPrice', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1663, 3), )

    
    totalPrice = property(__totalPrice.value, __totalPrice.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ticketableFares uses Python identifier ticketableFares
    __ticketableFares = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketableFares'), 'ticketableFares', '__httprailgds_netwscommontypes_PointToPointPriceType_httprailgds_netwscommontypesticketableFares', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1664, 3), )

    
    ticketableFares = property(__ticketableFares.value, __ticketableFares.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}legReferences uses Python identifier legReferences
    __legReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'legReferences'), 'legReferences', '__httprailgds_netwscommontypes_PointToPointPriceType_httprailgds_netwscommontypeslegReferences', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1672, 3), )

    
    legReferences = property(__legReferences.value, __legReferences.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareMerchandisingRank uses Python identifier fareMerchandisingRank
    __fareMerchandisingRank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareMerchandisingRank'), 'fareMerchandisingRank', '__httprailgds_netwscommontypes_PointToPointPriceType_httprailgds_netwscommontypesfareMerchandisingRank', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1673, 3), )

    
    fareMerchandisingRank = property(__fareMerchandisingRank.value, __fareMerchandisingRank.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}holdExpiration uses Python identifier holdExpiration
    __holdExpiration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'holdExpiration'), 'holdExpiration', '__httprailgds_netwscommontypes_PointToPointPriceType_httprailgds_netwscommontypesholdExpiration', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1674, 3), )

    
    holdExpiration = property(__holdExpiration.value, __holdExpiration.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}compatiblePrices uses Python identifier compatiblePrices
    __compatiblePrices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'compatiblePrices'), 'compatiblePrices', '__httprailgds_netwscommontypes_PointToPointPriceType_httprailgds_netwscommontypescompatiblePrices', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1675, 12), )

    
    compatiblePrices = property(__compatiblePrices.value, __compatiblePrices.set, None, None)

    
    # Attribute priceID uses Python identifier priceID
    __priceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'priceID'), 'priceID', '__httprailgds_netwscommontypes_PointToPointPriceType_priceID', pyxb.binding.datatypes.ID, required=True)
    __priceID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1677, 2)
    __priceID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1677, 2)
    
    priceID = property(__priceID.value, __priceID.set, None, None)

    
    # Attribute availabilityCheckBypassed uses Python identifier availabilityCheckBypassed
    __availabilityCheckBypassed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'availabilityCheckBypassed'), 'availabilityCheckBypassed', '__httprailgds_netwscommontypes_PointToPointPriceType_availabilityCheckBypassed', pyxb.binding.datatypes.boolean)
    __availabilityCheckBypassed._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1678, 8)
    __availabilityCheckBypassed._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1678, 8)
    
    availabilityCheckBypassed = property(__availabilityCheckBypassed.value, __availabilityCheckBypassed.set, None, None)

    _ElementMap.update({
        __totalPrice.name() : __totalPrice,
        __ticketableFares.name() : __ticketableFares,
        __legReferences.name() : __legReferences,
        __fareMerchandisingRank.name() : __fareMerchandisingRank,
        __holdExpiration.name() : __holdExpiration,
        __compatiblePrices.name() : __compatiblePrices
    })
    _AttributeMap.update({
        __priceID.name() : __priceID,
        __availabilityCheckBypassed.name() : __availabilityCheckBypassed
    })
Namespace.addCategoryObject('typeBinding', 'PointToPointPriceType', PointToPointPriceType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1665, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}ticketableFare uses Python identifier ticketableFare
    __ticketableFare = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketableFare'), 'ticketableFare', '__httprailgds_netwscommontypes_CTD_ANON_60_httprailgds_netwscommontypesticketableFare', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1667, 6), )

    
    ticketableFare = property(__ticketableFare.value, __ticketableFare.set, None, None)

    _ElementMap.update({
        __ticketableFare.name() : __ticketableFare
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}PassPriceType with content type ELEMENT_ONLY
class PassPriceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PassPriceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PassPriceType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1692, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}totalPrice uses Python identifier totalPrice
    __totalPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), 'totalPrice', '__httprailgds_netwscommontypes_PassPriceType_httprailgds_netwscommontypestotalPrice', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1694, 3), )

    
    totalPrice = property(__totalPrice.value, __totalPrice.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ticketableFares uses Python identifier ticketableFares
    __ticketableFares = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketableFares'), 'ticketableFares', '__httprailgds_netwscommontypes_PassPriceType_httprailgds_netwscommontypesticketableFares', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1695, 3), )

    
    ticketableFares = property(__ticketableFares.value, __ticketableFares.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareMerchandisingRank uses Python identifier fareMerchandisingRank
    __fareMerchandisingRank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareMerchandisingRank'), 'fareMerchandisingRank', '__httprailgds_netwscommontypes_PassPriceType_httprailgds_netwscommontypesfareMerchandisingRank', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1703, 3), )

    
    fareMerchandisingRank = property(__fareMerchandisingRank.value, __fareMerchandisingRank.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}holdExpiration uses Python identifier holdExpiration
    __holdExpiration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'holdExpiration'), 'holdExpiration', '__httprailgds_netwscommontypes_PassPriceType_httprailgds_netwscommontypesholdExpiration', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1704, 3), )

    
    holdExpiration = property(__holdExpiration.value, __holdExpiration.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}compatiblePrices uses Python identifier compatiblePrices
    __compatiblePrices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'compatiblePrices'), 'compatiblePrices', '__httprailgds_netwscommontypes_PassPriceType_httprailgds_netwscommontypescompatiblePrices', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1705, 12), )

    
    compatiblePrices = property(__compatiblePrices.value, __compatiblePrices.set, None, None)

    
    # Attribute priceID uses Python identifier priceID
    __priceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'priceID'), 'priceID', '__httprailgds_netwscommontypes_PassPriceType_priceID', pyxb.binding.datatypes.ID, required=True)
    __priceID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1707, 2)
    __priceID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1707, 2)
    
    priceID = property(__priceID.value, __priceID.set, None, None)

    
    # Attribute availabilityCheckBypassed uses Python identifier availabilityCheckBypassed
    __availabilityCheckBypassed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'availabilityCheckBypassed'), 'availabilityCheckBypassed', '__httprailgds_netwscommontypes_PassPriceType_availabilityCheckBypassed', pyxb.binding.datatypes.boolean)
    __availabilityCheckBypassed._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1708, 8)
    __availabilityCheckBypassed._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1708, 8)
    
    availabilityCheckBypassed = property(__availabilityCheckBypassed.value, __availabilityCheckBypassed.set, None, None)

    _ElementMap.update({
        __totalPrice.name() : __totalPrice,
        __ticketableFares.name() : __ticketableFares,
        __fareMerchandisingRank.name() : __fareMerchandisingRank,
        __holdExpiration.name() : __holdExpiration,
        __compatiblePrices.name() : __compatiblePrices
    })
    _AttributeMap.update({
        __priceID.name() : __priceID,
        __availabilityCheckBypassed.name() : __availabilityCheckBypassed
    })
Namespace.addCategoryObject('typeBinding', 'PassPriceType', PassPriceType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1696, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}ticketableFare uses Python identifier ticketableFare
    __ticketableFare = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketableFare'), 'ticketableFare', '__httprailgds_netwscommontypes_CTD_ANON_61_httprailgds_netwscommontypesticketableFare', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1698, 6), )

    
    ticketableFare = property(__ticketableFare.value, __ticketableFare.set, None, None)

    _ElementMap.update({
        __ticketableFare.name() : __ticketableFare
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}RequestStatusType with content type ELEMENT_ONLY
class RequestStatusType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}RequestStatusType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RequestStatusType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1711, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}success uses Python identifier success
    __success = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'success'), 'success', '__httprailgds_netwscommontypes_RequestStatusType_httprailgds_netwscommontypessuccess', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1713, 3), )

    
    success = property(__success.value, __success.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}statusMessages uses Python identifier statusMessages
    __statusMessages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'statusMessages'), 'statusMessages', '__httprailgds_netwscommontypes_RequestStatusType_httprailgds_netwscommontypesstatusMessages', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1714, 3), )

    
    statusMessages = property(__statusMessages.value, __statusMessages.set, None, None)

    
    # Attribute debug uses Python identifier debug
    __debug = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'debug'), 'debug', '__httprailgds_netwscommontypes_RequestStatusType_debug', pyxb.binding.datatypes.string)
    __debug._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1727, 2)
    __debug._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1727, 2)
    
    debug = property(__debug.value, __debug.set, None, None)

    
    # Attribute systemId uses Python identifier systemId
    __systemId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'systemId'), 'systemId', '__httprailgds_netwscommontypes_RequestStatusType_systemId', pyxb.binding.datatypes.string)
    __systemId._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1728, 8)
    __systemId._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1728, 8)
    
    systemId = property(__systemId.value, __systemId.set, None, None)

    _ElementMap.update({
        __success.name() : __success,
        __statusMessages.name() : __statusMessages
    })
    _AttributeMap.update({
        __debug.name() : __debug,
        __systemId.name() : __systemId
    })
Namespace.addCategoryObject('typeBinding', 'RequestStatusType', RequestStatusType)


# Complex type {http://railgds.net/ws/commontypes}ResidenceInformationType with content type ELEMENT_ONLY
class ResidenceInformationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ResidenceInformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResidenceInformationType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1739, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}countryCode uses Python identifier countryCode
    __countryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'countryCode'), 'countryCode', '__httprailgds_netwscommontypes_ResidenceInformationType_httprailgds_netwscommontypescountryCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1741, 3), )

    
    countryCode = property(__countryCode.value, __countryCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}stateProv uses Python identifier stateProv
    __stateProv = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'stateProv'), 'stateProv', '__httprailgds_netwscommontypes_ResidenceInformationType_httprailgds_netwscommontypesstateProv', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1742, 3), )

    
    stateProv = property(__stateProv.value, __stateProv.set, None, None)

    _ElementMap.update({
        __countryCode.name() : __countryCode,
        __stateProv.name() : __stateProv
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ResidenceInformationType', ResidenceInformationType)


# Complex type {http://railgds.net/ws/commontypes}RoutingRestrictionsType with content type ELEMENT_ONLY
class RoutingRestrictionsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}RoutingRestrictionsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RoutingRestrictionsType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1745, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}routingRestriction uses Python identifier routingRestriction
    __routingRestriction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingRestriction'), 'routingRestriction', '__httprailgds_netwscommontypes_RoutingRestrictionsType_httprailgds_netwscommontypesroutingRestriction', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1747, 3), )

    
    routingRestriction = property(__routingRestriction.value, __routingRestriction.set, None, None)

    _ElementMap.update({
        __routingRestriction.name() : __routingRestriction
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RoutingRestrictionsType', RoutingRestrictionsType)


# Complex type {http://railgds.net/ws/commontypes}TicketingOptionsAvailableType with content type EMPTY
class TicketingOptionsAvailableType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TicketingOptionsAvailableType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TicketingOptionsAvailableType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1766, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute TOD uses Python identifier TOD
    __TOD = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TOD'), 'TOD', '__httprailgds_netwscommontypes_TicketingOptionsAvailableType_TOD', pyxb.binding.datatypes.boolean, required=True)
    __TOD._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1767, 2)
    __TOD._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1767, 2)
    
    TOD = property(__TOD.value, __TOD.set, None, None)

    
    # Attribute ETK uses Python identifier ETK
    __ETK = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ETK'), 'ETK', '__httprailgds_netwscommontypes_TicketingOptionsAvailableType_ETK', pyxb.binding.datatypes.boolean, required=True)
    __ETK._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1768, 2)
    __ETK._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1768, 2)
    
    ETK = property(__ETK.value, __ETK.set, None, None)

    
    # Attribute PAH uses Python identifier PAH
    __PAH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PAH'), 'PAH', '__httprailgds_netwscommontypes_TicketingOptionsAvailableType_PAH', pyxb.binding.datatypes.boolean, required=True)
    __PAH._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1769, 2)
    __PAH._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1769, 2)
    
    PAH = property(__PAH.value, __PAH.set, None, None)

    
    # Attribute EML uses Python identifier EML
    __EML = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EML'), 'EML', '__httprailgds_netwscommontypes_TicketingOptionsAvailableType_EML', pyxb.binding.datatypes.boolean)
    __EML._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1770, 2)
    __EML._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1770, 2)
    
    EML = property(__EML.value, __EML.set, None, None)

    
    # Attribute DEPARTURE_STATION_TOD uses Python identifier DEPARTURE_STATION_TOD
    __DEPARTURE_STATION_TOD = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DEPARTURE_STATION_TOD'), 'DEPARTURE_STATION_TOD', '__httprailgds_netwscommontypes_TicketingOptionsAvailableType_DEPARTURE_STATION_TOD', pyxb.binding.datatypes.boolean, required=True)
    __DEPARTURE_STATION_TOD._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1771, 2)
    __DEPARTURE_STATION_TOD._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1771, 2)
    
    DEPARTURE_STATION_TOD = property(__DEPARTURE_STATION_TOD.value, __DEPARTURE_STATION_TOD.set, None, None)

    
    # Attribute SMS uses Python identifier SMS
    __SMS = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SMS'), 'SMS', '__httprailgds_netwscommontypes_TicketingOptionsAvailableType_SMS', pyxb.binding.datatypes.boolean)
    __SMS._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1772, 8)
    __SMS._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1772, 8)
    
    SMS = property(__SMS.value, __SMS.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TOD.name() : __TOD,
        __ETK.name() : __ETK,
        __PAH.name() : __PAH,
        __EML.name() : __EML,
        __DEPARTURE_STATION_TOD.name() : __DEPARTURE_STATION_TOD,
        __SMS.name() : __SMS
    })
Namespace.addCategoryObject('typeBinding', 'TicketingOptionsAvailableType', TicketingOptionsAvailableType)


# Complex type {http://railgds.net/ws/commontypes}RulesType with content type ELEMENT_ONLY
class RulesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}RulesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RulesType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1774, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}rule uses Python identifier rule
    __rule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rule'), 'rule', '__httprailgds_netwscommontypes_RulesType_httprailgds_netwscommontypesrule', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1776, 3), )

    
    rule = property(__rule.value, __rule.set, None, None)

    _ElementMap.update({
        __rule.name() : __rule
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RulesType', RulesType)


# Complex type {http://railgds.net/ws/commontypes}SeatAssignmentType with content type ELEMENT_ONLY
class SeatAssignmentType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}SeatAssignmentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SeatAssignmentType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1859, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}coach uses Python identifier coach
    __coach = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coach'), 'coach', '__httprailgds_netwscommontypes_SeatAssignmentType_httprailgds_netwscommontypescoach', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1861, 3), )

    
    coach = property(__coach.value, __coach.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httprailgds_netwscommontypes_SeatAssignmentType_httprailgds_netwscommontypesnumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1862, 3), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httprailgds_netwscommontypes_SeatAssignmentType_httprailgds_netwscommontypesdirection', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1863, 3), )

    
    direction = property(__direction.value, __direction.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}seatAttributes uses Python identifier seatAttributes
    __seatAttributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'seatAttributes'), 'seatAttributes', '__httprailgds_netwscommontypes_SeatAssignmentType_httprailgds_netwscommontypesseatAttributes', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1864, 12), )

    
    seatAttributes = property(__seatAttributes.value, __seatAttributes.set, None, None)

    _ElementMap.update({
        __coach.name() : __coach,
        __number.name() : __number,
        __direction.name() : __direction,
        __seatAttributes.name() : __seatAttributes
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SeatAssignmentType', SeatAssignmentType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1865, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}seatAttribute uses Python identifier seatAttribute
    __seatAttribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'seatAttribute'), 'seatAttribute', '__httprailgds_netwscommontypes_CTD_ANON_62_httprailgds_netwscommontypesseatAttribute', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1867, 24), )

    
    seatAttribute = property(__seatAttribute.value, __seatAttribute.set, None, None)

    _ElementMap.update({
        __seatAttribute.name() : __seatAttribute
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}SeatLocationListType with content type ELEMENT_ONLY
class SeatLocationListType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}SeatLocationListType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SeatLocationListType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1874, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}seat uses Python identifier seat
    __seat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'seat'), 'seat', '__httprailgds_netwscommontypes_SeatLocationListType_httprailgds_netwscommontypesseat', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1877, 12), )

    
    seat = property(__seat.value, __seat.set, None, None)

    _ElementMap.update({
        __seat.name() : __seat
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SeatLocationListType', SeatLocationListType)


# Complex type {http://railgds.net/ws/commontypes}ExactSeatLocationType with content type ELEMENT_ONLY
class ExactSeatLocationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ExactSeatLocationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExactSeatLocationType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1881, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}coach uses Python identifier coach
    __coach = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coach'), 'coach', '__httprailgds_netwscommontypes_ExactSeatLocationType_httprailgds_netwscommontypescoach', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1883, 12), )

    
    coach = property(__coach.value, __coach.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httprailgds_netwscommontypes_ExactSeatLocationType_httprailgds_netwscommontypesnumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1884, 12), )

    
    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __coach.name() : __coach,
        __number.name() : __number
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ExactSeatLocationType', ExactSeatLocationType)


# Complex type {http://railgds.net/ws/commontypes}PassengerLoyaltyCardType with content type SIMPLE
class PassengerLoyaltyCardType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PassengerLoyaltyCardType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PassengerLoyaltyCardType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1940, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute program uses Python identifier program
    __program = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'program'), 'program', '__httprailgds_netwscommontypes_PassengerLoyaltyCardType_program', pyxb.binding.datatypes.string, required=True)
    __program._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1943, 4)
    __program._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1943, 4)
    
    program = property(__program.value, __program.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __program.name() : __program
    })
Namespace.addCategoryObject('typeBinding', 'PassengerLoyaltyCardType', PassengerLoyaltyCardType)


# Complex type {http://railgds.net/ws/commontypes}LoyaltyCardType with content type ELEMENT_ONLY
class LoyaltyCardType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}LoyaltyCardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LoyaltyCardType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1948, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}marketingCarrier uses Python identifier marketingCarrier
    __marketingCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'marketingCarrier'), 'marketingCarrier', '__httprailgds_netwscommontypes_LoyaltyCardType_httprailgds_netwscommontypesmarketingCarrier', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1950, 12), )

    
    marketingCarrier = property(__marketingCarrier.value, __marketingCarrier.set, None, None)

    
    # Attribute program uses Python identifier program
    __program = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'program'), 'program', '__httprailgds_netwscommontypes_LoyaltyCardType_program', pyxb.binding.datatypes.string, required=True)
    __program._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1952, 8)
    __program._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1952, 8)
    
    program = property(__program.value, __program.set, None, None)

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httprailgds_netwscommontypes_LoyaltyCardType_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1953, 8)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1953, 8)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        __marketingCarrier.name() : __marketingCarrier
    })
    _AttributeMap.update({
        __program.name() : __program,
        __description.name() : __description
    })
Namespace.addCategoryObject('typeBinding', 'LoyaltyCardType', LoyaltyCardType)


# Complex type {http://railgds.net/ws/commontypes}SegmentServiceListType with content type ELEMENT_ONLY
class SegmentServiceListType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}SegmentServiceListType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SegmentServiceListType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1956, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}station uses Python identifier station
    __station = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'station'), 'station', '__httprailgds_netwscommontypes_SegmentServiceListType_httprailgds_netwscommontypesstation', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1958, 3), )

    
    station = property(__station.value, __station.set, None, None)

    _ElementMap.update({
        __station.name() : __station
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SegmentServiceListType', SegmentServiceListType)


# Complex type {http://railgds.net/ws/commontypes}ServiceAlertType with content type ELEMENT_ONLY
class ServiceAlertType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ServiceAlertType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ServiceAlertType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1962, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}summary uses Python identifier summary
    __summary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'summary'), 'summary', '__httprailgds_netwscommontypes_ServiceAlertType_httprailgds_netwscommontypessummary', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1964, 3), )

    
    summary = property(__summary.value, __summary.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httprailgds_netwscommontypes_ServiceAlertType_httprailgds_netwscommontypesdescription', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1965, 3), )

    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        __summary.name() : __summary,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ServiceAlertType', ServiceAlertType)


# Complex type {http://railgds.net/ws/commontypes}ShipmentTrackingType with content type ELEMENT_ONLY
class ShipmentTrackingType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ShipmentTrackingType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ShipmentTrackingType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1984, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}shipmentDate uses Python identifier shipmentDate
    __shipmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipmentDate'), 'shipmentDate', '__httprailgds_netwscommontypes_ShipmentTrackingType_httprailgds_netwscommontypesshipmentDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1986, 3), )

    
    shipmentDate = property(__shipmentDate.value, __shipmentDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}deliveryMethod uses Python identifier deliveryMethod
    __deliveryMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deliveryMethod'), 'deliveryMethod', '__httprailgds_netwscommontypes_ShipmentTrackingType_httprailgds_netwscommontypesdeliveryMethod', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1987, 3), )

    
    deliveryMethod = property(__deliveryMethod.value, __deliveryMethod.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}trackingNumber uses Python identifier trackingNumber
    __trackingNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'trackingNumber'), 'trackingNumber', '__httprailgds_netwscommontypes_ShipmentTrackingType_httprailgds_netwscommontypestrackingNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1988, 3), )

    
    trackingNumber = property(__trackingNumber.value, __trackingNumber.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}shipperUrl uses Python identifier shipperUrl
    __shipperUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipperUrl'), 'shipperUrl', '__httprailgds_netwscommontypes_ShipmentTrackingType_httprailgds_netwscommontypesshipperUrl', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1989, 3), )

    
    shipperUrl = property(__shipperUrl.value, __shipperUrl.set, None, None)

    _ElementMap.update({
        __shipmentDate.name() : __shipmentDate,
        __deliveryMethod.name() : __deliveryMethod,
        __trackingNumber.name() : __trackingNumber,
        __shipperUrl.name() : __shipperUrl
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ShipmentTrackingType', ShipmentTrackingType)


# Complex type {http://railgds.net/ws/commontypes}StatusMessages with content type EMPTY
class StatusMessages (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}StatusMessages with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StatusMessages')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1996, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'StatusMessages', StatusMessages)


# Complex type {http://railgds.net/ws/commontypes}StatusMessageType with content type ELEMENT_ONLY
class StatusMessageType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}StatusMessageType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StatusMessageType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1997, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httprailgds_netwscommontypes_StatusMessageType_httprailgds_netwscommontypesmessage', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1999, 3), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}code uses Python identifier code
    __code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'code'), 'code', '__httprailgds_netwscommontypes_StatusMessageType_httprailgds_netwscommontypescode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2000, 3), )

    
    code = property(__code.value, __code.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}internal uses Python identifier internal
    __internal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'internal'), 'internal', '__httprailgds_netwscommontypes_StatusMessageType_httprailgds_netwscommontypesinternal', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2001, 12), )

    
    internal = property(__internal.value, __internal.set, None, None)

    _ElementMap.update({
        __message.name() : __message,
        __code.name() : __code,
        __internal.name() : __internal
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'StatusMessageType', StatusMessageType)


# Complex type {http://railgds.net/ws/commontypes}TaxType with content type ELEMENT_ONLY
class TaxType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TaxType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TaxType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2004, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httprailgds_netwscommontypes_TaxType_httprailgds_netwscommontypesdescription', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2006, 3), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httprailgds_netwscommontypes_TaxType_httprailgds_netwscommontypesamount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2007, 3), )

    
    amount = property(__amount.value, __amount.set, None, None)

    _ElementMap.update({
        __description.name() : __description,
        __amount.name() : __amount
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TaxType', TaxType)


# Complex type {http://railgds.net/ws/commontypes}TaxesType with content type ELEMENT_ONLY
class TaxesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TaxesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TaxesType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2010, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}totalPrice uses Python identifier totalPrice
    __totalPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), 'totalPrice', '__httprailgds_netwscommontypes_TaxesType_httprailgds_netwscommontypestotalPrice', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2012, 3), )

    
    totalPrice = property(__totalPrice.value, __totalPrice.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}tax uses Python identifier tax
    __tax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tax'), 'tax', '__httprailgds_netwscommontypes_TaxesType_httprailgds_netwscommontypestax', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2013, 3), )

    
    tax = property(__tax.value, __tax.set, None, None)

    _ElementMap.update({
        __totalPrice.name() : __totalPrice,
        __tax.name() : __tax
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TaxesType', TaxesType)


# Complex type {http://railgds.net/ws/commontypes}TicketableFareType with content type ELEMENT_ONLY
class TicketableFareType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TicketableFareType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TicketableFareType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2016, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}totalPrice uses Python identifier totalPrice
    __totalPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), 'totalPrice', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypestotalPrice', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2018, 3), )

    
    totalPrice = property(__totalPrice.value, __totalPrice.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}passengerReferences uses Python identifier passengerReferences
    __passengerReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerReferences'), 'passengerReferences', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypespassengerReferences', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2019, 3), )

    
    passengerReferences = property(__passengerReferences.value, __passengerReferences.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}prices uses Python identifier prices
    __prices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'prices'), 'prices', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypesprices', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2055, 3), )

    
    prices = property(__prices.value, __prices.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}optionalPrices uses Python identifier optionalPrices
    __optionalPrices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'optionalPrices'), 'optionalPrices', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypesoptionalPrices', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2063, 12), )

    
    optionalPrices = property(__optionalPrices.value, __optionalPrices.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}costs uses Python identifier costs
    __costs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'costs'), 'costs', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypescosts', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2070, 12), )

    
    costs = property(__costs.value, __costs.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}commissions uses Python identifier commissions
    __commissions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commissions'), 'commissions', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypescommissions', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2078, 12), )

    
    commissions = property(__commissions.value, __commissions.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}commissionAmount uses Python identifier commissionAmount
    __commissionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commissionAmount'), 'commissionAmount', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypescommissionAmount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2086, 3), )

    
    commissionAmount = property(__commissionAmount.value, __commissionAmount.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}rules uses Python identifier rules
    __rules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rules'), 'rules', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypesrules', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2087, 3), )

    
    rules = property(__rules.value, __rules.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareQualifiers uses Python identifier fareQualifiers
    __fareQualifiers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareQualifiers'), 'fareQualifiers', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypesfareQualifiers', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2088, 3), )

    
    fareQualifiers = property(__fareQualifiers.value, __fareQualifiers.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cancelEligibility uses Python identifier cancelEligibility
    __cancelEligibility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cancelEligibility'), 'cancelEligibility', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypescancelEligibility', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2096, 3), )

    
    cancelEligibility = property(__cancelEligibility.value, __cancelEligibility.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cancelFee uses Python identifier cancelFee
    __cancelFee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cancelFee'), 'cancelFee', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypescancelFee', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2097, 3), )

    
    cancelFee = property(__cancelFee.value, __cancelFee.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ticketingOptionsAvailable uses Python identifier ticketingOptionsAvailable
    __ticketingOptionsAvailable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionsAvailable'), 'ticketingOptionsAvailable', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypesticketingOptionsAvailable', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2098, 3), )

    
    ticketingOptionsAvailable = property(__ticketingOptionsAvailable.value, __ticketingOptionsAvailable.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareOrigin uses Python identifier fareOrigin
    __fareOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareOrigin'), 'fareOrigin', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypesfareOrigin', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2109, 3), )

    
    fareOrigin = property(__fareOrigin.value, __fareOrigin.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareOriginTerminals uses Python identifier fareOriginTerminals
    __fareOriginTerminals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminals'), 'fareOriginTerminals', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypesfareOriginTerminals', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2110, 12), )

    
    fareOriginTerminals = property(__fareOriginTerminals.value, __fareOriginTerminals.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareDestination uses Python identifier fareDestination
    __fareDestination = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareDestination'), 'fareDestination', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypesfareDestination', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2119, 3), )

    
    fareDestination = property(__fareDestination.value, __fareDestination.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareDestinationTerminals uses Python identifier fareDestinationTerminals
    __fareDestinationTerminals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminals'), 'fareDestinationTerminals', '__httprailgds_netwscommontypes_TicketableFareType_httprailgds_netwscommontypesfareDestinationTerminals', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2121, 12), )

    
    fareDestinationTerminals = property(__fareDestinationTerminals.value, __fareDestinationTerminals.set, None, None)

    
    # Attribute ticketableFareID uses Python identifier ticketableFareID
    __ticketableFareID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ticketableFareID'), 'ticketableFareID', '__httprailgds_netwscommontypes_TicketableFareType_ticketableFareID', pyxb.binding.datatypes.ID)
    __ticketableFareID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2131, 8)
    __ticketableFareID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2131, 8)
    
    ticketableFareID = property(__ticketableFareID.value, __ticketableFareID.set, None, 'This attribute should be required but it will remain optional for backwards compatibility.')

    _ElementMap.update({
        __totalPrice.name() : __totalPrice,
        __passengerReferences.name() : __passengerReferences,
        __prices.name() : __prices,
        __optionalPrices.name() : __optionalPrices,
        __costs.name() : __costs,
        __commissions.name() : __commissions,
        __commissionAmount.name() : __commissionAmount,
        __rules.name() : __rules,
        __fareQualifiers.name() : __fareQualifiers,
        __cancelEligibility.name() : __cancelEligibility,
        __cancelFee.name() : __cancelFee,
        __ticketingOptionsAvailable.name() : __ticketingOptionsAvailable,
        __fareOrigin.name() : __fareOrigin,
        __fareOriginTerminals.name() : __fareOriginTerminals,
        __fareDestination.name() : __fareDestination,
        __fareDestinationTerminals.name() : __fareDestinationTerminals
    })
    _AttributeMap.update({
        __ticketableFareID.name() : __ticketableFareID
    })
Namespace.addCategoryObject('typeBinding', 'TicketableFareType', TicketableFareType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2020, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passengerReference uses Python identifier passengerReference
    __passengerReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerReference'), 'passengerReference', '__httprailgds_netwscommontypes_CTD_ANON_63_httprailgds_netwscommontypespassengerReference', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2022, 6), )

    
    passengerReference = property(__passengerReference.value, __passengerReference.set, None, None)

    _ElementMap.update({
        __passengerReference.name() : __passengerReference
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2023, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passengerIDRef uses Python identifier passengerIDRef
    __passengerIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef'), 'passengerIDRef', '__httprailgds_netwscommontypes_CTD_ANON_64_httprailgds_netwscommontypespassengerIDRef', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2025, 9), )

    
    passengerIDRef = property(__passengerIDRef.value, __passengerIDRef.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}passengerTypeCode uses Python identifier passengerTypeCode
    __passengerTypeCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerTypeCode'), 'passengerTypeCode', '__httprailgds_netwscommontypes_CTD_ANON_64_httprailgds_netwscommontypespassengerTypeCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2026, 9), )

    
    passengerTypeCode = property(__passengerTypeCode.value, __passengerTypeCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareCodes uses Python identifier fareCodes
    __fareCodes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareCodes'), 'fareCodes', '__httprailgds_netwscommontypes_CTD_ANON_64_httprailgds_netwscommontypesfareCodes', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2027, 9), )

    
    fareCodes = property(__fareCodes.value, __fareCodes.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}passengerFareQualifiers uses Python identifier passengerFareQualifiers
    __passengerFareQualifiers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerFareQualifiers'), 'passengerFareQualifiers', '__httprailgds_netwscommontypes_CTD_ANON_64_httprailgds_netwscommontypespassengerFareQualifiers', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2035, 9), )

    
    passengerFareQualifiers = property(__passengerFareQualifiers.value, __passengerFareQualifiers.set, None, 'passengerFareQualifiers have been deprecated. They have been replaced by loyaltyCards.')

    
    # Element {http://railgds.net/ws/commontypes}fareQualifierIDRef uses Python identifier fareQualifierIDRef
    __fareQualifierIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareQualifierIDRef'), 'fareQualifierIDRef', '__httprailgds_netwscommontypes_CTD_ANON_64_httprailgds_netwscommontypesfareQualifierIDRef', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2047, 9), )

    
    fareQualifierIDRef = property(__fareQualifierIDRef.value, __fareQualifierIDRef.set, None, None)

    _ElementMap.update({
        __passengerIDRef.name() : __passengerIDRef,
        __passengerTypeCode.name() : __passengerTypeCode,
        __fareCodes.name() : __fareCodes,
        __passengerFareQualifiers.name() : __passengerFareQualifiers,
        __fareQualifierIDRef.name() : __fareQualifierIDRef
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2028, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareCode uses Python identifier fareCode
    __fareCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareCode'), 'fareCode', '__httprailgds_netwscommontypes_CTD_ANON_65_httprailgds_netwscommontypesfareCode', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2030, 12), )

    
    fareCode = property(__fareCode.value, __fareCode.set, None, None)

    _ElementMap.update({
        __fareCode.name() : __fareCode
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """passengerFareQualifiers have been deprecated. They have been replaced by loyaltyCards."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2039, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passengerFareQualifier uses Python identifier passengerFareQualifier
    __passengerFareQualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerFareQualifier'), 'passengerFareQualifier', '__httprailgds_netwscommontypes_CTD_ANON_66_httprailgds_netwscommontypespassengerFareQualifier', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2041, 12), )

    
    passengerFareQualifier = property(__passengerFareQualifier.value, __passengerFareQualifier.set, None, None)

    _ElementMap.update({
        __passengerFareQualifier.name() : __passengerFareQualifier
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2056, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}price uses Python identifier price
    __price = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'price'), 'price', '__httprailgds_netwscommontypes_CTD_ANON_67_httprailgds_netwscommontypesprice', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2058, 6), )

    
    price = property(__price.value, __price.set, None, None)

    _ElementMap.update({
        __price.name() : __price
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2064, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}optionalPrice uses Python identifier optionalPrice
    __optionalPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'optionalPrice'), 'optionalPrice', '__httprailgds_netwscommontypes_CTD_ANON_68_httprailgds_netwscommontypesoptionalPrice', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2066, 24), )

    
    optionalPrice = property(__optionalPrice.value, __optionalPrice.set, None, None)

    _ElementMap.update({
        __optionalPrice.name() : __optionalPrice
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2071, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cost'), 'cost', '__httprailgds_netwscommontypes_CTD_ANON_69_httprailgds_netwscommontypescost', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2073, 24), )

    
    cost = property(__cost.value, __cost.set, None, None)

    _ElementMap.update({
        __cost.name() : __cost
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2079, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}commission uses Python identifier commission
    __commission = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commission'), 'commission', '__httprailgds_netwscommontypes_CTD_ANON_70_httprailgds_netwscommontypescommission', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2081, 24), )

    
    commission = property(__commission.value, __commission.set, None, None)

    _ElementMap.update({
        __commission.name() : __commission
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2089, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareQualifier uses Python identifier fareQualifier
    __fareQualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareQualifier'), 'fareQualifier', '__httprailgds_netwscommontypes_CTD_ANON_71_httprailgds_netwscommontypesfareQualifier', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2091, 6), )

    
    fareQualifier = property(__fareQualifier.value, __fareQualifier.set, None, None)

    _ElementMap.update({
        __fareQualifier.name() : __fareQualifier
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2099, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute TOD uses Python identifier TOD
    __TOD = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TOD'), 'TOD', '__httprailgds_netwscommontypes_CTD_ANON_72_TOD', pyxb.binding.datatypes.boolean, required=True)
    __TOD._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2100, 5)
    __TOD._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2100, 5)
    
    TOD = property(__TOD.value, __TOD.set, None, None)

    
    # Attribute ETK uses Python identifier ETK
    __ETK = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ETK'), 'ETK', '__httprailgds_netwscommontypes_CTD_ANON_72_ETK', pyxb.binding.datatypes.boolean, required=True)
    __ETK._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2101, 5)
    __ETK._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2101, 5)
    
    ETK = property(__ETK.value, __ETK.set, None, None)

    
    # Attribute PAH uses Python identifier PAH
    __PAH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PAH'), 'PAH', '__httprailgds_netwscommontypes_CTD_ANON_72_PAH', pyxb.binding.datatypes.boolean, required=True)
    __PAH._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2102, 5)
    __PAH._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2102, 5)
    
    PAH = property(__PAH.value, __PAH.set, None, None)

    
    # Attribute EML uses Python identifier EML
    __EML = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EML'), 'EML', '__httprailgds_netwscommontypes_CTD_ANON_72_EML', pyxb.binding.datatypes.boolean)
    __EML._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2103, 5)
    __EML._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2103, 5)
    
    EML = property(__EML.value, __EML.set, None, None)

    
    # Attribute DEPARTURE_STATION_TOD uses Python identifier DEPARTURE_STATION_TOD
    __DEPARTURE_STATION_TOD = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DEPARTURE_STATION_TOD'), 'DEPARTURE_STATION_TOD', '__httprailgds_netwscommontypes_CTD_ANON_72_DEPARTURE_STATION_TOD', pyxb.binding.datatypes.boolean, required=True)
    __DEPARTURE_STATION_TOD._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2104, 5)
    __DEPARTURE_STATION_TOD._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2104, 5)
    
    DEPARTURE_STATION_TOD = property(__DEPARTURE_STATION_TOD.value, __DEPARTURE_STATION_TOD.set, None, None)

    
    # Attribute SMS uses Python identifier SMS
    __SMS = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SMS'), 'SMS', '__httprailgds_netwscommontypes_CTD_ANON_72_SMS', pyxb.binding.datatypes.boolean)
    __SMS._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2105, 20)
    __SMS._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2105, 20)
    
    SMS = property(__SMS.value, __SMS.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TOD.name() : __TOD,
        __ETK.name() : __ETK,
        __PAH.name() : __PAH,
        __EML.name() : __EML,
        __DEPARTURE_STATION_TOD.name() : __DEPARTURE_STATION_TOD,
        __SMS.name() : __SMS
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2111, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareOriginTerminal uses Python identifier fareOriginTerminal
    __fareOriginTerminal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminal'), 'fareOriginTerminal', '__httprailgds_netwscommontypes_CTD_ANON_73_httprailgds_netwscommontypesfareOriginTerminal', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2113, 24), )

    
    fareOriginTerminal = property(__fareOriginTerminal.value, __fareOriginTerminal.set, None, None)

    _ElementMap.update({
        __fareOriginTerminal.name() : __fareOriginTerminal
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2122, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareDestinationTerminal uses Python identifier fareDestinationTerminal
    __fareDestinationTerminal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminal'), 'fareDestinationTerminal', '__httprailgds_netwscommontypes_CTD_ANON_74_httprailgds_netwscommontypesfareDestinationTerminal', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2124, 24), )

    
    fareDestinationTerminal = property(__fareDestinationTerminal.value, __fareDestinationTerminal.set, None, None)

    _ElementMap.update({
        __fareDestinationTerminal.name() : __fareDestinationTerminal
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}PassTicketableFareType with content type ELEMENT_ONLY
class PassTicketableFareType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PassTicketableFareType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PassTicketableFareType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}totalPrice uses Python identifier totalPrice
    __totalPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), 'totalPrice', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypestotalPrice', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2140, 3), )

    
    totalPrice = property(__totalPrice.value, __totalPrice.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}passengerReferences uses Python identifier passengerReferences
    __passengerReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerReferences'), 'passengerReferences', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypespassengerReferences', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2141, 3), )

    
    passengerReferences = property(__passengerReferences.value, __passengerReferences.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}prices uses Python identifier prices
    __prices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'prices'), 'prices', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesprices', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2165, 3), )

    
    prices = property(__prices.value, __prices.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}optionalPrices uses Python identifier optionalPrices
    __optionalPrices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'optionalPrices'), 'optionalPrices', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesoptionalPrices', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2173, 12), )

    
    optionalPrices = property(__optionalPrices.value, __optionalPrices.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}costs uses Python identifier costs
    __costs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'costs'), 'costs', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypescosts', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2180, 12), )

    
    costs = property(__costs.value, __costs.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}commissions uses Python identifier commissions
    __commissions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commissions'), 'commissions', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypescommissions', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2188, 12), )

    
    commissions = property(__commissions.value, __commissions.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}commissionAmount uses Python identifier commissionAmount
    __commissionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commissionAmount'), 'commissionAmount', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypescommissionAmount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2196, 3), )

    
    commissionAmount = property(__commissionAmount.value, __commissionAmount.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}rules uses Python identifier rules
    __rules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rules'), 'rules', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesrules', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2197, 3), )

    
    rules = property(__rules.value, __rules.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareQualifiers uses Python identifier fareQualifiers
    __fareQualifiers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareQualifiers'), 'fareQualifiers', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesfareQualifiers', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2198, 3), )

    
    fareQualifiers = property(__fareQualifiers.value, __fareQualifiers.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cancelEligibility uses Python identifier cancelEligibility
    __cancelEligibility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cancelEligibility'), 'cancelEligibility', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypescancelEligibility', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2206, 3), )

    
    cancelEligibility = property(__cancelEligibility.value, __cancelEligibility.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cancelFee uses Python identifier cancelFee
    __cancelFee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cancelFee'), 'cancelFee', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypescancelFee', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2207, 3), )

    
    cancelFee = property(__cancelFee.value, __cancelFee.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ticketingOptionsAvailable uses Python identifier ticketingOptionsAvailable
    __ticketingOptionsAvailable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionsAvailable'), 'ticketingOptionsAvailable', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesticketingOptionsAvailable', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2208, 3), )

    
    ticketingOptionsAvailable = property(__ticketingOptionsAvailable.value, __ticketingOptionsAvailable.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareOrigin uses Python identifier fareOrigin
    __fareOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareOrigin'), 'fareOrigin', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesfareOrigin', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2219, 3), )

    
    fareOrigin = property(__fareOrigin.value, __fareOrigin.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareOriginTerminals uses Python identifier fareOriginTerminals
    __fareOriginTerminals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminals'), 'fareOriginTerminals', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesfareOriginTerminals', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2220, 12), )

    
    fareOriginTerminals = property(__fareOriginTerminals.value, __fareOriginTerminals.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareDestination uses Python identifier fareDestination
    __fareDestination = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareDestination'), 'fareDestination', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesfareDestination', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2229, 3), )

    
    fareDestination = property(__fareDestination.value, __fareDestination.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareDestinationTerminals uses Python identifier fareDestinationTerminals
    __fareDestinationTerminals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminals'), 'fareDestinationTerminals', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesfareDestinationTerminals', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2231, 12), )

    
    fareDestinationTerminals = property(__fareDestinationTerminals.value, __fareDestinationTerminals.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareStartDate uses Python identifier fareStartDate
    __fareStartDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareStartDate'), 'fareStartDate', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesfareStartDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2241, 3), )

    
    fareStartDate = property(__fareStartDate.value, __fareStartDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareExpirationDate uses Python identifier fareExpirationDate
    __fareExpirationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareExpirationDate'), 'fareExpirationDate', '__httprailgds_netwscommontypes_PassTicketableFareType_httprailgds_netwscommontypesfareExpirationDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2243, 12), )

    
    fareExpirationDate = property(__fareExpirationDate.value, __fareExpirationDate.set, None, None)

    
    # Attribute ticketableFareID uses Python identifier ticketableFareID
    __ticketableFareID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ticketableFareID'), 'ticketableFareID', '__httprailgds_netwscommontypes_PassTicketableFareType_ticketableFareID', pyxb.binding.datatypes.ID)
    __ticketableFareID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2246, 8)
    __ticketableFareID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2246, 8)
    
    ticketableFareID = property(__ticketableFareID.value, __ticketableFareID.set, None, 'This attribute should be required but it will remain optional for backwards compatibility.')

    _ElementMap.update({
        __totalPrice.name() : __totalPrice,
        __passengerReferences.name() : __passengerReferences,
        __prices.name() : __prices,
        __optionalPrices.name() : __optionalPrices,
        __costs.name() : __costs,
        __commissions.name() : __commissions,
        __commissionAmount.name() : __commissionAmount,
        __rules.name() : __rules,
        __fareQualifiers.name() : __fareQualifiers,
        __cancelEligibility.name() : __cancelEligibility,
        __cancelFee.name() : __cancelFee,
        __ticketingOptionsAvailable.name() : __ticketingOptionsAvailable,
        __fareOrigin.name() : __fareOrigin,
        __fareOriginTerminals.name() : __fareOriginTerminals,
        __fareDestination.name() : __fareDestination,
        __fareDestinationTerminals.name() : __fareDestinationTerminals,
        __fareStartDate.name() : __fareStartDate,
        __fareExpirationDate.name() : __fareExpirationDate
    })
    _AttributeMap.update({
        __ticketableFareID.name() : __ticketableFareID
    })
Namespace.addCategoryObject('typeBinding', 'PassTicketableFareType', PassTicketableFareType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2142, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passengerReference uses Python identifier passengerReference
    __passengerReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerReference'), 'passengerReference', '__httprailgds_netwscommontypes_CTD_ANON_75_httprailgds_netwscommontypespassengerReference', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2144, 6), )

    
    passengerReference = property(__passengerReference.value, __passengerReference.set, None, None)

    _ElementMap.update({
        __passengerReference.name() : __passengerReference
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2145, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passengerIDRef uses Python identifier passengerIDRef
    __passengerIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef'), 'passengerIDRef', '__httprailgds_netwscommontypes_CTD_ANON_76_httprailgds_netwscommontypespassengerIDRef', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2147, 9), )

    
    passengerIDRef = property(__passengerIDRef.value, __passengerIDRef.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}passengerTypeCode uses Python identifier passengerTypeCode
    __passengerTypeCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerTypeCode'), 'passengerTypeCode', '__httprailgds_netwscommontypes_CTD_ANON_76_httprailgds_netwscommontypespassengerTypeCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2148, 9), )

    
    passengerTypeCode = property(__passengerTypeCode.value, __passengerTypeCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareCodes uses Python identifier fareCodes
    __fareCodes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareCodes'), 'fareCodes', '__httprailgds_netwscommontypes_CTD_ANON_76_httprailgds_netwscommontypesfareCodes', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2149, 9), )

    
    fareCodes = property(__fareCodes.value, __fareCodes.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareQualifierIDRef uses Python identifier fareQualifierIDRef
    __fareQualifierIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareQualifierIDRef'), 'fareQualifierIDRef', '__httprailgds_netwscommontypes_CTD_ANON_76_httprailgds_netwscommontypesfareQualifierIDRef', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2157, 9), )

    
    fareQualifierIDRef = property(__fareQualifierIDRef.value, __fareQualifierIDRef.set, None, None)

    _ElementMap.update({
        __passengerIDRef.name() : __passengerIDRef,
        __passengerTypeCode.name() : __passengerTypeCode,
        __fareCodes.name() : __fareCodes,
        __fareQualifierIDRef.name() : __fareQualifierIDRef
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2150, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareCode uses Python identifier fareCode
    __fareCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareCode'), 'fareCode', '__httprailgds_netwscommontypes_CTD_ANON_77_httprailgds_netwscommontypesfareCode', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2152, 12), )

    
    fareCode = property(__fareCode.value, __fareCode.set, None, None)

    _ElementMap.update({
        __fareCode.name() : __fareCode
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2166, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}price uses Python identifier price
    __price = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'price'), 'price', '__httprailgds_netwscommontypes_CTD_ANON_78_httprailgds_netwscommontypesprice', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2168, 6), )

    
    price = property(__price.value, __price.set, None, None)

    _ElementMap.update({
        __price.name() : __price
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2174, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}optionalPrice uses Python identifier optionalPrice
    __optionalPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'optionalPrice'), 'optionalPrice', '__httprailgds_netwscommontypes_CTD_ANON_79_httprailgds_netwscommontypesoptionalPrice', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2176, 24), )

    
    optionalPrice = property(__optionalPrice.value, __optionalPrice.set, None, None)

    _ElementMap.update({
        __optionalPrice.name() : __optionalPrice
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2181, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}cost uses Python identifier cost
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cost'), 'cost', '__httprailgds_netwscommontypes_CTD_ANON_80_httprailgds_netwscommontypescost', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2183, 24), )

    
    cost = property(__cost.value, __cost.set, None, None)

    _ElementMap.update({
        __cost.name() : __cost
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2189, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}commission uses Python identifier commission
    __commission = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commission'), 'commission', '__httprailgds_netwscommontypes_CTD_ANON_81_httprailgds_netwscommontypescommission', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2191, 24), )

    
    commission = property(__commission.value, __commission.set, None, None)

    _ElementMap.update({
        __commission.name() : __commission
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2199, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareQualifier uses Python identifier fareQualifier
    __fareQualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareQualifier'), 'fareQualifier', '__httprailgds_netwscommontypes_CTD_ANON_82_httprailgds_netwscommontypesfareQualifier', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2201, 6), )

    
    fareQualifier = property(__fareQualifier.value, __fareQualifier.set, None, None)

    _ElementMap.update({
        __fareQualifier.name() : __fareQualifier
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_83 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2209, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute TOD uses Python identifier TOD
    __TOD = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TOD'), 'TOD', '__httprailgds_netwscommontypes_CTD_ANON_83_TOD', pyxb.binding.datatypes.boolean, required=True)
    __TOD._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2210, 5)
    __TOD._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2210, 5)
    
    TOD = property(__TOD.value, __TOD.set, None, None)

    
    # Attribute ETK uses Python identifier ETK
    __ETK = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ETK'), 'ETK', '__httprailgds_netwscommontypes_CTD_ANON_83_ETK', pyxb.binding.datatypes.boolean, required=True)
    __ETK._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2211, 5)
    __ETK._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2211, 5)
    
    ETK = property(__ETK.value, __ETK.set, None, None)

    
    # Attribute PAH uses Python identifier PAH
    __PAH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PAH'), 'PAH', '__httprailgds_netwscommontypes_CTD_ANON_83_PAH', pyxb.binding.datatypes.boolean, required=True)
    __PAH._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2212, 5)
    __PAH._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2212, 5)
    
    PAH = property(__PAH.value, __PAH.set, None, None)

    
    # Attribute EML uses Python identifier EML
    __EML = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'EML'), 'EML', '__httprailgds_netwscommontypes_CTD_ANON_83_EML', pyxb.binding.datatypes.boolean)
    __EML._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2213, 5)
    __EML._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2213, 5)
    
    EML = property(__EML.value, __EML.set, None, None)

    
    # Attribute DEPARTURE_STATION_TOD uses Python identifier DEPARTURE_STATION_TOD
    __DEPARTURE_STATION_TOD = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DEPARTURE_STATION_TOD'), 'DEPARTURE_STATION_TOD', '__httprailgds_netwscommontypes_CTD_ANON_83_DEPARTURE_STATION_TOD', pyxb.binding.datatypes.boolean, required=True)
    __DEPARTURE_STATION_TOD._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2214, 5)
    __DEPARTURE_STATION_TOD._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2214, 5)
    
    DEPARTURE_STATION_TOD = property(__DEPARTURE_STATION_TOD.value, __DEPARTURE_STATION_TOD.set, None, None)

    
    # Attribute SMS uses Python identifier SMS
    __SMS = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SMS'), 'SMS', '__httprailgds_netwscommontypes_CTD_ANON_83_SMS', pyxb.binding.datatypes.boolean)
    __SMS._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2215, 20)
    __SMS._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2215, 20)
    
    SMS = property(__SMS.value, __SMS.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TOD.name() : __TOD,
        __ETK.name() : __ETK,
        __PAH.name() : __PAH,
        __EML.name() : __EML,
        __DEPARTURE_STATION_TOD.name() : __DEPARTURE_STATION_TOD,
        __SMS.name() : __SMS
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2221, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareOriginTerminal uses Python identifier fareOriginTerminal
    __fareOriginTerminal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminal'), 'fareOriginTerminal', '__httprailgds_netwscommontypes_CTD_ANON_84_httprailgds_netwscommontypesfareOriginTerminal', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2223, 24), )

    
    fareOriginTerminal = property(__fareOriginTerminal.value, __fareOriginTerminal.set, None, None)

    _ElementMap.update({
        __fareOriginTerminal.name() : __fareOriginTerminal
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2232, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareDestinationTerminal uses Python identifier fareDestinationTerminal
    __fareDestinationTerminal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminal'), 'fareDestinationTerminal', '__httprailgds_netwscommontypes_CTD_ANON_85_httprailgds_netwscommontypesfareDestinationTerminal', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2234, 24), )

    
    fareDestinationTerminal = property(__fareDestinationTerminal.value, __fareDestinationTerminal.set, None, None)

    _ElementMap.update({
        __fareDestinationTerminal.name() : __fareDestinationTerminal
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}SupplyChannelPassengerReferenceType with content type ELEMENT_ONLY
class SupplyChannelPassengerReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}SupplyChannelPassengerReferenceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SupplyChannelPassengerReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2253, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}passengerIDRef uses Python identifier passengerIDRef
    __passengerIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef'), 'passengerIDRef', '__httprailgds_netwscommontypes_SupplyChannelPassengerReferenceType_httprailgds_netwscommontypespassengerIDRef', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2255, 12), )

    
    passengerIDRef = property(__passengerIDRef.value, __passengerIDRef.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}nameFirst uses Python identifier nameFirst
    __nameFirst = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nameFirst'), 'nameFirst', '__httprailgds_netwscommontypes_SupplyChannelPassengerReferenceType_httprailgds_netwscommontypesnameFirst', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2256, 12), )

    
    nameFirst = property(__nameFirst.value, __nameFirst.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}nameMiddle uses Python identifier nameMiddle
    __nameMiddle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nameMiddle'), 'nameMiddle', '__httprailgds_netwscommontypes_SupplyChannelPassengerReferenceType_httprailgds_netwscommontypesnameMiddle', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2257, 12), )

    
    nameMiddle = property(__nameMiddle.value, __nameMiddle.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}nameLast uses Python identifier nameLast
    __nameLast = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nameLast'), 'nameLast', '__httprailgds_netwscommontypes_SupplyChannelPassengerReferenceType_httprailgds_netwscommontypesnameLast', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2258, 12), )

    
    nameLast = property(__nameLast.value, __nameLast.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}loyaltyCards uses Python identifier loyaltyCards
    __loyaltyCards = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCards'), 'loyaltyCards', '__httprailgds_netwscommontypes_SupplyChannelPassengerReferenceType_httprailgds_netwscommontypesloyaltyCards', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2259, 12), )

    
    loyaltyCards = property(__loyaltyCards.value, __loyaltyCards.set, None, None)

    _ElementMap.update({
        __passengerIDRef.name() : __passengerIDRef,
        __nameFirst.name() : __nameFirst,
        __nameMiddle.name() : __nameMiddle,
        __nameLast.name() : __nameLast,
        __loyaltyCards.name() : __loyaltyCards
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SupplyChannelPassengerReferenceType', SupplyChannelPassengerReferenceType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2260, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}loyaltyCard uses Python identifier loyaltyCard
    __loyaltyCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard'), 'loyaltyCard', '__httprailgds_netwscommontypes_CTD_ANON_86_httprailgds_netwscommontypesloyaltyCard', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2262, 24), )

    
    loyaltyCard = property(__loyaltyCard.value, __loyaltyCard.set, None, None)

    _ElementMap.update({
        __loyaltyCard.name() : __loyaltyCard
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}TravelPointPairType with content type ELEMENT_ONLY
class TravelPointPairType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TravelPointPairType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TravelPointPairType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2297, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}originTravelPoint uses Python identifier originTravelPoint
    __originTravelPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint'), 'originTravelPoint', '__httprailgds_netwscommontypes_TravelPointPairType_httprailgds_netwscommontypesoriginTravelPoint', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2299, 3), )

    
    originTravelPoint = property(__originTravelPoint.value, __originTravelPoint.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}destinationTravelPoint uses Python identifier destinationTravelPoint
    __destinationTravelPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint'), 'destinationTravelPoint', '__httprailgds_netwscommontypes_TravelPointPairType_httprailgds_netwscommontypesdestinationTravelPoint', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2300, 3), )

    
    destinationTravelPoint = property(__destinationTravelPoint.value, __destinationTravelPoint.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}departureDateTimeWindow uses Python identifier departureDateTimeWindow
    __departureDateTimeWindow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'departureDateTimeWindow'), 'departureDateTimeWindow', '__httprailgds_netwscommontypes_TravelPointPairType_httprailgds_netwscommontypesdepartureDateTimeWindow', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2301, 3), )

    
    departureDateTimeWindow = property(__departureDateTimeWindow.value, __departureDateTimeWindow.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}arrivalDateTimeWindow uses Python identifier arrivalDateTimeWindow
    __arrivalDateTimeWindow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'arrivalDateTimeWindow'), 'arrivalDateTimeWindow', '__httprailgds_netwscommontypes_TravelPointPairType_httprailgds_netwscommontypesarrivalDateTimeWindow', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2302, 3), )

    
    arrivalDateTimeWindow = property(__arrivalDateTimeWindow.value, __arrivalDateTimeWindow.set, None, None)

    _ElementMap.update({
        __originTravelPoint.name() : __originTravelPoint,
        __destinationTravelPoint.name() : __destinationTravelPoint,
        __departureDateTimeWindow.name() : __departureDateTimeWindow,
        __arrivalDateTimeWindow.name() : __arrivalDateTimeWindow
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TravelPointPairType', TravelPointPairType)


# Complex type {http://railgds.net/ws/commontypes}BaseTravelPointPairType with content type ELEMENT_ONLY
class BaseTravelPointPairType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseTravelPointPairType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseTravelPointPairType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2305, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}originTravelPoint uses Python identifier originTravelPoint
    __originTravelPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint'), 'originTravelPoint', '__httprailgds_netwscommontypes_BaseTravelPointPairType_httprailgds_netwscommontypesoriginTravelPoint', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2307, 6), )

    
    originTravelPoint = property(__originTravelPoint.value, __originTravelPoint.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}destinationTravelPoint uses Python identifier destinationTravelPoint
    __destinationTravelPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint'), 'destinationTravelPoint', '__httprailgds_netwscommontypes_BaseTravelPointPairType_httprailgds_netwscommontypesdestinationTravelPoint', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2308, 6), )

    
    destinationTravelPoint = property(__destinationTravelPoint.value, __destinationTravelPoint.set, None, None)

    _ElementMap.update({
        __originTravelPoint.name() : __originTravelPoint,
        __destinationTravelPoint.name() : __destinationTravelPoint
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BaseTravelPointPairType', BaseTravelPointPairType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_87 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2344, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}amenity uses Python identifier amenity
    __amenity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amenity'), 'amenity', '__httprailgds_netwscommontypes_CTD_ANON_87_httprailgds_netwscommontypesamenity', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2346, 6), )

    
    amenity = property(__amenity.value, __amenity.set, None, None)

    _ElementMap.update({
        __amenity.name() : __amenity
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2356, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}viaTravelPoint uses Python identifier viaTravelPoint
    __viaTravelPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'viaTravelPoint'), 'viaTravelPoint', '__httprailgds_netwscommontypes_CTD_ANON_88_httprailgds_netwscommontypesviaTravelPoint', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2358, 6), )

    
    viaTravelPoint = property(__viaTravelPoint.value, __viaTravelPoint.set, None, None)

    _ElementMap.update({
        __viaTravelPoint.name() : __viaTravelPoint
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}MarketingInformationType with content type EMPTY
class MarketingInformationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}MarketingInformationType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MarketingInformationType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2377, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute serviceCode uses Python identifier serviceCode
    __serviceCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'serviceCode'), 'serviceCode', '__httprailgds_netwscommontypes_MarketingInformationType_serviceCode', pyxb.binding.datatypes.anySimpleType, required=True)
    __serviceCode._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2379, 8)
    __serviceCode._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2379, 8)
    
    serviceCode = property(__serviceCode.value, __serviceCode.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __serviceCode.name() : __serviceCode
    })
Namespace.addCategoryObject('typeBinding', 'MarketingInformationType', MarketingInformationType)


# Complex type {http://railgds.net/ws/commontypes}TravelDocumentType with content type ELEMENT_ONLY
class TravelDocumentType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TravelDocumentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TravelDocumentType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2381, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}documentNumber uses Python identifier documentNumber
    __documentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'documentNumber'), 'documentNumber', '__httprailgds_netwscommontypes_TravelDocumentType_httprailgds_netwscommontypesdocumentNumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2383, 3), )

    
    documentNumber = property(__documentNumber.value, __documentNumber.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}documentType uses Python identifier documentType
    __documentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'documentType'), 'documentType', '__httprailgds_netwscommontypes_TravelDocumentType_httprailgds_netwscommontypesdocumentType', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2384, 3), )

    
    documentType = property(__documentType.value, __documentType.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}expirationDate uses Python identifier expirationDate
    __expirationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expirationDate'), 'expirationDate', '__httprailgds_netwscommontypes_TravelDocumentType_httprailgds_netwscommontypesexpirationDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2395, 3), )

    
    expirationDate = property(__expirationDate.value, __expirationDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}issuingAuthority uses Python identifier issuingAuthority
    __issuingAuthority = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'issuingAuthority'), 'issuingAuthority', '__httprailgds_netwscommontypes_TravelDocumentType_httprailgds_netwscommontypesissuingAuthority', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2396, 3), )

    
    issuingAuthority = property(__issuingAuthority.value, __issuingAuthority.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}documentAffiliation uses Python identifier documentAffiliation
    __documentAffiliation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'documentAffiliation'), 'documentAffiliation', '__httprailgds_netwscommontypes_TravelDocumentType_httprailgds_netwscommontypesdocumentAffiliation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2404, 3), )

    
    documentAffiliation = property(__documentAffiliation.value, __documentAffiliation.set, None, None)

    _ElementMap.update({
        __documentNumber.name() : __documentNumber,
        __documentType.name() : __documentType,
        __expirationDate.name() : __expirationDate,
        __issuingAuthority.name() : __issuingAuthority,
        __documentAffiliation.name() : __documentAffiliation
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TravelDocumentType', TravelDocumentType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2397, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}countryCode uses Python identifier countryCode
    __countryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'countryCode'), 'countryCode', '__httprailgds_netwscommontypes_CTD_ANON_89_httprailgds_netwscommontypescountryCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2399, 6), )

    
    countryCode = property(__countryCode.value, __countryCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}stateProv uses Python identifier stateProv
    __stateProv = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'stateProv'), 'stateProv', '__httprailgds_netwscommontypes_CTD_ANON_89_httprailgds_netwscommontypesstateProv', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2400, 6), )

    
    stateProv = property(__stateProv.value, __stateProv.set, None, None)

    _ElementMap.update({
        __countryCode.name() : __countryCode,
        __stateProv.name() : __stateProv
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_90 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2430, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute code uses Python identifier code
    __code = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httprailgds_netwscommontypes_CTD_ANON_90_code', pyxb.binding.datatypes.string)
    __code._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2433, 36)
    __code._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2433, 36)
    
    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __code.name() : __code
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2465, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}coupon uses Python identifier coupon
    __coupon = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coupon'), 'coupon', '__httprailgds_netwscommontypes_CTD_ANON_91_httprailgds_netwscommontypescoupon', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2467, 24), )

    
    coupon = property(__coupon.value, __coupon.set, None, None)

    _ElementMap.update({
        __coupon.name() : __coupon
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_92 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.base64Binary
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2476, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.base64Binary
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CTD_ANON_92_type', pyxb.binding.datatypes.string, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2479, 28)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2479, 28)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })



# Complex type {http://railgds.net/ws/commontypes}VoucherType with content type ELEMENT_ONLY
class VoucherType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}VoucherType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VoucherType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2501, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httprailgds_netwscommontypes_VoucherType_httprailgds_netwscommontypesnumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2503, 3), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}validationCode uses Python identifier validationCode
    __validationCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'validationCode'), 'validationCode', '__httprailgds_netwscommontypes_VoucherType_httprailgds_netwscommontypesvalidationCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2504, 12), )

    
    validationCode = property(__validationCode.value, __validationCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}recipientName uses Python identifier recipientName
    __recipientName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'recipientName'), 'recipientName', '__httprailgds_netwscommontypes_VoucherType_httprailgds_netwscommontypesrecipientName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2505, 3), )

    
    recipientName = property(__recipientName.value, __recipientName.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}expirationDate uses Python identifier expirationDate
    __expirationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expirationDate'), 'expirationDate', '__httprailgds_netwscommontypes_VoucherType_httprailgds_netwscommontypesexpirationDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2506, 3), )

    
    expirationDate = property(__expirationDate.value, __expirationDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httprailgds_netwscommontypes_VoucherType_httprailgds_netwscommontypesvalue', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2507, 12), )

    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __number.name() : __number,
        __validationCode.name() : __validationCode,
        __recipientName.name() : __recipientName,
        __expirationDate.name() : __expirationDate,
        __value.name() : __value
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VoucherType', VoucherType)


# Complex type {http://railgds.net/ws/commontypes}TypesType with content type ELEMENT_ONLY
class TypesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TypesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TypesType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2556, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__httprailgds_netwscommontypes_TypesType_httprailgds_netwscommontypestype', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2558, 12), )

    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TypesType', TypesType)


# Complex type {http://railgds.net/ws/commontypes}PaymentRequirementsType with content type ELEMENT_ONLY
class PaymentRequirementsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PaymentRequirementsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PaymentRequirementsType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2561, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}acceptableFormsOfPayment uses Python identifier acceptableFormsOfPayment
    __acceptableFormsOfPayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'acceptableFormsOfPayment'), 'acceptableFormsOfPayment', '__httprailgds_netwscommontypes_PaymentRequirementsType_httprailgds_netwscommontypesacceptableFormsOfPayment', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2563, 12), )

    
    acceptableFormsOfPayment = property(__acceptableFormsOfPayment.value, __acceptableFormsOfPayment.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}confirmationUponAddPayment uses Python identifier confirmationUponAddPayment
    __confirmationUponAddPayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'confirmationUponAddPayment'), 'confirmationUponAddPayment', '__httprailgds_netwscommontypes_PaymentRequirementsType_httprailgds_netwscommontypesconfirmationUponAddPayment', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2571, 12), )

    
    confirmationUponAddPayment = property(__confirmationUponAddPayment.value, __confirmationUponAddPayment.set, None, None)

    _ElementMap.update({
        __acceptableFormsOfPayment.name() : __acceptableFormsOfPayment,
        __confirmationUponAddPayment.name() : __confirmationUponAddPayment
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PaymentRequirementsType', PaymentRequirementsType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2564, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}formOfPayment uses Python identifier formOfPayment
    __formOfPayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'formOfPayment'), 'formOfPayment', '__httprailgds_netwscommontypes_CTD_ANON_93_httprailgds_netwscommontypesformOfPayment', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2566, 24), )

    
    formOfPayment = property(__formOfPayment.value, __formOfPayment.set, None, None)

    _ElementMap.update({
        __formOfPayment.name() : __formOfPayment
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}BaseTransactionFeeType with content type ELEMENT_ONLY
class BaseTransactionFeeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseTransactionFeeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseTransactionFeeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2576, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fee uses Python identifier fee
    __fee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fee'), 'fee', '__httprailgds_netwscommontypes_BaseTransactionFeeType_httprailgds_netwscommontypesfee', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2578, 3), )

    
    fee = property(__fee.value, __fee.set, None, None)

    
    # Attribute transactionFeeID uses Python identifier transactionFeeID
    __transactionFeeID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'transactionFeeID'), 'transactionFeeID', '__httprailgds_netwscommontypes_BaseTransactionFeeType_transactionFeeID', pyxb.binding.datatypes.ID, required=True)
    __transactionFeeID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2580, 2)
    __transactionFeeID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2580, 2)
    
    transactionFeeID = property(__transactionFeeID.value, __transactionFeeID.set, None, None)

    _ElementMap.update({
        __fee.name() : __fee
    })
    _AttributeMap.update({
        __transactionFeeID.name() : __transactionFeeID
    })
Namespace.addCategoryObject('typeBinding', 'BaseTransactionFeeType', BaseTransactionFeeType)


# Complex type {http://railgds.net/ws/commontypes}ConfirmationOptionsType with content type ELEMENT_ONLY
class ConfirmationOptionsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ConfirmationOptionsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConfirmationOptionsType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2584, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}creditCardOption uses Python identifier creditCardOption
    __creditCardOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'creditCardOption'), 'creditCardOption', '__httprailgds_netwscommontypes_ConfirmationOptionsType_httprailgds_netwscommontypescreditCardOption', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2586, 3), )

    
    creditCardOption = property(__creditCardOption.value, __creditCardOption.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}debitCardOption uses Python identifier debitCardOption
    __debitCardOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debitCardOption'), 'debitCardOption', '__httprailgds_netwscommontypes_ConfirmationOptionsType_httprailgds_netwscommontypesdebitCardOption', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2593, 3), )

    
    debitCardOption = property(__debitCardOption.value, __debitCardOption.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}loyaltyCardOption uses Python identifier loyaltyCardOption
    __loyaltyCardOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCardOption'), 'loyaltyCardOption', '__httprailgds_netwscommontypes_ConfirmationOptionsType_httprailgds_netwscommontypesloyaltyCardOption', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2601, 3), )

    
    loyaltyCardOption = property(__loyaltyCardOption.value, __loyaltyCardOption.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}personalInformationCardOption uses Python identifier personalInformationCardOption
    __personalInformationCardOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'personalInformationCardOption'), 'personalInformationCardOption', '__httprailgds_netwscommontypes_ConfirmationOptionsType_httprailgds_netwscommontypespersonalInformationCardOption', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2616, 3), )

    
    personalInformationCardOption = property(__personalInformationCardOption.value, __personalInformationCardOption.set, None, None)

    _ElementMap.update({
        __creditCardOption.name() : __creditCardOption,
        __debitCardOption.name() : __debitCardOption,
        __loyaltyCardOption.name() : __loyaltyCardOption,
        __personalInformationCardOption.name() : __personalInformationCardOption
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ConfirmationOptionsType', ConfirmationOptionsType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_94 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2587, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}types uses Python identifier types
    __types = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'types'), 'types', '__httprailgds_netwscommontypes_CTD_ANON_94_httprailgds_netwscommontypestypes', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2589, 6), )

    
    types = property(__types.value, __types.set, None, None)

    _ElementMap.update({
        __types.name() : __types
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_95 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2594, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}types uses Python identifier types
    __types = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'types'), 'types', '__httprailgds_netwscommontypes_CTD_ANON_95_httprailgds_netwscommontypestypes', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2596, 6), )

    
    types = property(__types.value, __types.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}sortCodeRequired uses Python identifier sortCodeRequired
    __sortCodeRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sortCodeRequired'), 'sortCodeRequired', '__httprailgds_netwscommontypes_CTD_ANON_95_httprailgds_netwscommontypessortCodeRequired', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2597, 6), )

    
    sortCodeRequired = property(__sortCodeRequired.value, __sortCodeRequired.set, None, None)

    _ElementMap.update({
        __types.name() : __types,
        __sortCodeRequired.name() : __sortCodeRequired
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_96 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2602, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}programs uses Python identifier programs
    __programs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'programs'), 'programs', '__httprailgds_netwscommontypes_CTD_ANON_96_httprailgds_netwscommontypesprograms', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2604, 6), )

    
    programs = property(__programs.value, __programs.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}expirationDateRequired uses Python identifier expirationDateRequired
    __expirationDateRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expirationDateRequired'), 'expirationDateRequired', '__httprailgds_netwscommontypes_CTD_ANON_96_httprailgds_netwscommontypesexpirationDateRequired', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2612, 6), )

    
    expirationDateRequired = property(__expirationDateRequired.value, __expirationDateRequired.set, None, None)

    _ElementMap.update({
        __programs.name() : __programs,
        __expirationDateRequired.name() : __expirationDateRequired
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_97 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2605, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}program uses Python identifier program
    __program = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'program'), 'program', '__httprailgds_netwscommontypes_CTD_ANON_97_httprailgds_netwscommontypesprogram', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2607, 9), )

    
    program = property(__program.value, __program.set, None, None)

    _ElementMap.update({
        __program.name() : __program
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_98 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2617, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}countryCodes uses Python identifier countryCodes
    __countryCodes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'countryCodes'), 'countryCodes', '__httprailgds_netwscommontypes_CTD_ANON_98_httprailgds_netwscommontypescountryCodes', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2619, 6), )

    
    countryCodes = property(__countryCodes.value, __countryCodes.set, None, None)

    _ElementMap.update({
        __countryCodes.name() : __countryCodes
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_99 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2620, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}countryCode uses Python identifier countryCode
    __countryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'countryCode'), 'countryCode', '__httprailgds_netwscommontypes_CTD_ANON_99_httprailgds_netwscommontypescountryCode', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2622, 9), )

    
    countryCode = property(__countryCode.value, __countryCode.set, None, None)

    _ElementMap.update({
        __countryCode.name() : __countryCode
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}FulfillmentPhoneNumberType with content type SIMPLE
class FulfillmentPhoneNumberType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}FulfillmentPhoneNumberType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FulfillmentPhoneNumberType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2632, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute callingCountryCode uses Python identifier callingCountryCode
    __callingCountryCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'callingCountryCode'), 'callingCountryCode', '__httprailgds_netwscommontypes_FulfillmentPhoneNumberType_callingCountryCode', pyxb.binding.datatypes.integer)
    __callingCountryCode._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2635, 16)
    __callingCountryCode._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2635, 16)
    
    callingCountryCode = property(__callingCountryCode.value, __callingCountryCode.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __callingCountryCode.name() : __callingCountryCode
    })
Namespace.addCategoryObject('typeBinding', 'FulfillmentPhoneNumberType', FulfillmentPhoneNumberType)


# Complex type {http://railgds.net/ws/commontypes}ConfirmationInformationRequiredOverrideType with content type ELEMENT_ONLY
class ConfirmationInformationRequiredOverrideType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ConfirmationInformationRequiredOverrideType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConfirmationInformationRequiredOverrideType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2640, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}ticketingOptionCode uses Python identifier ticketingOptionCode
    __ticketingOptionCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionCode'), 'ticketingOptionCode', '__httprailgds_netwscommontypes_ConfirmationInformationRequiredOverrideType_httprailgds_netwscommontypesticketingOptionCode', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2642, 3), )

    
    ticketingOptionCode = property(__ticketingOptionCode.value, __ticketingOptionCode.set, None, None)

    _ElementMap.update({
        __ticketingOptionCode.name() : __ticketingOptionCode
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ConfirmationInformationRequiredOverrideType', ConfirmationInformationRequiredOverrideType)


# Complex type {http://railgds.net/ws/commontypes}TicketingCodeConfirmationRequiredOverride with content type SIMPLE
class TicketingCodeConfirmationRequiredOverride (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TicketingCodeConfirmationRequiredOverride with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TicketingCodeConfirmationRequiredOverride')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2646, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TicketingCodeConfirmationRequiredOverride', TicketingCodeConfirmationRequiredOverride)


# Complex type {http://railgds.net/ws/commontypes}BaseTravelPointRestrictionsType with content type ELEMENT_ONLY
class BaseTravelPointRestrictionsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseTravelPointRestrictionsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseTravelPointRestrictionsType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2682, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}carrierRestriction uses Python identifier carrierRestriction
    __carrierRestriction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'carrierRestriction'), 'carrierRestriction', '__httprailgds_netwscommontypes_BaseTravelPointRestrictionsType_httprailgds_netwscommontypescarrierRestriction', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2684, 20), )

    
    carrierRestriction = property(__carrierRestriction.value, __carrierRestriction.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}equipmentTypeRestrictions uses Python identifier equipmentTypeRestrictions
    __equipmentTypeRestrictions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'equipmentTypeRestrictions'), 'equipmentTypeRestrictions', '__httprailgds_netwscommontypes_BaseTravelPointRestrictionsType_httprailgds_netwscommontypesequipmentTypeRestrictions', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2685, 20), )

    
    equipmentTypeRestrictions = property(__equipmentTypeRestrictions.value, __equipmentTypeRestrictions.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}routingRestrictions uses Python identifier routingRestrictions
    __routingRestrictions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingRestrictions'), 'routingRestrictions', '__httprailgds_netwscommontypes_BaseTravelPointRestrictionsType_httprailgds_netwscommontypesroutingRestrictions', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2686, 8), )

    
    routingRestrictions = property(__routingRestrictions.value, __routingRestrictions.set, None, None)

    _ElementMap.update({
        __carrierRestriction.name() : __carrierRestriction,
        __equipmentTypeRestrictions.name() : __equipmentTypeRestrictions,
        __routingRestrictions.name() : __routingRestrictions
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BaseTravelPointRestrictionsType', BaseTravelPointRestrictionsType)


# Complex type {http://railgds.net/ws/commontypes}RevisionType with content type ELEMENT_ONLY
class RevisionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}RevisionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RevisionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2690, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}reason uses Python identifier reason
    __reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'reason'), 'reason', '__httprailgds_netwscommontypes_RevisionType_httprailgds_netwscommontypesreason', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2692, 3), )

    
    reason = property(__reason.value, __reason.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}revisedDepartureDateTime uses Python identifier revisedDepartureDateTime
    __revisedDepartureDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'revisedDepartureDateTime'), 'revisedDepartureDateTime', '__httprailgds_netwscommontypes_RevisionType_httprailgds_netwscommontypesrevisedDepartureDateTime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2693, 3), )

    
    revisedDepartureDateTime = property(__revisedDepartureDateTime.value, __revisedDepartureDateTime.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}revisedArrivalDateTime uses Python identifier revisedArrivalDateTime
    __revisedArrivalDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'revisedArrivalDateTime'), 'revisedArrivalDateTime', '__httprailgds_netwscommontypes_RevisionType_httprailgds_netwscommontypesrevisedArrivalDateTime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2694, 3), )

    
    revisedArrivalDateTime = property(__revisedArrivalDateTime.value, __revisedArrivalDateTime.set, None, None)

    
    # Attribute travelSegmentIDRef uses Python identifier travelSegmentIDRef
    __travelSegmentIDRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'travelSegmentIDRef'), 'travelSegmentIDRef', '__httprailgds_netwscommontypes_RevisionType_travelSegmentIDRef', pyxb.binding.datatypes.IDREF, required=True)
    __travelSegmentIDRef._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2696, 2)
    __travelSegmentIDRef._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2696, 2)
    
    travelSegmentIDRef = property(__travelSegmentIDRef.value, __travelSegmentIDRef.set, None, None)

    _ElementMap.update({
        __reason.name() : __reason,
        __revisedDepartureDateTime.name() : __revisedDepartureDateTime,
        __revisedArrivalDateTime.name() : __revisedArrivalDateTime
    })
    _AttributeMap.update({
        __travelSegmentIDRef.name() : __travelSegmentIDRef
    })
Namespace.addCategoryObject('typeBinding', 'RevisionType', RevisionType)


# Complex type {http://railgds.net/ws/commontypes}RevisionReasonType with content type MIXED
class RevisionReasonType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}RevisionReasonType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RevisionReasonType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2699, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute code uses Python identifier code
    __code = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httprailgds_netwscommontypes_RevisionReasonType_code', pyxb.binding.datatypes.anySimpleType)
    __code._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2700, 2)
    __code._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2700, 2)
    
    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __code.name() : __code
    })
Namespace.addCategoryObject('typeBinding', 'RevisionReasonType', RevisionReasonType)


# Complex type {http://railgds.net/ws/commontypes}AmenityType with content type SIMPLE
class AmenityType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}AmenityType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AmenityType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 38, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_AmenityType_type', STD_ANON_, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 41, 14)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 41, 14)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'AmenityType', AmenityType)


# Complex type {http://railgds.net/ws/commontypes}BaseCreditCardType with content type ELEMENT_ONLY
class BaseCreditCardType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseCreditCardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseCreditCardType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 79, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httprailgds_netwscommontypes_BaseCreditCardType_httprailgds_netwscommontypesnumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 81, 12), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}expirationYearMonth uses Python identifier expirationYearMonth
    __expirationYearMonth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth'), 'expirationYearMonth', '__httprailgds_netwscommontypes_BaseCreditCardType_httprailgds_netwscommontypesexpirationYearMonth', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 82, 3), )

    
    expirationYearMonth = property(__expirationYearMonth.value, __expirationYearMonth.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cardholderName uses Python identifier cardholderName
    __cardholderName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderName'), 'cardholderName', '__httprailgds_netwscommontypes_BaseCreditCardType_httprailgds_netwscommontypescardholderName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 83, 3), )

    
    cardholderName = property(__cardholderName.value, __cardholderName.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}billingAddress uses Python identifier billingAddress
    __billingAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billingAddress'), 'billingAddress', '__httprailgds_netwscommontypes_BaseCreditCardType_httprailgds_netwscommontypesbillingAddress', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 84, 3), )

    
    billingAddress = property(__billingAddress.value, __billingAddress.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}siteCard uses Python identifier siteCard
    __siteCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteCard'), 'siteCard', '__httprailgds_netwscommontypes_BaseCreditCardType_httprailgds_netwscommontypessiteCard', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 85, 3), )

    
    siteCard = property(__siteCard.value, __siteCard.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}paymentToken uses Python identifier paymentToken
    __paymentToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentToken'), 'paymentToken', '__httprailgds_netwscommontypes_BaseCreditCardType_httprailgds_netwscommontypespaymentToken', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 86, 12), )

    
    paymentToken = property(__paymentToken.value, __paymentToken.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_BaseCreditCardType_type', STD_ANON_2, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 88, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 88, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __number.name() : __number,
        __expirationYearMonth.name() : __expirationYearMonth,
        __cardholderName.name() : __cardholderName,
        __billingAddress.name() : __billingAddress,
        __siteCard.name() : __siteCard,
        __paymentToken.name() : __paymentToken
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'BaseCreditCardType', BaseCreditCardType)


# Complex type {http://railgds.net/ws/commontypes}BaseDebitCardType with content type ELEMENT_ONLY
class BaseDebitCardType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseDebitCardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseDebitCardType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 102, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'number'), 'number', '__httprailgds_netwscommontypes_BaseDebitCardType_httprailgds_netwscommontypesnumber', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 104, 12), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}startYearMonth uses Python identifier startYearMonth
    __startYearMonth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startYearMonth'), 'startYearMonth', '__httprailgds_netwscommontypes_BaseDebitCardType_httprailgds_netwscommontypesstartYearMonth', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 105, 3), )

    
    startYearMonth = property(__startYearMonth.value, __startYearMonth.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}expirationYearMonth uses Python identifier expirationYearMonth
    __expirationYearMonth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth'), 'expirationYearMonth', '__httprailgds_netwscommontypes_BaseDebitCardType_httprailgds_netwscommontypesexpirationYearMonth', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 106, 3), )

    
    expirationYearMonth = property(__expirationYearMonth.value, __expirationYearMonth.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cardholderName uses Python identifier cardholderName
    __cardholderName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cardholderName'), 'cardholderName', '__httprailgds_netwscommontypes_BaseDebitCardType_httprailgds_netwscommontypescardholderName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 107, 3), )

    
    cardholderName = property(__cardholderName.value, __cardholderName.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}billingAddress uses Python identifier billingAddress
    __billingAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'billingAddress'), 'billingAddress', '__httprailgds_netwscommontypes_BaseDebitCardType_httprailgds_netwscommontypesbillingAddress', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 108, 3), )

    
    billingAddress = property(__billingAddress.value, __billingAddress.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}paymentToken uses Python identifier paymentToken
    __paymentToken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentToken'), 'paymentToken', '__httprailgds_netwscommontypes_BaseDebitCardType_httprailgds_netwscommontypespaymentToken', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 109, 12), )

    
    paymentToken = property(__paymentToken.value, __paymentToken.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_BaseDebitCardType_type', STD_ANON_3, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 111, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 111, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __number.name() : __number,
        __startYearMonth.name() : __startYearMonth,
        __expirationYearMonth.name() : __expirationYearMonth,
        __cardholderName.name() : __cardholderName,
        __billingAddress.name() : __billingAddress,
        __paymentToken.name() : __paymentToken
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'BaseDebitCardType', BaseDebitCardType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_100 (BaseConfirmationCardType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 135, 16)
    _ElementMap = BaseConfirmationCardType._ElementMap.copy()
    _AttributeMap = BaseConfirmationCardType._AttributeMap.copy()
    # Base type is BaseConfirmationCardType
    
    # Element cardholderNameLast ({http://railgds.net/ws/commontypes}cardholderNameLast) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element cardholderNameFirst ({http://railgds.net/ws/commontypes}cardholderNameFirst) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element cardholderNameMiddle ({http://railgds.net/ws/commontypes}cardholderNameMiddle) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element cardNumber ({http://railgds.net/ws/commontypes}cardNumber) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element paymentToken ({http://railgds.net/ws/commontypes}paymentToken) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element expirationYearMonth ({http://railgds.net/ws/commontypes}expirationYearMonth) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_101 (BaseConfirmationCardType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 142, 16)
    _ElementMap = BaseConfirmationCardType._ElementMap.copy()
    _AttributeMap = BaseConfirmationCardType._AttributeMap.copy()
    # Base type is BaseConfirmationCardType
    
    # Element cardholderNameLast ({http://railgds.net/ws/commontypes}cardholderNameLast) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element cardholderNameFirst ({http://railgds.net/ws/commontypes}cardholderNameFirst) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element cardholderNameMiddle ({http://railgds.net/ws/commontypes}cardholderNameMiddle) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element cardNumber ({http://railgds.net/ws/commontypes}cardNumber) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element paymentToken ({http://railgds.net/ws/commontypes}paymentToken) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element expirationYearMonth ({http://railgds.net/ws/commontypes}expirationYearMonth) inherited from {http://railgds.net/ws/commontypes}BaseConfirmationCardType
    
    # Element {http://railgds.net/ws/commontypes}sortCode uses Python identifier sortCode
    __sortCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sortCode'), 'sortCode', '__httprailgds_netwscommontypes_CTD_ANON_101_httprailgds_netwscommontypessortCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 146, 32), )

    
    sortCode = property(__sortCode.value, __sortCode.set, None, None)

    _ElementMap.update({
        __sortCode.name() : __sortCode
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}BookingRecordType with content type ELEMENT_ONLY
class BookingRecordType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BookingRecordType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BookingRecordType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 214, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}updateable uses Python identifier updateable
    __updateable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updateable'), 'updateable', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypesupdateable', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 216, 12), )

    
    updateable = property(__updateable.value, __updateable.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}bookingDate uses Python identifier bookingDate
    __bookingDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bookingDate'), 'bookingDate', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypesbookingDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 217, 3), )

    
    bookingDate = property(__bookingDate.value, __bookingDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}departureDate uses Python identifier departureDate
    __departureDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'departureDate'), 'departureDate', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypesdepartureDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 218, 3), )

    
    departureDate = property(__departureDate.value, __departureDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}numberOfOrders uses Python identifier numberOfOrders
    __numberOfOrders = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberOfOrders'), 'numberOfOrders', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypesnumberOfOrders', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 219, 3), )

    
    numberOfOrders = property(__numberOfOrders.value, __numberOfOrders.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}revenueTotal uses Python identifier revenueTotal
    __revenueTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'revenueTotal'), 'revenueTotal', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypesrevenueTotal', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 220, 3), )

    
    revenueTotal = property(__revenueTotal.value, __revenueTotal.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}receiptsTotal uses Python identifier receiptsTotal
    __receiptsTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'receiptsTotal'), 'receiptsTotal', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypesreceiptsTotal', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 221, 3), )

    
    receiptsTotal = property(__receiptsTotal.value, __receiptsTotal.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}passengers uses Python identifier passengers
    __passengers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengers'), 'passengers', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypespassengers', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 222, 3), )

    
    passengers = property(__passengers.value, __passengers.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}orders uses Python identifier orders
    __orders = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orders'), 'orders', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypesorders', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 230, 3), )

    
    orders = property(__orders.value, __orders.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}paymentRequirements uses Python identifier paymentRequirements
    __paymentRequirements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentRequirements'), 'paymentRequirements', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypespaymentRequirements', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 323, 3), )

    
    paymentRequirements = property(__paymentRequirements.value, __paymentRequirements.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}serviceFeeAllowed uses Python identifier serviceFeeAllowed
    __serviceFeeAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceFeeAllowed'), 'serviceFeeAllowed', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypesserviceFeeAllowed', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 353, 12), )

    
    serviceFeeAllowed = property(__serviceFeeAllowed.value, __serviceFeeAllowed.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}financials uses Python identifier financials
    __financials = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'financials'), 'financials', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypesfinancials', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 354, 3), )

    
    financials = property(__financials.value, __financials.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}externalIdentification uses Python identifier externalIdentification
    __externalIdentification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'externalIdentification'), 'externalIdentification', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypesexternalIdentification', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 410, 3), )

    
    externalIdentification = property(__externalIdentification.value, __externalIdentification.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}customInformation uses Python identifier customInformation
    __customInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customInformation'), 'customInformation', '__httprailgds_netwscommontypes_BookingRecordType_httprailgds_netwscommontypescustomInformation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 411, 3), )

    
    customInformation = property(__customInformation.value, __customInformation.set, None, None)

    
    # Attribute recordLocator uses Python identifier recordLocator
    __recordLocator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'recordLocator'), 'recordLocator', '__httprailgds_netwscommontypes_BookingRecordType_recordLocator', pyxb.binding.datatypes.anySimpleType, required=True)
    __recordLocator._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 413, 2)
    __recordLocator._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 413, 2)
    
    recordLocator = property(__recordLocator.value, __recordLocator.set, None, None)

    
    # Attribute status uses Python identifier status
    __status = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__httprailgds_netwscommontypes_BookingRecordType_status', STD_ANON_5, required=True)
    __status._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 414, 2)
    __status._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 414, 2)
    
    status = property(__status.value, __status.set, None, None)

    _ElementMap.update({
        __updateable.name() : __updateable,
        __bookingDate.name() : __bookingDate,
        __departureDate.name() : __departureDate,
        __numberOfOrders.name() : __numberOfOrders,
        __revenueTotal.name() : __revenueTotal,
        __receiptsTotal.name() : __receiptsTotal,
        __passengers.name() : __passengers,
        __orders.name() : __orders,
        __paymentRequirements.name() : __paymentRequirements,
        __serviceFeeAllowed.name() : __serviceFeeAllowed,
        __financials.name() : __financials,
        __externalIdentification.name() : __externalIdentification,
        __customInformation.name() : __customInformation
    })
    _AttributeMap.update({
        __recordLocator.name() : __recordLocator,
        __status.name() : __status
    })
Namespace.addCategoryObject('typeBinding', 'BookingRecordType', BookingRecordType)


# Complex type {http://railgds.net/ws/commontypes}AddedOrderNoteType with content type ELEMENT_ONLY
class AddedOrderNoteType (OrderNoteType):
    """Complex type {http://railgds.net/ws/commontypes}AddedOrderNoteType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AddedOrderNoteType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 454, 4)
    _ElementMap = OrderNoteType._ElementMap.copy()
    _AttributeMap = OrderNoteType._AttributeMap.copy()
    # Base type is OrderNoteType
    
    # Element message ({http://railgds.net/ws/commontypes}message) inherited from {http://railgds.net/ws/commontypes}OrderNoteType
    
    # Element createdDateTime ({http://railgds.net/ws/commontypes}createdDateTime) inherited from {http://railgds.net/ws/commontypes}OrderNoteType
    
    # Attribute type inherited from {http://railgds.net/ws/commontypes}OrderNoteType
    
    # Attribute orderID uses Python identifier orderID
    __orderID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'orderID'), 'orderID', '__httprailgds_netwscommontypes_AddedOrderNoteType_orderID', pyxb.binding.datatypes.string, required=True)
    __orderID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 457, 16)
    __orderID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 457, 16)
    
    orderID = property(__orderID.value, __orderID.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __orderID.name() : __orderID
    })
Namespace.addCategoryObject('typeBinding', 'AddedOrderNoteType', AddedOrderNoteType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_102 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 486, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}voucherAmount uses Python identifier voucherAmount
    __voucherAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'voucherAmount'), 'voucherAmount', '__httprailgds_netwscommontypes_CTD_ANON_102_httprailgds_netwscommontypesvoucherAmount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 491, 24), )

    
    voucherAmount = property(__voucherAmount.value, __voucherAmount.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}voucherValue uses Python identifier voucherValue
    __voucherValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'voucherValue'), 'voucherValue', '__httprailgds_netwscommontypes_CTD_ANON_102_httprailgds_netwscommontypesvoucherValue', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 492, 24), )

    
    voucherValue = property(__voucherValue.value, __voucherValue.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CTD_ANON_102_type', RefundTargetType, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 494, 20)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 494, 20)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __voucherAmount.name() : __voucherAmount,
        __voucherValue.name() : __voucherValue
    })
    _AttributeMap.update({
        __type.name() : __type
    })



# Complex type {http://railgds.net/ws/commontypes}SelectedCancellationOptionType with content type ELEMENT_ONLY
class SelectedCancellationOptionType (BaseCancellationOptionType):
    """Complex type {http://railgds.net/ws/commontypes}SelectedCancellationOptionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SelectedCancellationOptionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 500, 4)
    _ElementMap = BaseCancellationOptionType._ElementMap.copy()
    _AttributeMap = BaseCancellationOptionType._AttributeMap.copy()
    # Base type is BaseCancellationOptionType
    
    # Element refundTarget ({http://railgds.net/ws/commontypes}refundTarget) inherited from {http://railgds.net/ws/commontypes}BaseCancellationOptionType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SelectedCancellationOptionType', SelectedCancellationOptionType)


# Complex type {http://railgds.net/ws/commontypes}CancellationOptionType with content type ELEMENT_ONLY
class CancellationOptionType (BaseCancellationOptionType):
    """Complex type {http://railgds.net/ws/commontypes}CancellationOptionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CancellationOptionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 506, 4)
    _ElementMap = BaseCancellationOptionType._ElementMap.copy()
    _AttributeMap = BaseCancellationOptionType._AttributeMap.copy()
    # Base type is BaseCancellationOptionType
    
    # Element refundTarget ({http://railgds.net/ws/commontypes}refundTarget) inherited from {http://railgds.net/ws/commontypes}BaseCancellationOptionType
    
    # Element {http://railgds.net/ws/commontypes}penalty uses Python identifier penalty
    __penalty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'penalty'), 'penalty', '__httprailgds_netwscommontypes_CancellationOptionType_httprailgds_netwscommontypespenalty', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 510, 33), )

    
    penalty = property(__penalty.value, __penalty.set, None, None)

    _ElementMap.update({
        __penalty.name() : __penalty
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CancellationOptionType', CancellationOptionType)


# Complex type {http://railgds.net/ws/commontypes}DistanceType with content type SIMPLE
class DistanceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}DistanceType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DistanceType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 748, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.double
    
    # Attribute unitOfMeasure uses Python identifier unitOfMeasure
    __unitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'unitOfMeasure'), 'unitOfMeasure', '__httprailgds_netwscommontypes_DistanceType_unitOfMeasure', STD_ANON_9, required=True)
    __unitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 751, 4)
    __unitOfMeasure._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 751, 4)
    
    unitOfMeasure = property(__unitOfMeasure.value, __unitOfMeasure.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __unitOfMeasure.name() : __unitOfMeasure
    })
Namespace.addCategoryObject('typeBinding', 'DistanceType', DistanceType)


# Complex type {http://railgds.net/ws/commontypes}ECheckType with content type ELEMENT_ONLY
class ECheckType (BaseECheckType):
    """Complex type {http://railgds.net/ws/commontypes}ECheckType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECheckType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 779, 1)
    _ElementMap = BaseECheckType._ElementMap.copy()
    _AttributeMap = BaseECheckType._AttributeMap.copy()
    # Base type is BaseECheckType
    
    # Element number ({http://railgds.net/ws/commontypes}number) inherited from {http://railgds.net/ws/commontypes}BaseECheckType
    
    # Element {http://railgds.net/ws/commontypes}paymentProcessorInfo uses Python identifier paymentProcessorInfo
    __paymentProcessorInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessorInfo'), 'paymentProcessorInfo', '__httprailgds_netwscommontypes_ECheckType_httprailgds_netwscommontypespaymentProcessorInfo', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 783, 5), )

    
    paymentProcessorInfo = property(__paymentProcessorInfo.value, __paymentProcessorInfo.set, None, None)

    _ElementMap.update({
        __paymentProcessorInfo.name() : __paymentProcessorInfo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECheckType', ECheckType)


# Complex type {http://railgds.net/ws/commontypes}EquipmentTypeType with content type SIMPLE
class EquipmentTypeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}EquipmentTypeType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EquipmentTypeType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 788, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute code uses Python identifier code
    __code = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httprailgds_netwscommontypes_EquipmentTypeType_code', STD_ANON_10, required=True)
    __code._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 791, 4)
    __code._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 791, 4)
    
    code = property(__code.value, __code.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __code.name() : __code
    })
Namespace.addCategoryObject('typeBinding', 'EquipmentTypeType', EquipmentTypeType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_103 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 902, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareApplicabilityText uses Python identifier fareApplicabilityText
    __fareApplicabilityText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilityText'), 'fareApplicabilityText', '__httprailgds_netwscommontypes_CTD_ANON_103_httprailgds_netwscommontypesfareApplicabilityText', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 904, 36), )

    
    fareApplicabilityText = property(__fareApplicabilityText.value, __fareApplicabilityText.set, None, None)

    
    # Attribute outbound uses Python identifier outbound
    __outbound = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'outbound'), 'outbound', '__httprailgds_netwscommontypes_CTD_ANON_103_outbound', FareApplicabilityRestrictionType)
    __outbound._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 906, 32)
    __outbound._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 906, 32)
    
    outbound = property(__outbound.value, __outbound.set, None, None)

    
    # Attribute return uses Python identifier return_
    __return = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'return'), 'return_', '__httprailgds_netwscommontypes_CTD_ANON_103_return', FareApplicabilityRestrictionType)
    __return._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 907, 32)
    __return._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 907, 32)
    
    return_ = property(__return.value, __return.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CTD_ANON_103_type', FareApplicabilityBasisType)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 908, 32)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 908, 32)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __fareApplicabilityText.name() : __fareApplicabilityText
    })
    _AttributeMap.update({
        __outbound.name() : __outbound,
        __return.name() : __return,
        __type.name() : __type
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_104 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 950, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}fareApplicabilityText uses Python identifier fareApplicabilityText
    __fareApplicabilityText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilityText'), 'fareApplicabilityText', '__httprailgds_netwscommontypes_CTD_ANON_104_httprailgds_netwscommontypesfareApplicabilityText', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 952, 36), )

    
    fareApplicabilityText = property(__fareApplicabilityText.value, __fareApplicabilityText.set, None, None)

    
    # Attribute outbound uses Python identifier outbound
    __outbound = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'outbound'), 'outbound', '__httprailgds_netwscommontypes_CTD_ANON_104_outbound', FareApplicabilityRestrictionType)
    __outbound._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 954, 32)
    __outbound._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 954, 32)
    
    outbound = property(__outbound.value, __outbound.set, None, None)

    
    # Attribute return uses Python identifier return_
    __return = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'return'), 'return_', '__httprailgds_netwscommontypes_CTD_ANON_104_return', FareApplicabilityRestrictionType)
    __return._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 955, 32)
    __return._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 955, 32)
    
    return_ = property(__return.value, __return.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CTD_ANON_104_type', FareApplicabilityBasisType)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 956, 32)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 956, 32)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __fareApplicabilityText.name() : __fareApplicabilityText
    })
    _AttributeMap.update({
        __outbound.name() : __outbound,
        __return.name() : __return,
        __type.name() : __type
    })



# Complex type {http://railgds.net/ws/commontypes}FareQualifierType with content type ELEMENT_ONLY
class FareQualifierType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}FareQualifierType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FareQualifierType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 984, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}program uses Python identifier program
    __program = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'program'), 'program', '__httprailgds_netwscommontypes_FareQualifierType_httprailgds_netwscommontypesprogram', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 986, 3), )

    
    program = property(__program.value, __program.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'identifier'), 'identifier', '__httprailgds_netwscommontypes_FareQualifierType_httprailgds_netwscommontypesidentifier', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 987, 3), )

    
    identifier = property(__identifier.value, __identifier.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}authorizationNumbers uses Python identifier authorizationNumbers
    __authorizationNumbers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authorizationNumbers'), 'authorizationNumbers', '__httprailgds_netwscommontypes_FareQualifierType_httprailgds_netwscommontypesauthorizationNumbers', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 988, 12), )

    
    authorizationNumbers = property(__authorizationNumbers.value, __authorizationNumbers.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}passengerReferences uses Python identifier passengerReferences
    __passengerReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'passengerReferences'), 'passengerReferences', '__httprailgds_netwscommontypes_FareQualifierType_httprailgds_netwscommontypespassengerReferences', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 989, 12), )

    
    passengerReferences = property(__passengerReferences.value, __passengerReferences.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_FareQualifierType_type', STD_ANON_11, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 997, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 997, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute fareQualifierID uses Python identifier fareQualifierID
    __fareQualifierID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'fareQualifierID'), 'fareQualifierID', '__httprailgds_netwscommontypes_FareQualifierType_fareQualifierID', pyxb.binding.datatypes.ID)
    __fareQualifierID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1006, 2)
    __fareQualifierID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1006, 2)
    
    fareQualifierID = property(__fareQualifierID.value, __fareQualifierID.set, None, None)

    
    # Attribute authorizationNumberRequired uses Python identifier authorizationNumberRequired
    __authorizationNumberRequired = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'authorizationNumberRequired'), 'authorizationNumberRequired', '__httprailgds_netwscommontypes_FareQualifierType_authorizationNumberRequired', pyxb.binding.datatypes.boolean)
    __authorizationNumberRequired._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1007, 2)
    __authorizationNumberRequired._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1007, 2)
    
    authorizationNumberRequired = property(__authorizationNumberRequired.value, __authorizationNumberRequired.set, None, None)

    
    # Attribute identifierRequired uses Python identifier identifierRequired
    __identifierRequired = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'identifierRequired'), 'identifierRequired', '__httprailgds_netwscommontypes_FareQualifierType_identifierRequired', pyxb.binding.datatypes.boolean)
    __identifierRequired._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1008, 2)
    __identifierRequired._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1008, 2)
    
    identifierRequired = property(__identifierRequired.value, __identifierRequired.set, None, None)

    
    # Attribute cardsUsed uses Python identifier cardsUsed
    __cardsUsed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'cardsUsed'), 'cardsUsed', '__httprailgds_netwscommontypes_FareQualifierType_cardsUsed', pyxb.binding.datatypes.integer)
    __cardsUsed._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1009, 2)
    __cardsUsed._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1009, 2)
    
    cardsUsed = property(__cardsUsed.value, __cardsUsed.set, None, None)

    _ElementMap.update({
        __program.name() : __program,
        __identifier.name() : __identifier,
        __authorizationNumbers.name() : __authorizationNumbers,
        __passengerReferences.name() : __passengerReferences
    })
    _AttributeMap.update({
        __type.name() : __type,
        __fareQualifierID.name() : __fareQualifierID,
        __authorizationNumberRequired.name() : __authorizationNumberRequired,
        __identifierRequired.name() : __identifierRequired,
        __cardsUsed.name() : __cardsUsed
    })
Namespace.addCategoryObject('typeBinding', 'FareQualifierType', FareQualifierType)


# Complex type {http://railgds.net/ws/commontypes}FormOfPaymentType with content type SIMPLE
class FormOfPaymentType (pyxb.binding.basis.complexTypeDefinition):
    """Acceptable Values for 'CC' type: AX, CA, VI, DI, UA, MCAcceptable Values for 'DB' type: DS, DV, DM"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FormOfPaymentType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1051, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_FormOfPaymentType_type', STD_ANON_12)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1058, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1058, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute authenticatePayerRequired uses Python identifier authenticatePayerRequired
    __authenticatePayerRequired = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'authenticatePayerRequired'), 'authenticatePayerRequired', '__httprailgds_netwscommontypes_FormOfPaymentType_authenticatePayerRequired', pyxb.binding.datatypes.boolean)
    __authenticatePayerRequired._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1070, 4)
    __authenticatePayerRequired._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1070, 4)
    
    authenticatePayerRequired = property(__authenticatePayerRequired.value, __authenticatePayerRequired.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __authenticatePayerRequired.name() : __authenticatePayerRequired
    })
Namespace.addCategoryObject('typeBinding', 'FormOfPaymentType', FormOfPaymentType)


# Complex type {http://railgds.net/ws/commontypes}MoneyType with content type SIMPLE
class MoneyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}MoneyType with content type SIMPLE"""
    _TypeDefinition = MoneyValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MoneyType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1190, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MoneyValueType
    
    # Attribute currency uses Python identifier currency
    __currency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'currency'), 'currency', '__httprailgds_netwscommontypes_MoneyType_currency', pyxb.binding.datatypes.string)
    __currency._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1193, 4)
    __currency._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1193, 4)
    
    currency = property(__currency.value, __currency.set, None, None)

    
    # Attribute currencySymbol uses Python identifier currencySymbol
    __currencySymbol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'currencySymbol'), 'currencySymbol', '__httprailgds_netwscommontypes_MoneyType_currencySymbol', pyxb.binding.datatypes.string)
    __currencySymbol._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1194, 4)
    __currencySymbol._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1194, 4)
    
    currencySymbol = property(__currencySymbol.value, __currencySymbol.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __currency.name() : __currency,
        __currencySymbol.name() : __currencySymbol
    })
Namespace.addCategoryObject('typeBinding', 'MoneyType', MoneyType)


# Complex type {http://railgds.net/ws/commontypes}OptionalPriceType with content type ELEMENT_ONLY
class OptionalPriceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}OptionalPriceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OptionalPriceType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1246, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}price uses Python identifier price
    __price = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'price'), 'price', '__httprailgds_netwscommontypes_OptionalPriceType_httprailgds_netwscommontypesprice', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1248, 12), )

    
    price = property(__price.value, __price.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httprailgds_netwscommontypes_OptionalPriceType_httprailgds_netwscommontypesdescription', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1267, 12), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}applicableTravelSegments uses Python identifier applicableTravelSegments
    __applicableTravelSegments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'applicableTravelSegments'), 'applicableTravelSegments', '__httprailgds_netwscommontypes_OptionalPriceType_httprailgds_netwscommontypesapplicableTravelSegments', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1268, 12), )

    
    applicableTravelSegments = property(__applicableTravelSegments.value, __applicableTravelSegments.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}rules uses Python identifier rules
    __rules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rules'), 'rules', '__httprailgds_netwscommontypes_OptionalPriceType_httprailgds_netwscommontypesrules', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1277, 12), )

    
    rules = property(__rules.value, __rules.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fareCodes uses Python identifier fareCodes
    __fareCodes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fareCodes'), 'fareCodes', '__httprailgds_netwscommontypes_OptionalPriceType_httprailgds_netwscommontypesfareCodes', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1278, 9), )

    
    fareCodes = property(__fareCodes.value, __fareCodes.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ticketingOptionsAvailable uses Python identifier ticketingOptionsAvailable
    __ticketingOptionsAvailable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionsAvailable'), 'ticketingOptionsAvailable', '__httprailgds_netwscommontypes_OptionalPriceType_httprailgds_netwscommontypesticketingOptionsAvailable', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1285, 9), )

    
    ticketingOptionsAvailable = property(__ticketingOptionsAvailable.value, __ticketingOptionsAvailable.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}consumptionRules uses Python identifier consumptionRules
    __consumptionRules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'consumptionRules'), 'consumptionRules', '__httprailgds_netwscommontypes_OptionalPriceType_httprailgds_netwscommontypesconsumptionRules', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1286, 9), )

    
    consumptionRules = property(__consumptionRules.value, __consumptionRules.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}maximumBookableQuantity uses Python identifier maximumBookableQuantity
    __maximumBookableQuantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maximumBookableQuantity'), 'maximumBookableQuantity', '__httprailgds_netwscommontypes_OptionalPriceType_httprailgds_netwscommontypesmaximumBookableQuantity', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1287, 9), )

    
    maximumBookableQuantity = property(__maximumBookableQuantity.value, __maximumBookableQuantity.set, None, None)

    
    # Attribute optionalPriceID uses Python identifier optionalPriceID
    __optionalPriceID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'optionalPriceID'), 'optionalPriceID', '__httprailgds_netwscommontypes_OptionalPriceType_optionalPriceID', pyxb.binding.datatypes.ID)
    __optionalPriceID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1289, 5)
    __optionalPriceID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1289, 5)
    
    optionalPriceID = property(__optionalPriceID.value, __optionalPriceID.set, None, None)

    
    # Attribute quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'quantity'), 'quantity', '__httprailgds_netwscommontypes_OptionalPriceType_quantity', pyxb.binding.datatypes.int)
    __quantity._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1290, 5)
    __quantity._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1290, 5)
    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Attribute category uses Python identifier category
    __category = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'category'), 'category', '__httprailgds_netwscommontypes_OptionalPriceType_category', STD_ANON_15)
    __category._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1291, 8)
    __category._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1291, 8)
    
    category = property(__category.value, __category.set, None, None)

    _ElementMap.update({
        __price.name() : __price,
        __description.name() : __description,
        __applicableTravelSegments.name() : __applicableTravelSegments,
        __rules.name() : __rules,
        __fareCodes.name() : __fareCodes,
        __ticketingOptionsAvailable.name() : __ticketingOptionsAvailable,
        __consumptionRules.name() : __consumptionRules,
        __maximumBookableQuantity.name() : __maximumBookableQuantity
    })
    _AttributeMap.update({
        __optionalPriceID.name() : __optionalPriceID,
        __quantity.name() : __quantity,
        __category.name() : __category
    })
Namespace.addCategoryObject('typeBinding', 'OptionalPriceType', OptionalPriceType)


# Complex type {http://railgds.net/ws/commontypes}AgeBreakConsumptionRuleType with content type ELEMENT_ONLY
class AgeBreakConsumptionRuleType (ConsumptionRuleType):
    """Complex type {http://railgds.net/ws/commontypes}AgeBreakConsumptionRuleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AgeBreakConsumptionRuleType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1332, 1)
    _ElementMap = ConsumptionRuleType._ElementMap.copy()
    _AttributeMap = ConsumptionRuleType._AttributeMap.copy()
    # Base type is ConsumptionRuleType
    
    # Element {http://railgds.net/ws/commontypes}minAge uses Python identifier minAge
    __minAge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'minAge'), 'minAge', '__httprailgds_netwscommontypes_AgeBreakConsumptionRuleType_httprailgds_netwscommontypesminAge', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1336, 5), )

    
    minAge = property(__minAge.value, __minAge.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}maxAge uses Python identifier maxAge
    __maxAge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxAge'), 'maxAge', '__httprailgds_netwscommontypes_AgeBreakConsumptionRuleType_httprailgds_netwscommontypesmaxAge', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1337, 5), )

    
    maxAge = property(__maxAge.value, __maxAge.set, None, None)

    
    # Attribute minQuantity inherited from {http://railgds.net/ws/commontypes}ConsumptionRuleType
    
    # Attribute maxQuantity inherited from {http://railgds.net/ws/commontypes}ConsumptionRuleType
    _ElementMap.update({
        __minAge.name() : __minAge,
        __maxAge.name() : __maxAge
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'AgeBreakConsumptionRuleType', AgeBreakConsumptionRuleType)


# Complex type {http://railgds.net/ws/commontypes}TotalPassengersConsumptionRuleType with content type EMPTY
class TotalPassengersConsumptionRuleType (ConsumptionRuleType):
    """Complex type {http://railgds.net/ws/commontypes}TotalPassengersConsumptionRuleType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TotalPassengersConsumptionRuleType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1342, 1)
    _ElementMap = ConsumptionRuleType._ElementMap.copy()
    _AttributeMap = ConsumptionRuleType._AttributeMap.copy()
    # Base type is ConsumptionRuleType
    
    # Attribute minQuantity inherited from {http://railgds.net/ws/commontypes}ConsumptionRuleType
    
    # Attribute maxQuantity inherited from {http://railgds.net/ws/commontypes}ConsumptionRuleType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TotalPassengersConsumptionRuleType', TotalPassengersConsumptionRuleType)


# Complex type {http://railgds.net/ws/commontypes}OrderType with content type ELEMENT_ONLY
class OrderType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}OrderType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OrderType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1415, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}supplyChannelRecordLocator uses Python identifier supplyChannelRecordLocator
    __supplyChannelRecordLocator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'supplyChannelRecordLocator'), 'supplyChannelRecordLocator', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypessupplyChannelRecordLocator', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1417, 3), )

    
    supplyChannelRecordLocator = property(__supplyChannelRecordLocator.value, __supplyChannelRecordLocator.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}supplierLocator uses Python identifier supplierLocator
    __supplierLocator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'supplierLocator'), 'supplierLocator', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypessupplierLocator', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1418, 12), )

    
    supplierLocator = property(__supplierLocator.value, __supplierLocator.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}dateBooked uses Python identifier dateBooked
    __dateBooked = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateBooked'), 'dateBooked', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesdateBooked', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1419, 3), )

    
    dateBooked = property(__dateBooked.value, __dateBooked.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}dateCancelled uses Python identifier dateCancelled
    __dateCancelled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateCancelled'), 'dateCancelled', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesdateCancelled', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1420, 12), )

    
    dateCancelled = property(__dateCancelled.value, __dateCancelled.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}serviceAlerts uses Python identifier serviceAlerts
    __serviceAlerts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceAlerts'), 'serviceAlerts', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesserviceAlerts', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1421, 3), )

    
    serviceAlerts = property(__serviceAlerts.value, __serviceAlerts.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}holdExpiration uses Python identifier holdExpiration
    __holdExpiration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'holdExpiration'), 'holdExpiration', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesholdExpiration', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1429, 3), )

    
    holdExpiration = property(__holdExpiration.value, __holdExpiration.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fulfillmentInformation uses Python identifier fulfillmentInformation
    __fulfillmentInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fulfillmentInformation'), 'fulfillmentInformation', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesfulfillmentInformation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1430, 3), )

    
    fulfillmentInformation = property(__fulfillmentInformation.value, __fulfillmentInformation.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}refundEligibility uses Python identifier refundEligibility
    __refundEligibility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'refundEligibility'), 'refundEligibility', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesrefundEligibility', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1443, 3), )

    
    refundEligibility = property(__refundEligibility.value, __refundEligibility.set, None, 'refundEligibility is deprecated. Please use cancellationSummary instead.')

    
    # Element {http://railgds.net/ws/commontypes}cancellationSummary uses Python identifier cancellationSummary
    __cancellationSummary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cancellationSummary'), 'cancellationSummary', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypescancellationSummary', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1480, 12), )

    
    cancellationSummary = property(__cancellationSummary.value, __cancellationSummary.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}rules uses Python identifier rules
    __rules = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rules'), 'rules', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesrules', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1482, 3), )

    
    rules = property(__rules.value, __rules.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}shipmentTrackingInformation uses Python identifier shipmentTrackingInformation
    __shipmentTrackingInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shipmentTrackingInformation'), 'shipmentTrackingInformation', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesshipmentTrackingInformation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1484, 3), )

    
    shipmentTrackingInformation = property(__shipmentTrackingInformation.value, __shipmentTrackingInformation.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}cancellationReason uses Python identifier cancellationReason
    __cancellationReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cancellationReason'), 'cancellationReason', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypescancellationReason', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1492, 3), )

    
    cancellationReason = property(__cancellationReason.value, __cancellationReason.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}internalCancellationReason uses Python identifier internalCancellationReason
    __internalCancellationReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'internalCancellationReason'), 'internalCancellationReason', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesinternalCancellationReason', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1494, 3), )

    
    internalCancellationReason = property(__internalCancellationReason.value, __internalCancellationReason.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}availableTicketLanguages uses Python identifier availableTicketLanguages
    __availableTicketLanguages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'availableTicketLanguages'), 'availableTicketLanguages', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesavailableTicketLanguages', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1496, 12), )

    
    availableTicketLanguages = property(__availableTicketLanguages.value, __availableTicketLanguages.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}isInventoryCanceled uses Python identifier isInventoryCanceled
    __isInventoryCanceled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isInventoryCanceled'), 'isInventoryCanceled', '__httprailgds_netwscommontypes_OrderType_httprailgds_netwscommontypesisInventoryCanceled', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1504, 12), )

    
    isInventoryCanceled = property(__isInventoryCanceled.value, __isInventoryCanceled.set, None, None)

    
    # Attribute orderID uses Python identifier orderID
    __orderID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'orderID'), 'orderID', '__httprailgds_netwscommontypes_OrderType_orderID', pyxb.binding.datatypes.ID, required=True)
    __orderID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1506, 2)
    __orderID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1506, 2)
    
    orderID = property(__orderID.value, __orderID.set, None, None)

    
    # Attribute status uses Python identifier status
    __status = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__httprailgds_netwscommontypes_OrderType_status', STD_ANON_19, required=True)
    __status._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1507, 2)
    __status._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1507, 2)
    
    status = property(__status.value, __status.set, None, None)

    
    # Attribute originalOrderID uses Python identifier originalOrderID
    __originalOrderID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'originalOrderID'), 'originalOrderID', '__httprailgds_netwscommontypes_OrderType_originalOrderID', pyxb.binding.datatypes.IDREF)
    __originalOrderID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1525, 2)
    __originalOrderID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1525, 2)
    
    originalOrderID = property(__originalOrderID.value, __originalOrderID.set, None, None)

    _ElementMap.update({
        __supplyChannelRecordLocator.name() : __supplyChannelRecordLocator,
        __supplierLocator.name() : __supplierLocator,
        __dateBooked.name() : __dateBooked,
        __dateCancelled.name() : __dateCancelled,
        __serviceAlerts.name() : __serviceAlerts,
        __holdExpiration.name() : __holdExpiration,
        __fulfillmentInformation.name() : __fulfillmentInformation,
        __refundEligibility.name() : __refundEligibility,
        __cancellationSummary.name() : __cancellationSummary,
        __rules.name() : __rules,
        __shipmentTrackingInformation.name() : __shipmentTrackingInformation,
        __cancellationReason.name() : __cancellationReason,
        __internalCancellationReason.name() : __internalCancellationReason,
        __availableTicketLanguages.name() : __availableTicketLanguages,
        __isInventoryCanceled.name() : __isInventoryCanceled
    })
    _AttributeMap.update({
        __orderID.name() : __orderID,
        __status.name() : __status,
        __originalOrderID.name() : __originalOrderID
    })
Namespace.addCategoryObject('typeBinding', 'OrderType', OrderType)


# Complex type {http://railgds.net/ws/commontypes}PassengerFareQualifierType with content type ELEMENT_ONLY
class PassengerFareQualifierType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PassengerFareQualifierType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PassengerFareQualifierType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1527, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}program uses Python identifier program
    __program = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'program'), 'program', '__httprailgds_netwscommontypes_PassengerFareQualifierType_httprailgds_netwscommontypesprogram', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1529, 3), )

    
    program = property(__program.value, __program.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'identifier'), 'identifier', '__httprailgds_netwscommontypes_PassengerFareQualifierType_httprailgds_netwscommontypesidentifier', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1530, 3), )

    
    identifier = property(__identifier.value, __identifier.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_PassengerFareQualifierType_type', STD_ANON_20, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1532, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1532, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __program.name() : __program,
        __identifier.name() : __identifier
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'PassengerFareQualifierType', PassengerFareQualifierType)


# Complex type {http://railgds.net/ws/commontypes}PassengerType with content type ELEMENT_ONLY
class PassengerType (CustomerType):
    """Complex type {http://railgds.net/ws/commontypes}PassengerType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PassengerType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1551, 1)
    _ElementMap = CustomerType._ElementMap.copy()
    _AttributeMap = CustomerType._AttributeMap.copy()
    # Base type is CustomerType
    
    # Element title ({http://railgds.net/ws/commontypes}title) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element nameFirst ({http://railgds.net/ws/commontypes}nameFirst) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element nameMiddle ({http://railgds.net/ws/commontypes}nameMiddle) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element nameLast ({http://railgds.net/ws/commontypes}nameLast) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element suffix ({http://railgds.net/ws/commontypes}suffix) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element dob ({http://railgds.net/ws/commontypes}dob) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element gender ({http://railgds.net/ws/commontypes}gender) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element residenceInformation ({http://railgds.net/ws/commontypes}residenceInformation) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element address ({http://railgds.net/ws/commontypes}address) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element contactInformation ({http://railgds.net/ws/commontypes}contactInformation) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element ageAtTimeOfTravel ({http://railgds.net/ws/commontypes}ageAtTimeOfTravel) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element loyaltyCards ({http://railgds.net/ws/commontypes}loyaltyCards) inherited from {http://railgds.net/ws/commontypes}CustomerType
    
    # Element {http://railgds.net/ws/commontypes}travelDocuments uses Python identifier travelDocuments
    __travelDocuments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelDocuments'), 'travelDocuments', '__httprailgds_netwscommontypes_PassengerType_httprailgds_netwscommontypestravelDocuments', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1555, 5), )

    
    travelDocuments = property(__travelDocuments.value, __travelDocuments.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}orderReferences uses Python identifier orderReferences
    __orderReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderReferences'), 'orderReferences', '__httprailgds_netwscommontypes_PassengerType_httprailgds_netwscommontypesorderReferences', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1563, 5), )

    
    orderReferences = property(__orderReferences.value, __orderReferences.set, None, 'Will only be returned if the includeOrderDetails flag is true in the request ')

    
    # Element {http://railgds.net/ws/commontypes}customerReference uses Python identifier customerReference
    __customerReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customerReference'), 'customerReference', '__httprailgds_netwscommontypes_PassengerType_httprailgds_netwscommontypescustomerReference', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1574, 20), )

    
    customerReference = property(__customerReference.value, __customerReference.set, None, 'Will only be returned if the includeOrderDetails flag is true in the request ')

    
    # Element {http://railgds.net/ws/commontypes}customInformation uses Python identifier customInformation
    __customInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'customInformation'), 'customInformation', '__httprailgds_netwscommontypes_PassengerType_httprailgds_netwscommontypescustomInformation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1588, 20), )

    
    customInformation = property(__customInformation.value, __customInformation.set, None, 'Element is only valid for update booking requests and retrieve booking responses.\n                            ')

    
    # Attribute passengerID uses Python identifier passengerID
    __passengerID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'passengerID'), 'passengerID', '__httprailgds_netwscommontypes_PassengerType_passengerID', pyxb.binding.datatypes.ID)
    __passengerID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1595, 4)
    __passengerID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1595, 4)
    
    passengerID = property(__passengerID.value, __passengerID.set, None, 'This attribute should be required but it will remain optional for backwards compatibility.')

    _ElementMap.update({
        __travelDocuments.name() : __travelDocuments,
        __orderReferences.name() : __orderReferences,
        __customerReference.name() : __customerReference,
        __customInformation.name() : __customInformation
    })
    _AttributeMap.update({
        __passengerID.name() : __passengerID
    })
Namespace.addCategoryObject('typeBinding', 'PassengerType', PassengerType)


# Complex type {http://railgds.net/ws/commontypes}PaymentType with content type ELEMENT_ONLY
class PaymentType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PaymentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PaymentType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1628, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}formOfPayment uses Python identifier formOfPayment
    __formOfPayment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'formOfPayment'), 'formOfPayment', '__httprailgds_netwscommontypes_PaymentType_httprailgds_netwscommontypesformOfPayment', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1630, 3), )

    
    formOfPayment = property(__formOfPayment.value, __formOfPayment.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}creditCard uses Python identifier creditCard
    __creditCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'creditCard'), 'creditCard', '__httprailgds_netwscommontypes_PaymentType_httprailgds_netwscommontypescreditCard', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1632, 4), )

    
    creditCard = property(__creditCard.value, __creditCard.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}check uses Python identifier check
    __check = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'check'), 'check', '__httprailgds_netwscommontypes_PaymentType_httprailgds_netwscommontypescheck', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1633, 4), )

    
    check = property(__check.value, __check.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}onAccount uses Python identifier onAccount
    __onAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onAccount'), 'onAccount', '__httprailgds_netwscommontypes_PaymentType_httprailgds_netwscommontypesonAccount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1634, 4), )

    
    onAccount = property(__onAccount.value, __onAccount.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}debitCard uses Python identifier debitCard
    __debitCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'debitCard'), 'debitCard', '__httprailgds_netwscommontypes_PaymentType_httprailgds_netwscommontypesdebitCard', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1635, 4), )

    
    debitCard = property(__debitCard.value, __debitCard.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}voucher uses Python identifier voucher
    __voucher = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'voucher'), 'voucher', '__httprailgds_netwscommontypes_PaymentType_httprailgds_netwscommontypesvoucher', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1636, 4), )

    
    voucher = property(__voucher.value, __voucher.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}eCheck uses Python identifier eCheck
    __eCheck = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eCheck'), 'eCheck', '__httprailgds_netwscommontypes_PaymentType_httprailgds_netwscommontypeseCheck', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1637, 4), )

    
    eCheck = property(__eCheck.value, __eCheck.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}amount uses Python identifier amount
    __amount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amount'), 'amount', '__httprailgds_netwscommontypes_PaymentType_httprailgds_netwscommontypesamount', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1639, 3), )

    
    amount = property(__amount.value, __amount.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_PaymentType_type', STD_ANON_21, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1641, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1641, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __formOfPayment.name() : __formOfPayment,
        __creditCard.name() : __creditCard,
        __check.name() : __check,
        __onAccount.name() : __onAccount,
        __debitCard.name() : __debitCard,
        __voucher.name() : __voucher,
        __eCheck.name() : __eCheck,
        __amount.name() : __amount
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'PaymentType', PaymentType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_105 (StatusMessages):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1715, 4)
    _ElementMap = StatusMessages._ElementMap.copy()
    _AttributeMap = StatusMessages._AttributeMap.copy()
    # Base type is StatusMessages
    
    # Element {http://railgds.net/ws/commontypes}statusMessage uses Python identifier statusMessage
    __statusMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'statusMessage'), 'statusMessage', '__httprailgds_netwscommontypes_CTD_ANON_105_httprailgds_netwscommontypesstatusMessage', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1719, 8), )

    
    statusMessage = property(__statusMessage.value, __statusMessage.set, None, None)

    _ElementMap.update({
        __statusMessage.name() : __statusMessage
    })
    _AttributeMap.update({
        
    })



# Complex type {http://railgds.net/ws/commontypes}RoutingRestrictionType with content type ELEMENT_ONLY
class RoutingRestrictionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}RoutingRestrictionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RoutingRestrictionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1751, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}routingTravelPoint uses Python identifier routingTravelPoint
    __routingTravelPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'routingTravelPoint'), 'routingTravelPoint', '__httprailgds_netwscommontypes_RoutingRestrictionType_httprailgds_netwscommontypesroutingTravelPoint', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1753, 3), )

    
    routingTravelPoint = property(__routingTravelPoint.value, __routingTravelPoint.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_RoutingRestrictionType_type', STD_ANON_22)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1755, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1755, 2)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __routingTravelPoint.name() : __routingTravelPoint
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'RoutingRestrictionType', RoutingRestrictionType)


# Complex type {http://railgds.net/ws/commontypes}RuleType with content type ELEMENT_ONLY
class RuleType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}RuleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RuleType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1779, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httprailgds_netwscommontypes_RuleType_httprailgds_netwscommontypesdescription', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1781, 3), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}penalty uses Python identifier penalty
    __penalty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'penalty'), 'penalty', '__httprailgds_netwscommontypes_RuleType_httprailgds_netwscommontypespenalty', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1782, 3), )

    
    penalty = property(__penalty.value, __penalty.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_RuleType_type', STD_ANON_23, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1784, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1784, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute priceType uses Python identifier priceType
    __priceType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'priceType'), 'priceType', '__httprailgds_netwscommontypes_RuleType_priceType', STD_ANON_24)
    __priceType._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1795, 8)
    __priceType._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1795, 8)
    
    priceType = property(__priceType.value, __priceType.set, None, None)

    
    # Attribute applicableOrderStatus uses Python identifier applicableOrderStatus
    __applicableOrderStatus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'applicableOrderStatus'), 'applicableOrderStatus', '__httprailgds_netwscommontypes_RuleType_applicableOrderStatus', STD_ANON_25)
    __applicableOrderStatus._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1808, 2)
    __applicableOrderStatus._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1808, 2)
    
    applicableOrderStatus = property(__applicableOrderStatus.value, __applicableOrderStatus.set, None, None)

    
    # Attribute applicableTicketingOption uses Python identifier applicableTicketingOption
    __applicableTicketingOption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'applicableTicketingOption'), 'applicableTicketingOption', '__httprailgds_netwscommontypes_RuleType_applicableTicketingOption', STD_ANON_26)
    __applicableTicketingOption._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1818, 2)
    __applicableTicketingOption._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1818, 2)
    
    applicableTicketingOption = property(__applicableTicketingOption.value, __applicableTicketingOption.set, None, None)

    
    # Attribute expirationDateTime uses Python identifier expirationDateTime
    __expirationDateTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'expirationDateTime'), 'expirationDateTime', '__httprailgds_netwscommontypes_RuleType_expirationDateTime', pyxb.binding.datatypes.dateTime)
    __expirationDateTime._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1835, 8)
    __expirationDateTime._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1835, 8)
    
    expirationDateTime = property(__expirationDateTime.value, __expirationDateTime.set, None, None)

    
    # Attribute estimated uses Python identifier estimated
    __estimated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'estimated'), 'estimated', '__httprailgds_netwscommontypes_RuleType_estimated', pyxb.binding.datatypes.boolean)
    __estimated._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1836, 2)
    __estimated._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1836, 2)
    
    estimated = property(__estimated.value, __estimated.set, None, None)

    
    # Attribute refundToVoucher uses Python identifier refundToVoucher
    __refundToVoucher = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'refundToVoucher'), 'refundToVoucher', '__httprailgds_netwscommontypes_RuleType_refundToVoucher', STD_ANON_27)
    __refundToVoucher._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1837, 8)
    __refundToVoucher._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1837, 8)
    
    refundToVoucher = property(__refundToVoucher.value, __refundToVoucher.set, None, None)

    _ElementMap.update({
        __description.name() : __description,
        __penalty.name() : __penalty
    })
    _AttributeMap.update({
        __type.name() : __type,
        __priceType.name() : __priceType,
        __applicableOrderStatus.name() : __applicableOrderStatus,
        __applicableTicketingOption.name() : __applicableTicketingOption,
        __expirationDateTime.name() : __expirationDateTime,
        __estimated.name() : __estimated,
        __refundToVoucher.name() : __refundToVoucher
    })
Namespace.addCategoryObject('typeBinding', 'RuleType', RuleType)


# Complex type {http://railgds.net/ws/commontypes}BaseSeatPreferenceType with content type EMPTY
class BaseSeatPreferenceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}BaseSeatPreferenceType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseSeatPreferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1924, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute marketingCarrier uses Python identifier marketingCarrier
    __marketingCarrier = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'marketingCarrier'), 'marketingCarrier', '__httprailgds_netwscommontypes_BaseSeatPreferenceType_marketingCarrier', pyxb.binding.datatypes.string, required=True)
    __marketingCarrier._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1925, 10)
    __marketingCarrier._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1925, 10)
    
    marketingCarrier = property(__marketingCarrier.value, __marketingCarrier.set, None, None)

    
    # Attribute serviceClass uses Python identifier serviceClass
    __serviceClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'serviceClass'), 'serviceClass', '__httprailgds_netwscommontypes_BaseSeatPreferenceType_serviceClass', ServiceClassType, required=True)
    __serviceClass._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1926, 10)
    __serviceClass._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1926, 10)
    
    serviceClass = property(__serviceClass.value, __serviceClass.set, None, None)

    
    # Attribute supplierEquipmentType uses Python identifier supplierEquipmentType
    __supplierEquipmentType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'supplierEquipmentType'), 'supplierEquipmentType', '__httprailgds_netwscommontypes_BaseSeatPreferenceType_supplierEquipmentType', pyxb.binding.datatypes.string)
    __supplierEquipmentType._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1927, 10)
    __supplierEquipmentType._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1927, 10)
    
    supplierEquipmentType = property(__supplierEquipmentType.value, __supplierEquipmentType.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __marketingCarrier.name() : __marketingCarrier,
        __serviceClass.name() : __serviceClass,
        __supplierEquipmentType.name() : __supplierEquipmentType
    })
Namespace.addCategoryObject('typeBinding', 'BaseSeatPreferenceType', BaseSeatPreferenceType)


# Complex type {http://railgds.net/ws/commontypes}AvailableSeatPreferenceType with content type SIMPLE
class AvailableSeatPreferenceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}AvailableSeatPreferenceType with content type SIMPLE"""
    _TypeDefinition = SeatPreferenceType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AvailableSeatPreferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1930, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is SeatPreferenceType
    
    # Attribute marketingCarrier uses Python identifier marketingCarrier
    __marketingCarrier = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'marketingCarrier'), 'marketingCarrier', '__httprailgds_netwscommontypes_AvailableSeatPreferenceType_marketingCarrier', pyxb.binding.datatypes.string, required=True)
    __marketingCarrier._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1933, 16)
    __marketingCarrier._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1933, 16)
    
    marketingCarrier = property(__marketingCarrier.value, __marketingCarrier.set, None, None)

    
    # Attribute serviceClass uses Python identifier serviceClass
    __serviceClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'serviceClass'), 'serviceClass', '__httprailgds_netwscommontypes_AvailableSeatPreferenceType_serviceClass', ServiceClassType, required=True)
    __serviceClass._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1934, 16)
    __serviceClass._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1934, 16)
    
    serviceClass = property(__serviceClass.value, __serviceClass.set, None, None)

    
    # Attribute supplierEquipmentType uses Python identifier supplierEquipmentType
    __supplierEquipmentType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'supplierEquipmentType'), 'supplierEquipmentType', '__httprailgds_netwscommontypes_AvailableSeatPreferenceType_supplierEquipmentType', pyxb.binding.datatypes.string)
    __supplierEquipmentType._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1935, 16)
    __supplierEquipmentType._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1935, 16)
    
    supplierEquipmentType = property(__supplierEquipmentType.value, __supplierEquipmentType.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __marketingCarrier.name() : __marketingCarrier,
        __serviceClass.name() : __serviceClass,
        __supplierEquipmentType.name() : __supplierEquipmentType
    })
Namespace.addCategoryObject('typeBinding', 'AvailableSeatPreferenceType', AvailableSeatPreferenceType)


# Complex type {http://railgds.net/ws/commontypes}TicketingOptionType with content type ELEMENT_ONLY
class TicketingOptionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TicketingOptionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TicketingOptionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2269, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httprailgds_netwscommontypes_TicketingOptionType_httprailgds_netwscommontypesdescription', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2271, 3), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}fee uses Python identifier fee
    __fee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fee'), 'fee', '__httprailgds_netwscommontypes_TicketingOptionType_httprailgds_netwscommontypesfee', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2272, 3), )

    
    fee = property(__fee.value, __fee.set, None, None)

    
    # Attribute code uses Python identifier code
    __code = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'code'), 'code', '__httprailgds_netwscommontypes_TicketingOptionType_code', STD_ANON_28, required=True)
    __code._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2274, 2)
    __code._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2274, 2)
    
    code = property(__code.value, __code.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_TicketingOptionType_type', pyxb.binding.datatypes.string)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2292, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2292, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute departureStation uses Python identifier departureStation
    __departureStation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'departureStation'), 'departureStation', '__httprailgds_netwscommontypes_TicketingOptionType_departureStation', pyxb.binding.datatypes.boolean)
    __departureStation._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2293, 2)
    __departureStation._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2293, 2)
    
    departureStation = property(__departureStation.value, __departureStation.set, None, None)

    
    # Attribute destination uses Python identifier destination
    __destination = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'destination'), 'destination', '__httprailgds_netwscommontypes_TicketingOptionType_destination', pyxb.binding.datatypes.string)
    __destination._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2294, 2)
    __destination._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2294, 2)
    
    destination = property(__destination.value, __destination.set, None, None)

    
    # Attribute redeliveryAllowed uses Python identifier redeliveryAllowed
    __redeliveryAllowed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'redeliveryAllowed'), 'redeliveryAllowed', '__httprailgds_netwscommontypes_TicketingOptionType_redeliveryAllowed', pyxb.binding.datatypes.boolean)
    __redeliveryAllowed._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2295, 8)
    __redeliveryAllowed._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2295, 8)
    
    redeliveryAllowed = property(__redeliveryAllowed.value, __redeliveryAllowed.set, None, None)

    _ElementMap.update({
        __description.name() : __description,
        __fee.name() : __fee
    })
    _AttributeMap.update({
        __code.name() : __code,
        __type.name() : __type,
        __departureStation.name() : __departureStation,
        __destination.name() : __destination,
        __redeliveryAllowed.name() : __redeliveryAllowed
    })
Namespace.addCategoryObject('typeBinding', 'TicketingOptionType', TicketingOptionType)


# Complex type {http://railgds.net/ws/commontypes}TravelPointPairDateType with content type ELEMENT_ONLY
class TravelPointPairDateType (BaseTravelPointPairType):
    """Complex type {http://railgds.net/ws/commontypes}TravelPointPairDateType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TravelPointPairDateType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2311, 4)
    _ElementMap = BaseTravelPointPairType._ElementMap.copy()
    _AttributeMap = BaseTravelPointPairType._AttributeMap.copy()
    # Base type is BaseTravelPointPairType
    
    # Element originTravelPoint ({http://railgds.net/ws/commontypes}originTravelPoint) inherited from {http://railgds.net/ws/commontypes}BaseTravelPointPairType
    
    # Element destinationTravelPoint ({http://railgds.net/ws/commontypes}destinationTravelPoint) inherited from {http://railgds.net/ws/commontypes}BaseTravelPointPairType
    
    # Element {http://railgds.net/ws/commontypes}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__httprailgds_netwscommontypes_TravelPointPairDateType_httprailgds_netwscommontypesstartDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2315, 17), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endDate'), 'endDate', '__httprailgds_netwscommontypes_TravelPointPairDateType_httprailgds_netwscommontypesendDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2316, 17), )

    
    endDate = property(__endDate.value, __endDate.set, None, None)

    _ElementMap.update({
        __startDate.name() : __startDate,
        __endDate.name() : __endDate
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TravelPointPairDateType', TravelPointPairDateType)


# Complex type {http://railgds.net/ws/commontypes}TravelPointType with content type SIMPLE
class TravelPointType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TravelPointType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TravelPointType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2321, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_TravelPointType_type', TravelPointTypeEnumeration, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2324, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2324, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'TravelPointType', TravelPointType)


# Complex type {http://railgds.net/ws/commontypes}TravelSegmentType with content type ELEMENT_ONLY
class TravelSegmentType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}TravelSegmentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TravelSegmentType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2328, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}originTravelPoint uses Python identifier originTravelPoint
    __originTravelPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint'), 'originTravelPoint', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesoriginTravelPoint', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2330, 3), )

    
    originTravelPoint = property(__originTravelPoint.value, __originTravelPoint.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}destinationTravelPoint uses Python identifier destinationTravelPoint
    __destinationTravelPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint'), 'destinationTravelPoint', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesdestinationTravelPoint', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2331, 3), )

    
    destinationTravelPoint = property(__destinationTravelPoint.value, __destinationTravelPoint.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}departureDateTime uses Python identifier departureDateTime
    __departureDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'departureDateTime'), 'departureDateTime', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesdepartureDateTime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2332, 3), )

    
    departureDateTime = property(__departureDateTime.value, __departureDateTime.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}arrivalDateTime uses Python identifier arrivalDateTime
    __arrivalDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'arrivalDateTime'), 'arrivalDateTime', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesarrivalDateTime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2333, 3), )

    
    arrivalDateTime = property(__arrivalDateTime.value, __arrivalDateTime.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}serviceOrigins uses Python identifier serviceOrigins
    __serviceOrigins = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceOrigins'), 'serviceOrigins', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesserviceOrigins', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2334, 3), )

    
    serviceOrigins = property(__serviceOrigins.value, __serviceOrigins.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}serviceDestinations uses Python identifier serviceDestinations
    __serviceDestinations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serviceDestinations'), 'serviceDestinations', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesserviceDestinations', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2335, 3), )

    
    serviceDestinations = property(__serviceDestinations.value, __serviceDestinations.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}designator uses Python identifier designator
    __designator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'designator'), 'designator', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesdesignator', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2336, 3), )

    
    designator = property(__designator.value, __designator.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}marketingCarrier uses Python identifier marketingCarrier
    __marketingCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'marketingCarrier'), 'marketingCarrier', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesmarketingCarrier', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2337, 3), )

    
    marketingCarrier = property(__marketingCarrier.value, __marketingCarrier.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}operatingCarrier uses Python identifier operatingCarrier
    __operatingCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'operatingCarrier'), 'operatingCarrier', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesoperatingCarrier', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2338, 3), )

    
    operatingCarrier = property(__operatingCarrier.value, __operatingCarrier.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}supplierEquipmentType uses Python identifier supplierEquipmentType
    __supplierEquipmentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'supplierEquipmentType'), 'supplierEquipmentType', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypessupplierEquipmentType', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2339, 12), )

    
    supplierEquipmentType = property(__supplierEquipmentType.value, __supplierEquipmentType.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}distance uses Python identifier distance
    __distance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'distance'), 'distance', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesdistance', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2340, 3), )

    
    distance = property(__distance.value, __distance.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}duration uses Python identifier duration
    __duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'duration'), 'duration', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesduration', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2341, 3), )

    
    duration = property(__duration.value, __duration.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}onTimePercentage uses Python identifier onTimePercentage
    __onTimePercentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onTimePercentage'), 'onTimePercentage', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesonTimePercentage', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2342, 3), )

    
    onTimePercentage = property(__onTimePercentage.value, __onTimePercentage.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}amenities uses Python identifier amenities
    __amenities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'amenities'), 'amenities', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesamenities', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2343, 3), )

    
    amenities = property(__amenities.value, __amenities.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}crossBorderInfo uses Python identifier crossBorderInfo
    __crossBorderInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'crossBorderInfo'), 'crossBorderInfo', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypescrossBorderInfo', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2350, 3), )

    
    crossBorderInfo = property(__crossBorderInfo.value, __crossBorderInfo.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}supplierRecordLocator uses Python identifier supplierRecordLocator
    __supplierRecordLocator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'supplierRecordLocator'), 'supplierRecordLocator', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypessupplierRecordLocator', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2351, 3), )

    
    supplierRecordLocator = property(__supplierRecordLocator.value, __supplierRecordLocator.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}equipmentType uses Python identifier equipmentType
    __equipmentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'equipmentType'), 'equipmentType', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesequipmentType', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2353, 3), )

    
    equipmentType = property(__equipmentType.value, __equipmentType.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}carbonOffset uses Python identifier carbonOffset
    __carbonOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'carbonOffset'), 'carbonOffset', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypescarbonOffset', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2354, 3), )

    
    carbonOffset = property(__carbonOffset.value, __carbonOffset.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}viaTravelPoints uses Python identifier viaTravelPoints
    __viaTravelPoints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'viaTravelPoints'), 'viaTravelPoints', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesviaTravelPoints', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2355, 3), )

    
    viaTravelPoints = property(__viaTravelPoints.value, __viaTravelPoints.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}marketingServiceName uses Python identifier marketingServiceName
    __marketingServiceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'marketingServiceName'), 'marketingServiceName', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesmarketingServiceName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2363, 3), )

    
    marketingServiceName = property(__marketingServiceName.value, __marketingServiceName.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}marketingInformation uses Python identifier marketingInformation
    __marketingInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'marketingInformation'), 'marketingInformation', '__httprailgds_netwscommontypes_TravelSegmentType_httprailgds_netwscommontypesmarketingInformation', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2364, 12), )

    
    marketingInformation = property(__marketingInformation.value, __marketingInformation.set, None, None)

    
    # Attribute sequence uses Python identifier sequence
    __sequence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'sequence'), 'sequence', '__httprailgds_netwscommontypes_TravelSegmentType_sequence', STD_ANON_29)
    __sequence._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2366, 2)
    __sequence._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2366, 2)
    
    sequence = property(__sequence.value, __sequence.set, None, None)

    
    # Attribute travelSegmentID uses Python identifier travelSegmentID
    __travelSegmentID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'travelSegmentID'), 'travelSegmentID', '__httprailgds_netwscommontypes_TravelSegmentType_travelSegmentID', pyxb.binding.datatypes.ID, required=True)
    __travelSegmentID._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2373, 2)
    __travelSegmentID._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2373, 2)
    
    travelSegmentID = property(__travelSegmentID.value, __travelSegmentID.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_TravelSegmentType_type', pyxb.binding.datatypes.string)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2374, 2)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2374, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute legGrouping uses Python identifier legGrouping
    __legGrouping = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'legGrouping'), 'legGrouping', '__httprailgds_netwscommontypes_TravelSegmentType_legGrouping', pyxb.binding.datatypes.string)
    __legGrouping._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2375, 2)
    __legGrouping._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2375, 2)
    
    legGrouping = property(__legGrouping.value, __legGrouping.set, None, None)

    _ElementMap.update({
        __originTravelPoint.name() : __originTravelPoint,
        __destinationTravelPoint.name() : __destinationTravelPoint,
        __departureDateTime.name() : __departureDateTime,
        __arrivalDateTime.name() : __arrivalDateTime,
        __serviceOrigins.name() : __serviceOrigins,
        __serviceDestinations.name() : __serviceDestinations,
        __designator.name() : __designator,
        __marketingCarrier.name() : __marketingCarrier,
        __operatingCarrier.name() : __operatingCarrier,
        __supplierEquipmentType.name() : __supplierEquipmentType,
        __distance.name() : __distance,
        __duration.name() : __duration,
        __onTimePercentage.name() : __onTimePercentage,
        __amenities.name() : __amenities,
        __crossBorderInfo.name() : __crossBorderInfo,
        __supplierRecordLocator.name() : __supplierRecordLocator,
        __equipmentType.name() : __equipmentType,
        __carbonOffset.name() : __carbonOffset,
        __viaTravelPoints.name() : __viaTravelPoints,
        __marketingServiceName.name() : __marketingServiceName,
        __marketingInformation.name() : __marketingInformation
    })
    _AttributeMap.update({
        __sequence.name() : __sequence,
        __travelSegmentID.name() : __travelSegmentID,
        __type.name() : __type,
        __legGrouping.name() : __legGrouping
    })
Namespace.addCategoryObject('typeBinding', 'TravelSegmentType', TravelSegmentType)


# Complex type {http://railgds.net/ws/commontypes}ValueDocumentCouponType with content type ELEMENT_ONLY
class ValueDocumentCouponType (CouponType):
    """Complex type {http://railgds.net/ws/commontypes}ValueDocumentCouponType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueDocumentCouponType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2421, 4)
    _ElementMap = CouponType._ElementMap.copy()
    _AttributeMap = CouponType._AttributeMap.copy()
    # Base type is CouponType
    
    # Element couponNumber ({http://railgds.net/ws/commontypes}couponNumber) inherited from {http://railgds.net/ws/commontypes}CouponType
    
    # Element {http://railgds.net/ws/commontypes}couponReceivedDate uses Python identifier couponReceivedDate
    __couponReceivedDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'couponReceivedDate'), 'couponReceivedDate', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypescouponReceivedDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2425, 20), )

    
    couponReceivedDate = property(__couponReceivedDate.value, __couponReceivedDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}origin uses Python identifier origin
    __origin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'origin'), 'origin', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesorigin', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2426, 20), )

    
    origin = property(__origin.value, __origin.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}destination uses Python identifier destination
    __destination = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'destination'), 'destination', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesdestination', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2427, 20), )

    
    destination = property(__destination.value, __destination.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}refundApprovedDate uses Python identifier refundApprovedDate
    __refundApprovedDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'refundApprovedDate'), 'refundApprovedDate', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesrefundApprovedDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2428, 20), )

    
    refundApprovedDate = property(__refundApprovedDate.value, __refundApprovedDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}authorization uses Python identifier authorization
    __authorization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'authorization'), 'authorization', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesauthorization', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2429, 20), )

    
    authorization = property(__authorization.value, __authorization.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}departureDateTime uses Python identifier departureDateTime
    __departureDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'departureDateTime'), 'departureDateTime', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesdepartureDateTime', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2438, 20), )

    
    departureDateTime = property(__departureDateTime.value, __departureDateTime.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ticketTypeCode uses Python identifier ticketTypeCode
    __ticketTypeCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketTypeCode'), 'ticketTypeCode', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesticketTypeCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2439, 20), )

    
    ticketTypeCode = property(__ticketTypeCode.value, __ticketTypeCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ticketType uses Python identifier ticketType
    __ticketType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketType'), 'ticketType', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesticketType', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2440, 20), )

    
    ticketType = property(__ticketType.value, __ticketType.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}numberAdults uses Python identifier numberAdults
    __numberAdults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberAdults'), 'numberAdults', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesnumberAdults', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2441, 20), )

    
    numberAdults = property(__numberAdults.value, __numberAdults.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}numberChildren uses Python identifier numberChildren
    __numberChildren = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'numberChildren'), 'numberChildren', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesnumberChildren', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2442, 20), )

    
    numberChildren = property(__numberChildren.value, __numberChildren.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}railcardPrintingName uses Python identifier railcardPrintingName
    __railcardPrintingName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'railcardPrintingName'), 'railcardPrintingName', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesrailcardPrintingName', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2443, 20), )

    
    railcardPrintingName = property(__railcardPrintingName.value, __railcardPrintingName.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ticketableFareIDRef uses Python identifier ticketableFareIDRef
    __ticketableFareIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketableFareIDRef'), 'ticketableFareIDRef', '__httprailgds_netwscommontypes_ValueDocumentCouponType_httprailgds_netwscommontypesticketableFareIDRef', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2444, 5), )

    
    ticketableFareIDRef = property(__ticketableFareIDRef.value, __ticketableFareIDRef.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_ValueDocumentCouponType_type', STD_ANON_32)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2446, 16)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2446, 16)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __couponReceivedDate.name() : __couponReceivedDate,
        __origin.name() : __origin,
        __destination.name() : __destination,
        __refundApprovedDate.name() : __refundApprovedDate,
        __authorization.name() : __authorization,
        __departureDateTime.name() : __departureDateTime,
        __ticketTypeCode.name() : __ticketTypeCode,
        __ticketType.name() : __ticketType,
        __numberAdults.name() : __numberAdults,
        __numberChildren.name() : __numberChildren,
        __railcardPrintingName.name() : __railcardPrintingName,
        __ticketableFareIDRef.name() : __ticketableFareIDRef
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'ValueDocumentCouponType', ValueDocumentCouponType)


# Complex type {http://railgds.net/ws/commontypes}ValueDocumentType with content type ELEMENT_ONLY
class ValueDocumentType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}ValueDocumentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueDocumentType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2458, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}valueDocumentLocator uses Python identifier valueDocumentLocator
    __valueDocumentLocator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'valueDocumentLocator'), 'valueDocumentLocator', '__httprailgds_netwscommontypes_ValueDocumentType_httprailgds_netwscommontypesvalueDocumentLocator', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2460, 3), )

    
    valueDocumentLocator = property(__valueDocumentLocator.value, __valueDocumentLocator.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}retrievalCustomer uses Python identifier retrievalCustomer
    __retrievalCustomer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'retrievalCustomer'), 'retrievalCustomer', '__httprailgds_netwscommontypes_ValueDocumentType_httprailgds_netwscommontypesretrievalCustomer', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2461, 3), )

    
    retrievalCustomer = property(__retrievalCustomer.value, __retrievalCustomer.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}retrievalMaskedCreditCard uses Python identifier retrievalMaskedCreditCard
    __retrievalMaskedCreditCard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'retrievalMaskedCreditCard'), 'retrievalMaskedCreditCard', '__httprailgds_netwscommontypes_ValueDocumentType_httprailgds_netwscommontypesretrievalMaskedCreditCard', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2462, 3), )

    
    retrievalMaskedCreditCard = property(__retrievalMaskedCreditCard.value, __retrievalMaskedCreditCard.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}retrievalCode uses Python identifier retrievalCode
    __retrievalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'retrievalCode'), 'retrievalCode', '__httprailgds_netwscommontypes_ValueDocumentType_httprailgds_netwscommontypesretrievalCode', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2463, 12), )

    
    retrievalCode = property(__retrievalCode.value, __retrievalCode.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}coupons uses Python identifier coupons
    __coupons = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coupons'), 'coupons', '__httprailgds_netwscommontypes_ValueDocumentType_httprailgds_netwscommontypescoupons', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2464, 12), )

    
    coupons = property(__coupons.value, __coupons.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}url uses Python identifier url
    __url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'url'), 'url', '__httprailgds_netwscommontypes_ValueDocumentType_httprailgds_netwscommontypesurl', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2472, 3), )

    
    url = property(__url.value, __url.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}selectedTicketLanguage uses Python identifier selectedTicketLanguage
    __selectedTicketLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'selectedTicketLanguage'), 'selectedTicketLanguage', '__httprailgds_netwscommontypes_ValueDocumentType_httprailgds_netwscommontypesselectedTicketLanguage', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2473, 12), )

    
    selectedTicketLanguage = property(__selectedTicketLanguage.value, __selectedTicketLanguage.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}issuedDate uses Python identifier issuedDate
    __issuedDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'issuedDate'), 'issuedDate', '__httprailgds_netwscommontypes_ValueDocumentType_httprailgds_netwscommontypesissuedDate', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2474, 12), )

    
    issuedDate = property(__issuedDate.value, __issuedDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}data uses Python identifier data
    __data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'data'), 'data', '__httprailgds_netwscommontypes_ValueDocumentType_httprailgds_netwscommontypesdata', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2475, 12), )

    
    data = property(__data.value, __data.set, None, None)

    
    # Attribute status uses Python identifier status
    __status = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__httprailgds_netwscommontypes_ValueDocumentType_status', STD_ANON_33, required=True)
    __status._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2485, 2)
    __status._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2485, 2)
    
    status = property(__status.value, __status.set, None, None)

    _ElementMap.update({
        __valueDocumentLocator.name() : __valueDocumentLocator,
        __retrievalCustomer.name() : __retrievalCustomer,
        __retrievalMaskedCreditCard.name() : __retrievalMaskedCreditCard,
        __retrievalCode.name() : __retrievalCode,
        __coupons.name() : __coupons,
        __url.name() : __url,
        __selectedTicketLanguage.name() : __selectedTicketLanguage,
        __issuedDate.name() : __issuedDate,
        __data.name() : __data
    })
    _AttributeMap.update({
        __status.name() : __status
    })
Namespace.addCategoryObject('typeBinding', 'ValueDocumentType', ValueDocumentType)


# Complex type {http://railgds.net/ws/commontypes}PassengerInformationType with content type ELEMENT_ONLY
class PassengerInformationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}PassengerInformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PassengerInformationType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2516, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}acceptableFormOfTravelDocument uses Python identifier acceptableFormOfTravelDocument
    __acceptableFormOfTravelDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'acceptableFormOfTravelDocument'), 'acceptableFormOfTravelDocument', '__httprailgds_netwscommontypes_PassengerInformationType_httprailgds_netwscommontypesacceptableFormOfTravelDocument', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2518, 12), )

    
    acceptableFormOfTravelDocument = property(__acceptableFormOfTravelDocument.value, __acceptableFormOfTravelDocument.set, None, '\n                        PERMRESIDENT: Legal Permanent Resident Card\n                        PASSPORT: Passport\n                        NATURALCERT: Naturalization Certificate\n                        MILORDER: Military Order\n                        PHOTOCARD: Photocard required in the UK for acquiring season tickets\n\n                        Consult the SilverRail Documentation Portal for further information.\n                    ')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_PassengerInformationType_type', STD_ANON_35, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2541, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2541, 8)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute allPassengers uses Python identifier allPassengers
    __allPassengers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'allPassengers'), 'allPassengers', '__httprailgds_netwscommontypes_PassengerInformationType_allPassengers', pyxb.binding.datatypes.boolean, required=True)
    __allPassengers._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2554, 8)
    __allPassengers._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2554, 8)
    
    allPassengers = property(__allPassengers.value, __allPassengers.set, None, None)

    _ElementMap.update({
        __acceptableFormOfTravelDocument.name() : __acceptableFormOfTravelDocument
    })
    _AttributeMap.update({
        __type.name() : __type,
        __allPassengers.name() : __allPassengers
    })
Namespace.addCategoryObject('typeBinding', 'PassengerInformationType', PassengerInformationType)


# Complex type {http://railgds.net/ws/commontypes}CarrierRestrictionsType with content type ELEMENT_ONLY
class CarrierRestrictionsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}CarrierRestrictionsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CarrierRestrictionsType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2652, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}carrier uses Python identifier carrier
    __carrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'carrier'), 'carrier', '__httprailgds_netwscommontypes_CarrierRestrictionsType_httprailgds_netwscommontypescarrier', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2654, 12), )

    
    carrier = property(__carrier.value, __carrier.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CarrierRestrictionsType_type', STD_ANON_36, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2656, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2656, 8)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __carrier.name() : __carrier
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'CarrierRestrictionsType', CarrierRestrictionsType)


# Complex type {http://railgds.net/ws/commontypes}EquipmentTypeRestrictionsType with content type ELEMENT_ONLY
class EquipmentTypeRestrictionsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://railgds.net/ws/commontypes}EquipmentTypeRestrictionsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EquipmentTypeRestrictionsType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2667, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://railgds.net/ws/commontypes}equipmentType uses Python identifier equipmentType
    __equipmentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'equipmentType'), 'equipmentType', '__httprailgds_netwscommontypes_EquipmentTypeRestrictionsType_httprailgds_netwscommontypesequipmentType', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2669, 12), )

    
    equipmentType = property(__equipmentType.value, __equipmentType.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_EquipmentTypeRestrictionsType_type', STD_ANON_37, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2671, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2671, 8)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __equipmentType.name() : __equipmentType
    })
    _AttributeMap.update({
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', 'EquipmentTypeRestrictionsType', EquipmentTypeRestrictionsType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_106 (OrderType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 234, 7)
    _ElementMap = OrderType._ElementMap.copy()
    _AttributeMap = OrderType._AttributeMap.copy()
    # Base type is OrderType
    
    # Element {http://railgds.net/ws/commontypes}updateable uses Python identifier updateable
    __updateable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'updateable'), 'updateable', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypesupdateable', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 238, 44), )

    
    updateable = property(__updateable.value, __updateable.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}travelSegments uses Python identifier travelSegments
    __travelSegments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'travelSegments'), 'travelSegments', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypestravelSegments', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 239, 11), )

    
    travelSegments = property(__travelSegments.value, __travelSegments.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ticketableFares uses Python identifier ticketableFares
    __ticketableFares = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketableFares'), 'ticketableFares', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypesticketableFares', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 248, 11), )

    
    ticketableFares = property(__ticketableFares.value, __ticketableFares.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}ticketingOptions uses Python identifier ticketingOptions
    __ticketingOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptions'), 'ticketingOptions', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypesticketingOptions', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 257, 11), )

    
    ticketingOptions = property(__ticketingOptions.value, __ticketingOptions.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}financials uses Python identifier financials
    __financials = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'financials'), 'financials', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypesfinancials', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 266, 11), )

    
    financials = property(__financials.value, __financials.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}supplyChannelPassengers uses Python identifier supplyChannelPassengers
    __supplyChannelPassengers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'supplyChannelPassengers'), 'supplyChannelPassengers', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypessupplyChannelPassengers', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 285, 44), )

    
    supplyChannelPassengers = property(__supplyChannelPassengers.value, __supplyChannelPassengers.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}orderNotes uses Python identifier orderNotes
    __orderNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orderNotes'), 'orderNotes', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypesorderNotes', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 294, 44), )

    
    orderNotes = property(__orderNotes.value, __orderNotes.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}confirmationInformationRequired uses Python identifier confirmationInformationRequired
    __confirmationInformationRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'confirmationInformationRequired'), 'confirmationInformationRequired', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypesconfirmationInformationRequired', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 303, 44), )

    
    confirmationInformationRequired = property(__confirmationInformationRequired.value, __confirmationInformationRequired.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}paymentCardRequiredForConfirmationInformation uses Python identifier paymentCardRequiredForConfirmationInformation
    __paymentCardRequiredForConfirmationInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentCardRequiredForConfirmationInformation'), 'paymentCardRequiredForConfirmationInformation', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypespaymentCardRequiredForConfirmationInformation', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 305, 44), )

    
    paymentCardRequiredForConfirmationInformation = property(__paymentCardRequiredForConfirmationInformation.value, __paymentCardRequiredForConfirmationInformation.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}confirmationInformationRequiredOverrides uses Python identifier confirmationInformationRequiredOverrides
    __confirmationInformationRequiredOverrides = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'confirmationInformationRequiredOverrides'), 'confirmationInformationRequiredOverrides', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypesconfirmationInformationRequiredOverrides', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 308, 11), )

    
    confirmationInformationRequiredOverrides = property(__confirmationInformationRequiredOverrides.value, __confirmationInformationRequiredOverrides.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}confirmationOptions uses Python identifier confirmationOptions
    __confirmationOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'confirmationOptions'), 'confirmationOptions', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypesconfirmationOptions', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 310, 44), )

    
    confirmationOptions = property(__confirmationOptions.value, __confirmationOptions.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}selectedConfirmationOption uses Python identifier selectedConfirmationOption
    __selectedConfirmationOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'selectedConfirmationOption'), 'selectedConfirmationOption', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypesselectedConfirmationOption', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 311, 44), )

    
    selectedConfirmationOption = property(__selectedConfirmationOption.value, __selectedConfirmationOption.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}commercialAgentName uses Python identifier commercialAgentName
    __commercialAgentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commercialAgentName'), 'commercialAgentName', '__httprailgds_netwscommontypes_CTD_ANON_106_httprailgds_netwscommontypescommercialAgentName', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 314, 44), )

    
    commercialAgentName = property(__commercialAgentName.value, __commercialAgentName.set, None, None)

    
    # Element supplyChannelRecordLocator ({http://railgds.net/ws/commontypes}supplyChannelRecordLocator) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element supplierLocator ({http://railgds.net/ws/commontypes}supplierLocator) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element dateBooked ({http://railgds.net/ws/commontypes}dateBooked) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element dateCancelled ({http://railgds.net/ws/commontypes}dateCancelled) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element serviceAlerts ({http://railgds.net/ws/commontypes}serviceAlerts) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element holdExpiration ({http://railgds.net/ws/commontypes}holdExpiration) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element fulfillmentInformation ({http://railgds.net/ws/commontypes}fulfillmentInformation) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element refundEligibility ({http://railgds.net/ws/commontypes}refundEligibility) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element cancellationSummary ({http://railgds.net/ws/commontypes}cancellationSummary) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element rules ({http://railgds.net/ws/commontypes}rules) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element shipmentTrackingInformation ({http://railgds.net/ws/commontypes}shipmentTrackingInformation) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element cancellationReason ({http://railgds.net/ws/commontypes}cancellationReason) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element internalCancellationReason ({http://railgds.net/ws/commontypes}internalCancellationReason) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element availableTicketLanguages ({http://railgds.net/ws/commontypes}availableTicketLanguages) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Element isInventoryCanceled ({http://railgds.net/ws/commontypes}isInventoryCanceled) inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Attribute orderID inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Attribute status inherited from {http://railgds.net/ws/commontypes}OrderType
    
    # Attribute originalOrderID inherited from {http://railgds.net/ws/commontypes}OrderType
    _ElementMap.update({
        __updateable.name() : __updateable,
        __travelSegments.name() : __travelSegments,
        __ticketableFares.name() : __ticketableFares,
        __ticketingOptions.name() : __ticketingOptions,
        __financials.name() : __financials,
        __supplyChannelPassengers.name() : __supplyChannelPassengers,
        __orderNotes.name() : __orderNotes,
        __confirmationInformationRequired.name() : __confirmationInformationRequired,
        __paymentCardRequiredForConfirmationInformation.name() : __paymentCardRequiredForConfirmationInformation,
        __confirmationInformationRequiredOverrides.name() : __confirmationInformationRequiredOverrides,
        __confirmationOptions.name() : __confirmationOptions,
        __selectedConfirmationOption.name() : __selectedConfirmationOption,
        __commercialAgentName.name() : __commercialAgentName
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_107 (PaymentType):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 390, 40)
    _ElementMap = PaymentType._ElementMap.copy()
    _AttributeMap = PaymentType._AttributeMap.copy()
    # Base type is PaymentType
    
    # Element {http://railgds.net/ws/commontypes}priceIDRef uses Python identifier priceIDRef
    __priceIDRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'priceIDRef'), 'priceIDRef', '__httprailgds_netwscommontypes_CTD_ANON_107_httprailgds_netwscommontypespriceIDRef', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 394, 56), )

    
    priceIDRef = property(__priceIDRef.value, __priceIDRef.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}balanceAmount uses Python identifier balanceAmount
    __balanceAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'balanceAmount'), 'balanceAmount', '__httprailgds_netwscommontypes_CTD_ANON_107_httprailgds_netwscommontypesbalanceAmount', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 395, 56), )

    
    balanceAmount = property(__balanceAmount.value, __balanceAmount.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}postingDate uses Python identifier postingDate
    __postingDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'postingDate'), 'postingDate', '__httprailgds_netwscommontypes_CTD_ANON_107_httprailgds_netwscommontypespostingDate', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 396, 56), )

    
    postingDate = property(__postingDate.value, __postingDate.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}receiptNumber uses Python identifier receiptNumber
    __receiptNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'receiptNumber'), 'receiptNumber', '__httprailgds_netwscommontypes_CTD_ANON_107_httprailgds_netwscommontypesreceiptNumber', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 397, 56), )

    
    receiptNumber = property(__receiptNumber.value, __receiptNumber.set, None, None)

    
    # Element {http://railgds.net/ws/commontypes}referenceReceiptNumber uses Python identifier referenceReceiptNumber
    __referenceReceiptNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'referenceReceiptNumber'), 'referenceReceiptNumber', '__httprailgds_netwscommontypes_CTD_ANON_107_httprailgds_netwscommontypesreferenceReceiptNumber', True, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 398, 56), )

    
    referenceReceiptNumber = property(__referenceReceiptNumber.value, __referenceReceiptNumber.set, None, None)

    
    # Element formOfPayment ({http://railgds.net/ws/commontypes}formOfPayment) inherited from {http://railgds.net/ws/commontypes}PaymentType
    
    # Element creditCard ({http://railgds.net/ws/commontypes}creditCard) inherited from {http://railgds.net/ws/commontypes}PaymentType
    
    # Element check ({http://railgds.net/ws/commontypes}check) inherited from {http://railgds.net/ws/commontypes}PaymentType
    
    # Element onAccount ({http://railgds.net/ws/commontypes}onAccount) inherited from {http://railgds.net/ws/commontypes}PaymentType
    
    # Element debitCard ({http://railgds.net/ws/commontypes}debitCard) inherited from {http://railgds.net/ws/commontypes}PaymentType
    
    # Element voucher ({http://railgds.net/ws/commontypes}voucher) inherited from {http://railgds.net/ws/commontypes}PaymentType
    
    # Element eCheck ({http://railgds.net/ws/commontypes}eCheck) inherited from {http://railgds.net/ws/commontypes}PaymentType
    
    # Element amount ({http://railgds.net/ws/commontypes}amount) inherited from {http://railgds.net/ws/commontypes}PaymentType
    
    # Attribute type inherited from {http://railgds.net/ws/commontypes}PaymentType
    _ElementMap.update({
        __priceIDRef.name() : __priceIDRef,
        __balanceAmount.name() : __balanceAmount,
        __postingDate.name() : __postingDate,
        __receiptNumber.name() : __receiptNumber,
        __referenceReceiptNumber.name() : __referenceReceiptNumber
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_108 (MoneyType):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = MoneyValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 518, 16)
    _ElementMap = MoneyType._ElementMap.copy()
    _AttributeMap = MoneyType._AttributeMap.copy()
    # Base type is MoneyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CTD_ANON_108_type', STD_ANON_6, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 521, 19)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 521, 19)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute currency inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute currencySymbol inherited from {http://railgds.net/ws/commontypes}MoneyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })



# Complex type {http://railgds.net/ws/commontypes}CreditCardType with content type ELEMENT_ONLY
class CreditCardType (BaseCreditCardType):
    """Complex type {http://railgds.net/ws/commontypes}CreditCardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CreditCardType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 640, 1)
    _ElementMap = BaseCreditCardType._ElementMap.copy()
    _AttributeMap = BaseCreditCardType._AttributeMap.copy()
    # Base type is BaseCreditCardType
    
    # Element number ({http://railgds.net/ws/commontypes}number) inherited from {http://railgds.net/ws/commontypes}BaseCreditCardType
    
    # Element expirationYearMonth ({http://railgds.net/ws/commontypes}expirationYearMonth) inherited from {http://railgds.net/ws/commontypes}BaseCreditCardType
    
    # Element cardholderName ({http://railgds.net/ws/commontypes}cardholderName) inherited from {http://railgds.net/ws/commontypes}BaseCreditCardType
    
    # Element billingAddress ({http://railgds.net/ws/commontypes}billingAddress) inherited from {http://railgds.net/ws/commontypes}BaseCreditCardType
    
    # Element siteCard ({http://railgds.net/ws/commontypes}siteCard) inherited from {http://railgds.net/ws/commontypes}BaseCreditCardType
    
    # Element paymentToken ({http://railgds.net/ws/commontypes}paymentToken) inherited from {http://railgds.net/ws/commontypes}BaseCreditCardType
    
    # Element {http://railgds.net/ws/commontypes}paymentProcessorInfo uses Python identifier paymentProcessorInfo
    __paymentProcessorInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessorInfo'), 'paymentProcessorInfo', '__httprailgds_netwscommontypes_CreditCardType_httprailgds_netwscommontypespaymentProcessorInfo', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 644, 5), )

    
    paymentProcessorInfo = property(__paymentProcessorInfo.value, __paymentProcessorInfo.set, None, None)

    
    # Attribute type inherited from {http://railgds.net/ws/commontypes}BaseCreditCardType
    _ElementMap.update({
        __paymentProcessorInfo.name() : __paymentProcessorInfo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CreditCardType', CreditCardType)


# Complex type {http://railgds.net/ws/commontypes}DebitCardType with content type ELEMENT_ONLY
class DebitCardType (BaseDebitCardType):
    """Complex type {http://railgds.net/ws/commontypes}DebitCardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DebitCardType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 739, 1)
    _ElementMap = BaseDebitCardType._ElementMap.copy()
    _AttributeMap = BaseDebitCardType._AttributeMap.copy()
    # Base type is BaseDebitCardType
    
    # Element number ({http://railgds.net/ws/commontypes}number) inherited from {http://railgds.net/ws/commontypes}BaseDebitCardType
    
    # Element startYearMonth ({http://railgds.net/ws/commontypes}startYearMonth) inherited from {http://railgds.net/ws/commontypes}BaseDebitCardType
    
    # Element expirationYearMonth ({http://railgds.net/ws/commontypes}expirationYearMonth) inherited from {http://railgds.net/ws/commontypes}BaseDebitCardType
    
    # Element cardholderName ({http://railgds.net/ws/commontypes}cardholderName) inherited from {http://railgds.net/ws/commontypes}BaseDebitCardType
    
    # Element billingAddress ({http://railgds.net/ws/commontypes}billingAddress) inherited from {http://railgds.net/ws/commontypes}BaseDebitCardType
    
    # Element paymentToken ({http://railgds.net/ws/commontypes}paymentToken) inherited from {http://railgds.net/ws/commontypes}BaseDebitCardType
    
    # Element {http://railgds.net/ws/commontypes}paymentProcessorInfo uses Python identifier paymentProcessorInfo
    __paymentProcessorInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessorInfo'), 'paymentProcessorInfo', '__httprailgds_netwscommontypes_DebitCardType_httprailgds_netwscommontypespaymentProcessorInfo', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 743, 5), )

    
    paymentProcessorInfo = property(__paymentProcessorInfo.value, __paymentProcessorInfo.set, None, None)

    
    # Attribute type inherited from {http://railgds.net/ws/commontypes}BaseDebitCardType
    _ElementMap.update({
        __paymentProcessorInfo.name() : __paymentProcessorInfo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DebitCardType', DebitCardType)


# Complex type {http://railgds.net/ws/commontypes}FareTerminalPointType with content type SIMPLE
class FareTerminalPointType (TravelPointType):
    """Complex type {http://railgds.net/ws/commontypes}FareTerminalPointType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FareTerminalPointType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1023, 1)
    _ElementMap = TravelPointType._ElementMap.copy()
    _AttributeMap = TravelPointType._AttributeMap.copy()
    # Base type is TravelPointType
    
    # Attribute unknownFareMapping uses Python identifier unknownFareMapping
    __unknownFareMapping = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'unknownFareMapping'), 'unknownFareMapping', '__httprailgds_netwscommontypes_FareTerminalPointType_unknownFareMapping', pyxb.binding.datatypes.boolean)
    __unknownFareMapping._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1026, 4)
    __unknownFareMapping._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1026, 4)
    
    unknownFareMapping = property(__unknownFareMapping.value, __unknownFareMapping.set, None, None)

    
    # Attribute type inherited from {http://railgds.net/ws/commontypes}TravelPointType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __unknownFareMapping.name() : __unknownFareMapping
    })
Namespace.addCategoryObject('typeBinding', 'FareTerminalPointType', FareTerminalPointType)


# Complex type {http://railgds.net/ws/commontypes}RefundableMoneyType with content type SIMPLE
class RefundableMoneyType (MoneyType):
    """Complex type {http://railgds.net/ws/commontypes}RefundableMoneyType with content type SIMPLE"""
    _TypeDefinition = MoneyValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RefundableMoneyType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1199, 1)
    _ElementMap = MoneyType._ElementMap.copy()
    _AttributeMap = MoneyType._AttributeMap.copy()
    # Base type is MoneyType
    
    # Attribute currency inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute currencySymbol inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute isRefundable uses Python identifier isRefundable
    __isRefundable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isRefundable'), 'isRefundable', '__httprailgds_netwscommontypes_RefundableMoneyType_isRefundable', pyxb.binding.datatypes.boolean)
    __isRefundable._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1202, 4)
    __isRefundable._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1202, 4)
    
    isRefundable = property(__isRefundable.value, __isRefundable.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __isRefundable.name() : __isRefundable
    })
Namespace.addCategoryObject('typeBinding', 'RefundableMoneyType', RefundableMoneyType)


# Complex type {http://railgds.net/ws/commontypes}TotalPriceType with content type SIMPLE
class TotalPriceType (MoneyType):
    """Complex type {http://railgds.net/ws/commontypes}TotalPriceType with content type SIMPLE"""
    _TypeDefinition = MoneyValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TotalPriceType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1207, 4)
    _ElementMap = MoneyType._ElementMap.copy()
    _AttributeMap = MoneyType._AttributeMap.copy()
    # Base type is MoneyType
    
    # Attribute currency inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute currencySymbol inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute isEstimated uses Python identifier isEstimated
    __isEstimated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isEstimated'), 'isEstimated', '__httprailgds_netwscommontypes_TotalPriceType_isEstimated', pyxb.binding.datatypes.boolean)
    __isEstimated._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1210, 16)
    __isEstimated._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1210, 16)
    
    isEstimated = property(__isEstimated.value, __isEstimated.set, None, None)

    
    # Attribute requiresDiscountCode uses Python identifier requiresDiscountCode
    __requiresDiscountCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'requiresDiscountCode'), 'requiresDiscountCode', '__httprailgds_netwscommontypes_TotalPriceType_requiresDiscountCode', pyxb.binding.datatypes.boolean)
    __requiresDiscountCode._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1211, 16)
    __requiresDiscountCode._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1211, 16)
    
    requiresDiscountCode = property(__requiresDiscountCode.value, __requiresDiscountCode.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __isEstimated.name() : __isEstimated,
        __requiresDiscountCode.name() : __requiresDiscountCode
    })
Namespace.addCategoryObject('typeBinding', 'TotalPriceType', TotalPriceType)


# Complex type {http://railgds.net/ws/commontypes}PriceType with content type SIMPLE
class PriceType (MoneyType):
    """Complex type {http://railgds.net/ws/commontypes}PriceType with content type SIMPLE"""
    _TypeDefinition = MoneyValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PriceType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1215, 1)
    _ElementMap = MoneyType._ElementMap.copy()
    _AttributeMap = MoneyType._AttributeMap.copy()
    # Base type is MoneyType
    
    # Attribute currency inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute currencySymbol inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_PriceType_type', STD_ANON_13, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1218, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1218, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute isEstimated uses Python identifier isEstimated
    __isEstimated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isEstimated'), 'isEstimated', '__httprailgds_netwscommontypes_PriceType_isEstimated', pyxb.binding.datatypes.boolean)
    __isEstimated._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1240, 16)
    __isEstimated._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1240, 16)
    
    isEstimated = property(__isEstimated.value, __isEstimated.set, None, None)

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httprailgds_netwscommontypes_PriceType_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1241, 16)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1241, 16)
    
    description = property(__description.value, __description.set, None, None)

    
    # Attribute requiresDiscountCode uses Python identifier requiresDiscountCode
    __requiresDiscountCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'requiresDiscountCode'), 'requiresDiscountCode', '__httprailgds_netwscommontypes_PriceType_requiresDiscountCode', pyxb.binding.datatypes.boolean)
    __requiresDiscountCode._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1242, 16)
    __requiresDiscountCode._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1242, 16)
    
    requiresDiscountCode = property(__requiresDiscountCode.value, __requiresDiscountCode.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __isEstimated.name() : __isEstimated,
        __description.name() : __description,
        __requiresDiscountCode.name() : __requiresDiscountCode
    })
Namespace.addCategoryObject('typeBinding', 'PriceType', PriceType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_109 (MoneyType):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = MoneyValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1249, 16)
    _ElementMap = MoneyType._ElementMap.copy()
    _AttributeMap = MoneyType._AttributeMap.copy()
    # Base type is MoneyType
    
    # Attribute currency inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute currencySymbol inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CTD_ANON_109_type', STD_ANON_14, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1252, 28)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1252, 28)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })



# Complex type {http://railgds.net/ws/commontypes}CostType with content type SIMPLE
class CostType (MoneyType):
    """Complex type {http://railgds.net/ws/commontypes}CostType with content type SIMPLE"""
    _TypeDefinition = MoneyValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CostType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1353, 4)
    _ElementMap = MoneyType._ElementMap.copy()
    _AttributeMap = MoneyType._AttributeMap.copy()
    # Base type is MoneyType
    
    # Attribute currency inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute currencySymbol inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CostType_type', STD_ANON_16, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1356, 16)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1356, 16)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute isEstimated uses Python identifier isEstimated
    __isEstimated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isEstimated'), 'isEstimated', '__httprailgds_netwscommontypes_CostType_isEstimated', pyxb.binding.datatypes.boolean)
    __isEstimated._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1373, 16)
    __isEstimated._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1373, 16)
    
    isEstimated = property(__isEstimated.value, __isEstimated.set, None, None)

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httprailgds_netwscommontypes_CostType_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1374, 16)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1374, 16)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __isEstimated.name() : __isEstimated,
        __description.name() : __description
    })
Namespace.addCategoryObject('typeBinding', 'CostType', CostType)


# Complex type {http://railgds.net/ws/commontypes}CommissionType with content type SIMPLE
class CommissionType (MoneyType):
    """Complex type {http://railgds.net/ws/commontypes}CommissionType with content type SIMPLE"""
    _TypeDefinition = MoneyValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CommissionType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1378, 4)
    _ElementMap = MoneyType._ElementMap.copy()
    _AttributeMap = MoneyType._AttributeMap.copy()
    # Base type is MoneyType
    
    # Attribute currency inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute currencySymbol inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CommissionType_type', STD_ANON_17, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1381, 16)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1381, 16)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute isEstimated uses Python identifier isEstimated
    __isEstimated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isEstimated'), 'isEstimated', '__httprailgds_netwscommontypes_CommissionType_isEstimated', pyxb.binding.datatypes.boolean)
    __isEstimated._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1389, 16)
    __isEstimated._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1389, 16)
    
    isEstimated = property(__isEstimated.value, __isEstimated.set, None, None)

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httprailgds_netwscommontypes_CommissionType_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1390, 16)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1390, 16)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __isEstimated.name() : __isEstimated,
        __description.name() : __description
    })
Namespace.addCategoryObject('typeBinding', 'CommissionType', CommissionType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_110 (MoneyType):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = MoneyValueType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1454, 41)
    _ElementMap = MoneyType._ElementMap.copy()
    _AttributeMap = MoneyType._AttributeMap.copy()
    # Base type is MoneyType
    
    # Attribute currency inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute currencySymbol inherited from {http://railgds.net/ws/commontypes}MoneyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httprailgds_netwscommontypes_CTD_ANON_110_type', STD_ANON_18, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1457, 53)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1457, 53)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })



# Complex type {http://railgds.net/ws/commontypes}QueryTravelPointPairPassType with content type ELEMENT_ONLY
class QueryTravelPointPairPassType (TravelPointPairDateType):
    """Complex type {http://railgds.net/ws/commontypes}QueryTravelPointPairPassType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'QueryTravelPointPairPassType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1682, 1)
    _ElementMap = TravelPointPairDateType._ElementMap.copy()
    _AttributeMap = TravelPointPairDateType._AttributeMap.copy()
    # Base type is TravelPointPairDateType
    
    # Element {http://railgds.net/ws/commontypes}restrictions uses Python identifier restrictions
    __restrictions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'restrictions'), 'restrictions', '__httprailgds_netwscommontypes_QueryTravelPointPairPassType_httprailgds_netwscommontypesrestrictions', False, pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1686, 17), )

    
    restrictions = property(__restrictions.value, __restrictions.set, None, None)

    
    # Element originTravelPoint ({http://railgds.net/ws/commontypes}originTravelPoint) inherited from {http://railgds.net/ws/commontypes}BaseTravelPointPairType
    
    # Element destinationTravelPoint ({http://railgds.net/ws/commontypes}destinationTravelPoint) inherited from {http://railgds.net/ws/commontypes}BaseTravelPointPairType
    
    # Element startDate ({http://railgds.net/ws/commontypes}startDate) inherited from {http://railgds.net/ws/commontypes}TravelPointPairDateType
    
    # Element endDate ({http://railgds.net/ws/commontypes}endDate) inherited from {http://railgds.net/ws/commontypes}TravelPointPairDateType
    _ElementMap.update({
        __restrictions.name() : __restrictions
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'QueryTravelPointPairPassType', QueryTravelPointPairPassType)




AddressType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'company'), pyxb.binding.datatypes.string, scope=AddressType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 11, 3)))

AddressType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'address1'), pyxb.binding.datatypes.string, scope=AddressType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 12, 3)))

AddressType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'address2'), pyxb.binding.datatypes.string, scope=AddressType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 13, 3)))

AddressType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'city'), pyxb.binding.datatypes.string, scope=AddressType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 14, 3)))

AddressType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'stateProv'), StateProvType, scope=AddressType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 15, 3)))

AddressType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zipCode'), pyxb.binding.datatypes.string, scope=AddressType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 16, 3)))

AddressType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'country'), ISOCountryCodeType, scope=AddressType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 17, 3)))

AddressType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'country3'), ISOCountryCode3Type, scope=AddressType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 18, 12)))

AddressType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'email'), pyxb.binding.datatypes.string, scope=AddressType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 19, 12)))

AddressType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressType'), STD_ANON, scope=AddressType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 20, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 11, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 13, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 15, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 16, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 18, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 19, 12))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'company')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 11, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address1')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 12, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address2')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 13, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'city')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 14, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'stateProv')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 15, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zipCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 16, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'country')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 17, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'country3')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 18, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'email')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 19, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AddressType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressType')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 20, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AddressType._Automaton = _BuildAutomaton()




BaseConfirmationCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameLast'), pyxb.binding.datatypes.string, scope=BaseConfirmationCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 123, 12)))

BaseConfirmationCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameFirst'), pyxb.binding.datatypes.string, scope=BaseConfirmationCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 124, 12)))

BaseConfirmationCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameMiddle'), pyxb.binding.datatypes.string, scope=BaseConfirmationCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 125, 12)))

BaseConfirmationCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardNumber'), pyxb.binding.datatypes.string, scope=BaseConfirmationCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 126, 12)))

BaseConfirmationCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentToken'), pyxb.binding.datatypes.string, scope=BaseConfirmationCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 127, 12)))

BaseConfirmationCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth'), pyxb.binding.datatypes.gYearMonth, scope=BaseConfirmationCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 128, 12)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 124, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 125, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 126, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 127, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 128, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseConfirmationCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameLast')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 123, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BaseConfirmationCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameFirst')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 124, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BaseConfirmationCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameMiddle')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 125, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BaseConfirmationCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 126, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BaseConfirmationCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentToken')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 127, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BaseConfirmationCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 128, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseConfirmationCardType._Automaton = _BuildAutomaton_()




selectedConfirmationOptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'creditCardOption'), CTD_ANON_100, scope=selectedConfirmationOptionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 134, 12)))

selectedConfirmationOptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debitCardOption'), CTD_ANON_101, scope=selectedConfirmationOptionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 141, 12)))

selectedConfirmationOptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCardOption'), CTD_ANON, scope=selectedConfirmationOptionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 152, 12)))

selectedConfirmationOptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'personalIdentificationCardOption'), CTD_ANON_, scope=selectedConfirmationOptionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 161, 12)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 134, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 141, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 152, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 161, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(selectedConfirmationOptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'creditCardOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 134, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(selectedConfirmationOptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debitCardOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 141, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(selectedConfirmationOptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCardOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 152, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(selectedConfirmationOptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'personalIdentificationCardOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 161, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
selectedConfirmationOptionType._Automaton = _BuildAutomaton_2()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'program'), pyxb.binding.datatypes.string, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 155, 24)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'identifier'), pyxb.binding.datatypes.string, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 156, 24)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonthDay'), pyxb.binding.datatypes.date, scope=CTD_ANON, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 157, 24)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 157, 24))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'program')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 155, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'identifier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 156, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonthDay')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 157, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_3()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameLast'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 164, 24)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameFirst'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 165, 24)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameMiddle'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 166, 24)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'identifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 167, 24)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'countryCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 168, 24)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonthDay'), pyxb.binding.datatypes.date, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 169, 24)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth'), pyxb.binding.datatypes.date, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 170, 24)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 165, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 166, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 167, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 170, 24))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameLast')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 164, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameFirst')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 165, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameMiddle')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 166, 24))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'identifier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 167, 24))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'countryCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 168, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonthDay')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 169, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 170, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_4()




BaseECheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=BaseECheckType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 180, 3)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseECheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 180, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseECheckType._Automaton = _BuildAutomaton_5()




BaseRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'context'), ContextType, scope=BaseRequestType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 185, 3)))

BaseRequestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'overrides'), CTD_ANON_2, scope=BaseRequestType, documentation='Optional request overrides for testing.', location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 186, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 186, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'context')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 185, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BaseRequestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'overrides')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 186, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseRequestType._Automaton = _BuildAutomaton_6()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'override'), CTD_ANON_3, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 192, 6)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'override')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 192, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_7()




BaseResponseType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'requestStatus'), RequestStatusType, scope=BaseResponseType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 209, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseResponseType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'requestStatus')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 209, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseResponseType._Automaton = _BuildAutomaton_8()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passenger'), PassengerType, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 225, 6)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passenger')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 225, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_9()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'order'), CTD_ANON_106, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 233, 6)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'order')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 233, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_10()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelSegment'), TravelSegmentType, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 242, 12)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 242, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelSegment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 242, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_11()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketableFare'), TicketableFareType, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 251, 12)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketableFare')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 251, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_12()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketingOption'), TicketingOptionType, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 260, 12)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketingOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 260, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_13()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), MoneyType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 269, 12)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'basePrice'), MoneyType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 270, 12)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'upgradePrice'), MoneyType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 272, 12)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accommodationPrice'), MoneyType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 274, 12)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'taxes'), MoneyType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 276, 12)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fees'), MoneyType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 278, 12)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commissionAmount'), MoneyType, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 280, 12)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 270, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 272, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 274, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 276, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 278, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 280, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'totalPrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 269, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'basePrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 270, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'upgradePrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 272, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accommodationPrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 274, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'taxes')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 276, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fees')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 278, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commissionAmount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 280, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_14()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'supplyChannelPassengerReference'), SupplyChannelPassengerReferenceType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 288, 56)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'supplyChannelPassengerReference')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 288, 56))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_15()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderNote'), OrderNoteType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 297, 56)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderNote')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 297, 56))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_16()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentDue'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 326, 6)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentInformation'), STD_ANON_4, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 327, 6)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nextDepositDue'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 336, 6)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minimumDepositAmount'), MoneyType, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 337, 6)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'acceptableFormsOfPayment'), CTD_ANON_13, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 338, 6)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refundIsProcessedOnCancel'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 346, 24)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'confirmationUponAddPayment'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 347, 24)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'confirmationInformationRequired'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 348, 24)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentCardRequiredForConfirmationInformation'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 349, 24)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 336, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 346, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 347, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 348, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 349, 24))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentDue')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 326, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 327, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nextDepositDue')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 336, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'minimumDepositAmount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 337, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'acceptableFormsOfPayment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 338, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refundIsProcessedOnCancel')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 346, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'confirmationUponAddPayment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 347, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'confirmationInformationRequired')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 348, 24))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentCardRequiredForConfirmationInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 349, 24))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_17()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'formOfPayment'), FormOfPaymentType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 341, 9)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formOfPayment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 341, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_18()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'prices'), CTD_ANON_15, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 357, 6)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payments'), CTD_ANON_18, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 386, 24)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 357, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 386, 24))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'prices')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 357, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payments')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 386, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_19()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'price'), CTD_ANON_16, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 360, 9)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'price')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 360, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_20()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 363, 12)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), MoneyType, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 365, 12)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postingDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 366, 12)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commission'), CTD_ANON_17, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 368, 12)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 363, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 366, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 368, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 363, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 365, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postingDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 366, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commission')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 368, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_21()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), MoneyType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 371, 12)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 371, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 371, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_22()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'payment'), CTD_ANON_107, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 389, 36)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'payment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 389, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_23()




UpdateableBookingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerIdentity'), pyxb.binding.datatypes.boolean, scope=UpdateableBookingType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 427, 12)))

UpdateableBookingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerAddress'), pyxb.binding.datatypes.boolean, scope=UpdateableBookingType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 428, 12)))

UpdateableBookingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerContactInfo'), pyxb.binding.datatypes.boolean, scope=UpdateableBookingType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 429, 12)))

UpdateableBookingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard'), pyxb.binding.datatypes.boolean, scope=UpdateableBookingType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 430, 12)))

UpdateableBookingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelDocument'), pyxb.binding.datatypes.boolean, scope=UpdateableBookingType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 431, 12)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateableBookingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerIdentity')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 427, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateableBookingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerAddress')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 428, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateableBookingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerContactInfo')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 429, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateableBookingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 430, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UpdateableBookingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelDocument')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 431, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UpdateableBookingType._Automaton = _BuildAutomaton_24()




UpdateableOrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketOption'), pyxb.binding.datatypes.boolean, scope=UpdateableOrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 436, 12)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UpdateableOrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 436, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UpdateableOrderType._Automaton = _BuildAutomaton_25()




BookingNoteType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=BookingNoteType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 441, 12)))

BookingNoteType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createdDateTime'), pyxb.binding.datatypes.dateTime, scope=BookingNoteType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 442, 12)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 441, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 442, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BookingNoteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 441, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BookingNoteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createdDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 442, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BookingNoteType._Automaton = _BuildAutomaton_26()




OrderNoteType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=OrderNoteType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 449, 12)))

OrderNoteType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createdDateTime'), pyxb.binding.datatypes.dateTime, scope=OrderNoteType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 450, 12)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 449, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 450, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OrderNoteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 449, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OrderNoteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createdDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 450, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OrderNoteType._Automaton = _BuildAutomaton_27()




BaseCancellationOptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refundTarget'), CTD_ANON_102, scope=BaseCancellationOptionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 485, 12)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseCancellationOptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refundTarget')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 485, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseCancellationOptionType._Automaton = _BuildAutomaton_28()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'total'), MoneyType, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 513, 12)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'breakdown'), CTD_ANON_20, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 514, 12)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 514, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'total')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 513, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'breakdown')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 514, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_29()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'component'), CTD_ANON_108, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 517, 15)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 517, 15))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'component')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 517, 15))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_30()




CancellationSummaryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancellationOptions'), CTD_ANON_21, scope=CancellationSummaryType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 548, 12)))

CancellationSummaryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'priceReversals'), CTD_ANON_22, scope=CancellationSummaryType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 556, 3)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 548, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 556, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CancellationSummaryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cancellationOptions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 548, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CancellationSummaryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'priceReversals')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 556, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CancellationSummaryType._Automaton = _BuildAutomaton_31()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancellationOption'), CancellationOptionType, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 551, 24)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cancellationOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 551, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_32()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'total'), MoneyType, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 559, 24)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'breakdown'), CTD_ANON_23, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 560, 24)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 560, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'total')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 559, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'breakdown')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 560, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_33()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'component'), CTD_ANON_24, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 563, 36)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'component')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 563, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_34()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), MoneyType, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 566, 48)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 566, 48))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_35()




CheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=CheckType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 607, 3)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 607, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CheckType._Automaton = _BuildAutomaton_36()




ContextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'distributorCode'), DistributorCodeType, scope=ContextType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 622, 3)))

ContextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pointOfSaleCode'), PointOfSaleCodeType, scope=ContextType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 623, 3)))

ContextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'channel'), ChannelType, scope=ContextType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 628, 4)))

ContextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'channelCode'), ChannelCodeType, scope=ContextType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 629, 4)))

ContextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'agencyCode'), AgencyCodeType, scope=ContextType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 631, 3)))

ContextType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'companyCode'), CompanyCodeType, scope=ContextType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 632, 3)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 631, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 632, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ContextType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distributorCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 622, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ContextType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pointOfSaleCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 623, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ContextType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'channel')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 628, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ContextType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'channelCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 629, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ContextType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'agencyCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 631, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ContextType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'companyCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 632, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ContextType._Automaton = _BuildAutomaton_37()




CouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'couponNumber'), pyxb.binding.datatypes.string, scope=CouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 637, 3)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 637, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'couponNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 637, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CouponType._Automaton = _BuildAutomaton_38()




CustomInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customInformationPair'), CTD_ANON_25, scope=CustomInformationType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 652, 3)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CustomInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customInformationPair')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 652, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CustomInformationType._Automaton = _BuildAutomaton_39()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'key'), pyxb.binding.datatypes.string, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 655, 6)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), pyxb.binding.datatypes.string, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 656, 6)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createdDateTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 659, 6)))

CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updatedDateTime'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 660, 6)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 659, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 660, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'key')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 655, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 656, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createdDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 659, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updatedDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 660, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_40()




CustomerContactType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'contactType'), STD_ANON_7, scope=CustomerContactType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 668, 3)))

CustomerContactType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'contactMedium'), STD_ANON_8, scope=CustomerContactType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 682, 3)))

CustomerContactType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'contactInfo'), pyxb.binding.datatypes.string, scope=CustomerContactType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 692, 3)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CustomerContactType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'contactType')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 668, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CustomerContactType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'contactMedium')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 682, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CustomerContactType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'contactInfo')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 692, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CustomerContactType._Automaton = _BuildAutomaton_41()




CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'title'), pyxb.binding.datatypes.string, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 697, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nameFirst'), NameFirstType, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 698, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nameMiddle'), pyxb.binding.datatypes.string, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 699, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nameLast'), NameLastType, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 700, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'suffix'), pyxb.binding.datatypes.string, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 701, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dob'), pyxb.binding.datatypes.date, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 702, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'gender'), GenderType, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 703, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'residenceInformation'), ResidenceInformationType, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 704, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'address'), AddressType, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 705, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'contactInformation'), CTD_ANON_26, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 706, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ageAtTimeOfTravel'), pyxb.binding.datatypes.int, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 714, 3)))

CustomerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCards'), CTD_ANON_27, scope=CustomerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 715, 12)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 697, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 698, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 699, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 700, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 701, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 702, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 703, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 704, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 705, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 706, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 714, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 715, 12))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'title')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 697, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameFirst')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 698, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameMiddle')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 699, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameLast')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 700, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'suffix')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 701, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dob')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 702, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'gender')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 703, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'residenceInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 704, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 705, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'contactInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 706, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ageAtTimeOfTravel')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 714, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CustomerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCards')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 715, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CustomerType._Automaton = _BuildAutomaton_42()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'contact'), CustomerContactType, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 709, 6)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'contact')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 709, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_43()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard'), PassengerLoyaltyCardType, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 718, 24)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 718, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_44()




DateTimeWindowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'date'), pyxb.binding.datatypes.date, scope=DateTimeWindowType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 726, 3)))

DateTimeWindowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'time'), CTD_ANON_28, scope=DateTimeWindowType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 727, 3)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 727, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DateTimeWindowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'date')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 726, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DateTimeWindowType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'time')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 727, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DateTimeWindowType._Automaton = _BuildAutomaton_45()




ExternalIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenceNumber'), IdentificationType, scope=ExternalIdentificationType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 844, 3)))

ExternalIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'purchaseOrderNumber'), IdentificationType, scope=ExternalIdentificationType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 845, 3)))

ExternalIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerNumber'), IdentificationType, scope=ExternalIdentificationType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 846, 3)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 844, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 845, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 846, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ExternalIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenceNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 844, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ExternalIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'purchaseOrderNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 845, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ExternalIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 846, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ExternalIdentificationType._Automaton = _BuildAutomaton_46()




FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceClass'), ServiceClassType, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 857, 3)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelSegmentIDRef'), pyxb.binding.datatypes.IDREF, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 858, 3)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cabinClass'), CabinClassType, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 859, 3)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rewardsEligible'), YesNoType, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 860, 3)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareClass'), FareClassType, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 861, 3)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareDisplayName'), FareDisplayNameType, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 862, 3)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'openReturn'), YesNoType, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 863, 3)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reservable'), ReservableType, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 864, 3)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reservationRequested'), YesNoType, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 865, 3)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareExpirationDateTime'), pyxb.binding.datatypes.dateTime, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 866, 12)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'seatAssignment'), SeatAssignmentType, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 867, 12)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'seats'), SeatLocationListType, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 868, 12)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'seatPreferences'), CTD_ANON_29, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 869, 3)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amenities'), CTD_ANON_30, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 876, 12)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'services'), CTD_ANON_31, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 883, 12)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilities'), CTD_ANON_33, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 898, 12)))

FareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'optionalPricesRequested'), CTD_ANON_34, scope=FareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 914, 3)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 858, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 859, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 860, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 861, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 862, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 863, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 864, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 865, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 866, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 867, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 868, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 869, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 876, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 883, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 898, 12))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 914, 3))
    counters.add(cc_15)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceClass')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 857, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelSegmentIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 858, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cabinClass')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 859, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rewardsEligible')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 860, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareClass')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 861, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareDisplayName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 862, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'openReturn')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 863, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'reservable')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 864, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'reservationRequested')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 865, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareExpirationDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 866, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'seatAssignment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 867, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'seats')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 868, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'seatPreferences')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 869, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amenities')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 876, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'services')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 883, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilities')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 898, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(FareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'optionalPricesRequested')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 914, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FareCodeType._Automaton = _BuildAutomaton_47()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'seatPreference'), SeatPreferenceType, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 872, 6)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'seatPreference')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 872, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_48()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amenity'), AmenityType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 879, 24)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amenity')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 879, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_49()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'service'), CTD_ANON_32, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 886, 24)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'service')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 886, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_50()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareApplicability'), CTD_ANON_103, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 901, 24)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareApplicability')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 901, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_51()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'optionalPriceIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 917, 6)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'optionalPriceIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 917, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_52()




PassFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceClass'), ServiceClassType, scope=PassFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 926, 3)))

PassFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cabinClass'), CabinClassType, scope=PassFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 927, 3)))

PassFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rewardsEligible'), YesNoType, scope=PassFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 928, 3)))

PassFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareClass'), FareClassType, scope=PassFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 929, 3)))

PassFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareDisplayName'), FareDisplayNameType, scope=PassFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 930, 3)))

PassFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'services'), CTD_ANON_35, scope=PassFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 931, 12)))

PassFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilities'), CTD_ANON_37, scope=PassFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 946, 12)))

PassFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'optionalPricesRequested'), CTD_ANON_38, scope=PassFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 962, 3)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 927, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 928, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 929, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 930, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 931, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 946, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 962, 3))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PassFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceClass')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 926, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PassFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cabinClass')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 927, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PassFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rewardsEligible')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 928, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PassFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareClass')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 929, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PassFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareDisplayName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 930, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PassFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'services')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 931, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PassFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilities')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 946, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PassFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'optionalPricesRequested')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 962, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PassFareCodeType._Automaton = _BuildAutomaton_53()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'service'), CTD_ANON_36, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 934, 24)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'service')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 934, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_54()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareApplicability'), CTD_ANON_104, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 949, 24)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareApplicability')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 949, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_55()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'optionalPriceIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 965, 6)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'optionalPriceIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 965, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_56()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 992, 22)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 992, 22))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_57()




AuthorizationNumbersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorizationNumber'), CTD_ANON_40, scope=AuthorizationNumbersType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1013, 12)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AuthorizationNumbersType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authorizationNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1013, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AuthorizationNumbersType._Automaton = _BuildAutomaton_58()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1016, 24)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1016, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_59()




FeeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=FeeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1032, 3)))

FeeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), MoneyType, scope=FeeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1033, 3)))

FeeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'feeType'), NonValidatedServiceFeeType, scope=FeeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1034, 3)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FeeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1032, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FeeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1033, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FeeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'feeType')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1034, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FeeType._Automaton = _BuildAutomaton_60()




FeesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fee'), FeeType, scope=FeesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1048, 3)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FeesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fee')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1048, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FeesType._Automaton = _BuildAutomaton_61()




CompatiblePricesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'compatiblePriceIDRef'), pyxb.binding.datatypes.IDREF, scope=CompatiblePricesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1111, 12)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CompatiblePricesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'compatiblePriceIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1111, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CompatiblePricesType._Automaton = _BuildAutomaton_62()




LegReferencesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'legIDRef'), pyxb.binding.datatypes.IDREF, scope=LegReferencesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1118, 4)))

LegReferencesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'legSolutionIDRef'), pyxb.binding.datatypes.IDREF, scope=LegReferencesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1119, 4)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LegReferencesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'legIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1118, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LegReferencesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'legSolutionIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1119, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LegReferencesType._Automaton = _BuildAutomaton_63()




LegSolutionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfConnections'), pyxb.binding.datatypes.int, scope=LegSolutionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1125, 3)))

LegSolutionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceAlerts'), CTD_ANON_41, scope=LegSolutionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1126, 3)))

LegSolutionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelSegments'), CTD_ANON_42, scope=LegSolutionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1134, 3)))

LegSolutionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'overtakenJourney'), pyxb.binding.datatypes.boolean, scope=LegSolutionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1142, 3)))

LegSolutionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'duration'), pyxb.binding.datatypes.duration, scope=LegSolutionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1143, 12)))

LegSolutionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingRestrictions'), RoutingRestrictionsType, scope=LegSolutionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1144, 3)))

LegSolutionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerInformationRequired'), CTD_ANON_43, scope=LegSolutionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1145, 12)))

LegSolutionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'availableSeatPreferences'), CTD_ANON_44, scope=LegSolutionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1152, 12)))

LegSolutionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCards'), CTD_ANON_45, scope=LegSolutionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1159, 12)))

LegSolutionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'revisions'), CTD_ANON_46, scope=LegSolutionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1166, 3)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1125, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1126, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1142, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1143, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1144, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1145, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1152, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1159, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1166, 3))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LegSolutionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfConnections')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1125, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LegSolutionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceAlerts')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1126, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LegSolutionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelSegments')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1134, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LegSolutionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'overtakenJourney')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1142, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LegSolutionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'duration')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1143, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LegSolutionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingRestrictions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1144, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LegSolutionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerInformationRequired')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1145, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LegSolutionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'availableSeatPreferences')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1152, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LegSolutionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCards')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1159, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LegSolutionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'revisions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1166, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LegSolutionType._Automaton = _BuildAutomaton_64()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceAlert'), ServiceAlertType, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1129, 6)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceAlert')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1129, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_65()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelSegment'), TravelSegmentType, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1137, 6)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelSegment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1137, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_66()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerInformation'), PassengerInformationType, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1148, 24)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1148, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_67()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'availableSeatPreference'), AvailableSeatPreferenceType, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1155, 24)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'availableSeatPreference')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1155, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_68()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard'), LoyaltyCardType, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1162, 24)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1162, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_69()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'revision'), RevisionType, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1169, 6)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'revision')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1169, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_70()




LegSolutionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'legSolution'), LegSolutionType, scope=LegSolutionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1178, 3)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1178, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LegSolutionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'legSolution')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1178, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LegSolutionsType._Automaton = _BuildAutomaton_71()




LegType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint'), TravelPointType, scope=LegType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1184, 3)))

LegType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint'), TravelPointType, scope=LegType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1185, 3)))

LegType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'legSolutions'), LegSolutionsType, scope=LegType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1186, 3)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LegType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1184, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LegType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1185, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LegType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'legSolutions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1186, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LegType._Automaton = _BuildAutomaton_72()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelSegmentIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1271, 24)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelSegmentIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1271, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_73()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareCode'), OptionalPriceFareCodeType, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1281, 12)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1281, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_74()




OptionalPriceFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceClass'), ServiceClassType, scope=OptionalPriceFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1313, 3)))

OptionalPriceFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelSegmentIDRef'), pyxb.binding.datatypes.IDREF, scope=OptionalPriceFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1314, 3)))

OptionalPriceFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cabinClass'), CabinClassType, scope=OptionalPriceFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1315, 3)))

OptionalPriceFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareClass'), FareClassType, scope=OptionalPriceFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1316, 3)))

OptionalPriceFareCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareDisplayName'), FareDisplayNameType, scope=OptionalPriceFareCodeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1317, 3)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1313, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1314, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1315, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1317, 3))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OptionalPriceFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceClass')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1313, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OptionalPriceFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelSegmentIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1314, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OptionalPriceFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cabinClass')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1315, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OptionalPriceFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareClass')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1316, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OptionalPriceFareCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareDisplayName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1317, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OptionalPriceFareCodeType._Automaton = _BuildAutomaton_75()




ConsumptionRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ageBreakConsumptionRule'), AgeBreakConsumptionRuleType, scope=ConsumptionRulesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1323, 3)))

ConsumptionRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'totalPassengersConsumptionRule'), TotalPassengersConsumptionRuleType, scope=ConsumptionRulesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1324, 3)))

ConsumptionRulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelCardZoneConsumptionRule'), TravelCardZoneConsumptionRuleType, scope=ConsumptionRulesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1325, 3)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1323, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1324, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1325, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConsumptionRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ageBreakConsumptionRule')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1323, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConsumptionRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'totalPassengersConsumptionRule')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1324, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConsumptionRulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelCardZoneConsumptionRule')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1325, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ConsumptionRulesType._Automaton = _BuildAutomaton_76()




TravelCardZoneConsumptionRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelCardZone'), pyxb.binding.datatypes.string, scope=TravelCardZoneConsumptionRuleType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1349, 12)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TravelCardZoneConsumptionRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelCardZone')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1349, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TravelCardZoneConsumptionRuleType._Automaton = _BuildAutomaton_77()




OnAccountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=OnAccountType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1401, 3)))

OnAccountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'validationCode'), pyxb.binding.datatypes.string, scope=OnAccountType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1402, 3)))

OnAccountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accountName'), pyxb.binding.datatypes.string, scope=OnAccountType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1403, 3)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OnAccountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1401, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OnAccountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'validationCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1402, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OnAccountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accountName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1403, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OnAccountType._Automaton = _BuildAutomaton_78()




ShippingInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shippingName'), pyxb.binding.datatypes.string, scope=ShippingInformationType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1410, 12)))

ShippingInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shippingAddress'), AddressType, scope=ShippingInformationType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1411, 12)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1410, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1411, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ShippingInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shippingName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1410, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ShippingInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shippingAddress')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1411, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ShippingInformationType._Automaton = _BuildAutomaton_79()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceAlert'), ServiceAlertType, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1424, 6)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceAlert')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1424, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_80()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'selectedTicketingOption'), TicketingOptionType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1433, 6)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shippingName'), pyxb.binding.datatypes.string, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1435, 6)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shippingAddress'), AddressType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1436, 6)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'valueDocument'), ValueDocumentType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1437, 6)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber'), FulfillmentPhoneNumberType, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1438, 24)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1433, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1435, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1436, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1437, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1438, 24))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'selectedTicketingOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1433, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shippingName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1435, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shippingAddress')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1436, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'valueDocument')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1437, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1438, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_81()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'penalty'), MoneyType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1449, 6)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'penaltyBreakdown'), CTD_ANON_52, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1450, 24)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1449, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1450, 24))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'penalty')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1449, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'penaltyBreakdown')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1450, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_82()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'penaltyItem'), CTD_ANON_110, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1453, 37)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'penaltyItem')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1453, 37))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_83()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipmentTracking'), ShipmentTrackingType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1487, 6)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipmentTracking')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1487, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_84()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'language'), pyxb.binding.datatypes.string, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1499, 24)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'language')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1499, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_85()




PassengerSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'age'), pyxb.binding.datatypes.int, scope=PassengerSpecType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1543, 4)))

PassengerSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth'), pyxb.binding.datatypes.date, scope=PassengerSpecType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1544, 4)))

PassengerSpecType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'residenceInformation'), ResidenceInformationType, scope=PassengerSpecType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1546, 3)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1546, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PassengerSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'age')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1543, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PassengerSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateOfBirth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1544, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PassengerSpecType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'residenceInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1546, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PassengerSpecType._Automaton = _BuildAutomaton_86()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelDocument'), TravelDocumentType, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1558, 8)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelDocument')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1558, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_87()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1569, 8)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1569, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_88()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'crmNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1580, 32)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'username'), pyxb.binding.datatypes.string, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1581, 32)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1582, 32)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerSource'), pyxb.binding.datatypes.string, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1583, 32)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'campaignReference'), pyxb.binding.datatypes.string, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1584, 32)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1580, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1581, 32))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1582, 32))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1583, 32))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1584, 32))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'crmNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1580, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'username')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1581, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1582, 32))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerSource')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1583, 32))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'campaignReference')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1584, 32))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_89()




PaymentProcessorInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approvalNumber'), pyxb.binding.datatypes.string, scope=PaymentProcessorInfoType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1605, 3)))

PaymentProcessorInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessor'), pyxb.binding.datatypes.string, scope=PaymentProcessorInfoType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1606, 3)))

PaymentProcessorInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'doingBusinessAs'), pyxb.binding.datatypes.string, scope=PaymentProcessorInfoType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1607, 3)))

PaymentProcessorInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'error'), CTD_ANON_58, scope=PaymentProcessorInfoType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1608, 3)))

PaymentProcessorInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'descriptiveBillingInformationCollection'), CTD_ANON_59, scope=PaymentProcessorInfoType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1617, 3)))

PaymentProcessorInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transactionCode'), pyxb.binding.datatypes.string, scope=PaymentProcessorInfoType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1625, 3)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1605, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1607, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1608, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1617, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1625, 3))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PaymentProcessorInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'approvalNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1605, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PaymentProcessorInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessor')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1606, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PaymentProcessorInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'doingBusinessAs')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1607, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PaymentProcessorInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'error')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1608, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PaymentProcessorInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'descriptiveBillingInformationCollection')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1617, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PaymentProcessorInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transactionCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1625, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PaymentProcessorInfoType._Automaton = _BuildAutomaton_90()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'descriptiveBillingInformation'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1620, 6)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=10, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1620, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'descriptiveBillingInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1620, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_91()




PointToPointPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), TotalPriceType, scope=PointToPointPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1663, 3)))

PointToPointPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketableFares'), CTD_ANON_60, scope=PointToPointPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1664, 3)))

PointToPointPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'legReferences'), LegReferencesType, scope=PointToPointPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1672, 3)))

PointToPointPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareMerchandisingRank'), pyxb.binding.datatypes.int, scope=PointToPointPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1673, 3)))

PointToPointPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'holdExpiration'), HoldExpirationType, scope=PointToPointPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1674, 3)))

PointToPointPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'compatiblePrices'), CompatiblePricesType, scope=PointToPointPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1675, 12)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1672, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1673, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1674, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1675, 12))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PointToPointPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'totalPrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1663, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PointToPointPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketableFares')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1664, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PointToPointPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'legReferences')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1672, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PointToPointPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareMerchandisingRank')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1673, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PointToPointPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'holdExpiration')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1674, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PointToPointPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'compatiblePrices')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1675, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PointToPointPriceType._Automaton = _BuildAutomaton_92()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketableFare'), TicketableFareType, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1667, 6)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketableFare')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1667, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_93()




PassPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), TotalPriceType, scope=PassPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1694, 3)))

PassPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketableFares'), CTD_ANON_61, scope=PassPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1695, 3)))

PassPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareMerchandisingRank'), pyxb.binding.datatypes.int, scope=PassPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1703, 3)))

PassPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'holdExpiration'), HoldExpirationType, scope=PassPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1704, 3)))

PassPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'compatiblePrices'), CompatiblePricesType, scope=PassPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1705, 12)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1703, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1704, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1705, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PassPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'totalPrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1694, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PassPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketableFares')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1695, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PassPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareMerchandisingRank')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1703, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PassPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'holdExpiration')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1704, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PassPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'compatiblePrices')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1705, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PassPriceType._Automaton = _BuildAutomaton_94()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketableFare'), PassTicketableFareType, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1698, 6)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketableFare')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1698, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_95()




RequestStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'success'), pyxb.binding.datatypes.boolean, scope=RequestStatusType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1713, 3)))

RequestStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'statusMessages'), CTD_ANON_105, scope=RequestStatusType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1714, 3)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1714, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RequestStatusType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'success')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1713, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RequestStatusType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'statusMessages')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1714, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RequestStatusType._Automaton = _BuildAutomaton_96()




ResidenceInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'countryCode'), ISOCountryCodeType, scope=ResidenceInformationType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1741, 3)))

ResidenceInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'stateProv'), StateProvType, scope=ResidenceInformationType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1742, 3)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1742, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResidenceInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'countryCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1741, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResidenceInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'stateProv')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1742, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResidenceInformationType._Automaton = _BuildAutomaton_97()




RoutingRestrictionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingRestriction'), RoutingRestrictionType, scope=RoutingRestrictionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1747, 3)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RoutingRestrictionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingRestriction')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1747, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RoutingRestrictionsType._Automaton = _BuildAutomaton_98()




RulesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rule'), RuleType, scope=RulesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1776, 3)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RulesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rule')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1776, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RulesType._Automaton = _BuildAutomaton_99()




SeatAssignmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coach'), pyxb.binding.datatypes.string, scope=SeatAssignmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1861, 3)))

SeatAssignmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=SeatAssignmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1862, 3)))

SeatAssignmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'direction'), SeatAssignmentDirectionType, scope=SeatAssignmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1863, 3)))

SeatAssignmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'seatAttributes'), CTD_ANON_62, scope=SeatAssignmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1864, 12)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1864, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SeatAssignmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coach')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1861, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SeatAssignmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1862, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SeatAssignmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1863, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SeatAssignmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'seatAttributes')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1864, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SeatAssignmentType._Automaton = _BuildAutomaton_100()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'seatAttribute'), SeatAttributeType, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1867, 24)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'seatAttribute')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1867, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_101()




SeatLocationListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'seat'), ExactSeatLocationType, scope=SeatLocationListType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1877, 12)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SeatLocationListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'seat')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1877, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SeatLocationListType._Automaton = _BuildAutomaton_102()




ExactSeatLocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coach'), pyxb.binding.datatypes.string, scope=ExactSeatLocationType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1883, 12)))

ExactSeatLocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=ExactSeatLocationType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1884, 12)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ExactSeatLocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coach')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1883, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ExactSeatLocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1884, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ExactSeatLocationType._Automaton = _BuildAutomaton_103()




LoyaltyCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marketingCarrier'), pyxb.binding.datatypes.string, scope=LoyaltyCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1950, 12)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LoyaltyCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'marketingCarrier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1950, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LoyaltyCardType._Automaton = _BuildAutomaton_104()




SegmentServiceListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'station'), pyxb.binding.datatypes.string, scope=SegmentServiceListType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1958, 3)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SegmentServiceListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'station')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1958, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SegmentServiceListType._Automaton = _BuildAutomaton_105()




ServiceAlertType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'summary'), pyxb.binding.datatypes.string, scope=ServiceAlertType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1964, 3)))

ServiceAlertType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=ServiceAlertType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1965, 3)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ServiceAlertType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'summary')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1964, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ServiceAlertType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1965, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ServiceAlertType._Automaton = _BuildAutomaton_106()




ShipmentTrackingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipmentDate'), pyxb.binding.datatypes.date, scope=ShipmentTrackingType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1986, 3)))

ShipmentTrackingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deliveryMethod'), pyxb.binding.datatypes.string, scope=ShipmentTrackingType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1987, 3)))

ShipmentTrackingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'trackingNumber'), pyxb.binding.datatypes.string, scope=ShipmentTrackingType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1988, 3)))

ShipmentTrackingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipperUrl'), pyxb.binding.datatypes.string, scope=ShipmentTrackingType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1989, 3)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1988, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1989, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ShipmentTrackingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipmentDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1986, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ShipmentTrackingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deliveryMethod')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1987, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ShipmentTrackingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'trackingNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1988, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ShipmentTrackingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipperUrl')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1989, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ShipmentTrackingType._Automaton = _BuildAutomaton_107()




StatusMessageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=StatusMessageType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1999, 3)))

StatusMessageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'code'), pyxb.binding.datatypes.string, scope=StatusMessageType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2000, 3)))

StatusMessageType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'internal'), pyxb.binding.datatypes.string, scope=StatusMessageType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2001, 12)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2001, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatusMessageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1999, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatusMessageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'code')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2000, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StatusMessageType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'internal')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2001, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StatusMessageType._Automaton = _BuildAutomaton_108()




TaxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=TaxType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2006, 3)))

TaxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), MoneyType, scope=TaxType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2007, 3)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TaxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2006, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TaxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2007, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TaxType._Automaton = _BuildAutomaton_109()




TaxesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), MoneyType, scope=TaxesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2012, 3)))

TaxesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tax'), TaxType, scope=TaxesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2013, 3)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TaxesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'totalPrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2012, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TaxesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tax')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2013, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TaxesType._Automaton = _BuildAutomaton_110()




TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), TotalPriceType, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2018, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerReferences'), CTD_ANON_63, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2019, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'prices'), CTD_ANON_67, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2055, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'optionalPrices'), CTD_ANON_68, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2063, 12)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'costs'), CTD_ANON_69, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2070, 12)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commissions'), CTD_ANON_70, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2078, 12)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commissionAmount'), MoneyType, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2086, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rules'), RulesType, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2087, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareQualifiers'), CTD_ANON_71, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2088, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancelEligibility'), pyxb.binding.datatypes.boolean, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2096, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancelFee'), MoneyType, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2097, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionsAvailable'), CTD_ANON_72, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2098, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareOrigin'), FareTerminalPointType, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2109, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminals'), CTD_ANON_73, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2110, 12)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareDestination'), FareTerminalPointType, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2119, 3)))

TicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminals'), CTD_ANON_74, scope=TicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2121, 12)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2063, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2070, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2078, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2086, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2087, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2088, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2096, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2097, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2098, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2109, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2110, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2119, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2121, 12))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'totalPrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2018, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerReferences')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2019, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'prices')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2055, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'optionalPrices')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2063, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'costs')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2070, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commissions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2078, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commissionAmount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2086, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rules')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2087, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareQualifiers')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2088, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cancelEligibility')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2096, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cancelFee')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2097, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionsAvailable')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2098, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareOrigin')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2109, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminals')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2110, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareDestination')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2119, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminals')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2121, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TicketableFareType._Automaton = _BuildAutomaton_111()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerReference'), CTD_ANON_64, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2022, 6)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerReference')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2022, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_112()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2025, 9)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerTypeCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2026, 9)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareCodes'), CTD_ANON_65, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2027, 9)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerFareQualifiers'), CTD_ANON_66, scope=CTD_ANON_64, documentation='passengerFareQualifiers have been deprecated. They have been replaced by loyaltyCards.', location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2035, 9)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareQualifierIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2047, 9)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2035, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2047, 9))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2025, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerTypeCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2026, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareCodes')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2027, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerFareQualifiers')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2035, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareQualifierIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2047, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_113()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareCode'), FareCodeType, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2030, 12)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2030, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_114()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerFareQualifier'), PassengerFareQualifierType, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2041, 12)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerFareQualifier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2041, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_115()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'price'), PriceType, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2058, 6)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'price')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2058, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_116()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'optionalPrice'), OptionalPriceType, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2066, 24)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'optionalPrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2066, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_117()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cost'), CostType, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2073, 24)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cost')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2073, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_118()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commission'), CommissionType, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2081, 24)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commission')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2081, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_119()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareQualifier'), FareQualifierType, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2091, 6)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareQualifier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2091, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_120()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminal'), FareTerminalPointType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2113, 24)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminal')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2113, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_121()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminal'), FareTerminalPointType, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2124, 24)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminal')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2124, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_122()




PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'totalPrice'), TotalPriceType, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2140, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerReferences'), CTD_ANON_75, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2141, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'prices'), CTD_ANON_78, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2165, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'optionalPrices'), CTD_ANON_79, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2173, 12)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'costs'), CTD_ANON_80, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2180, 12)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commissions'), CTD_ANON_81, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2188, 12)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commissionAmount'), MoneyType, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2196, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rules'), RulesType, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2197, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareQualifiers'), CTD_ANON_82, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2198, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancelEligibility'), pyxb.binding.datatypes.boolean, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2206, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancelFee'), MoneyType, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2207, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionsAvailable'), CTD_ANON_83, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2208, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareOrigin'), FareTerminalPointType, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2219, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminals'), CTD_ANON_84, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2220, 12)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareDestination'), FareTerminalPointType, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2229, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminals'), CTD_ANON_85, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2231, 12)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareStartDate'), pyxb.binding.datatypes.date, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2241, 3)))

PassTicketableFareType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareExpirationDate'), pyxb.binding.datatypes.date, scope=PassTicketableFareType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2243, 12)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2173, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2180, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2188, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2196, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2197, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2198, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2206, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2207, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2208, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2219, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2220, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2229, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2231, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2241, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2243, 12))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'totalPrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2140, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerReferences')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2141, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'prices')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2165, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'optionalPrices')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2173, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'costs')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2180, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commissions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2188, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commissionAmount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2196, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rules')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2197, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareQualifiers')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2198, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cancelEligibility')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2206, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cancelFee')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2207, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionsAvailable')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2208, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareOrigin')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2219, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminals')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2220, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareDestination')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2229, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminals')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2231, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareStartDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2241, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PassTicketableFareType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareExpirationDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2243, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PassTicketableFareType._Automaton = _BuildAutomaton_123()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerReference'), CTD_ANON_76, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2144, 6)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerReference')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2144, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_124()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2147, 9)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerTypeCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2148, 9)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareCodes'), CTD_ANON_77, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2149, 9)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareQualifierIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2157, 9)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2157, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2147, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerTypeCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2148, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareCodes')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2149, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareQualifierIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2157, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_125()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareCode'), PassFareCodeType, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2152, 12)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2152, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_126()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'price'), PriceType, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2168, 6)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'price')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2168, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_127()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'optionalPrice'), OptionalPriceType, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2176, 24)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'optionalPrice')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2176, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_128()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cost'), CostType, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2183, 24)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cost')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2183, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_129()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commission'), CommissionType, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2191, 24)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commission')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2191, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_130()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareQualifier'), FareQualifierType, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2201, 6)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareQualifier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2201, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_131()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminal'), FareTerminalPointType, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2223, 24)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareOriginTerminal')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2223, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_132()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminal'), FareTerminalPointType, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2234, 24)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareDestinationTerminal')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2234, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_133()




SupplyChannelPassengerReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef'), pyxb.binding.datatypes.IDREF, scope=SupplyChannelPassengerReferenceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2255, 12)))

SupplyChannelPassengerReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nameFirst'), pyxb.binding.datatypes.string, scope=SupplyChannelPassengerReferenceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2256, 12)))

SupplyChannelPassengerReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nameMiddle'), pyxb.binding.datatypes.string, scope=SupplyChannelPassengerReferenceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2257, 12)))

SupplyChannelPassengerReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nameLast'), pyxb.binding.datatypes.string, scope=SupplyChannelPassengerReferenceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2258, 12)))

SupplyChannelPassengerReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCards'), CTD_ANON_86, scope=SupplyChannelPassengerReferenceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2259, 12)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2256, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2257, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2258, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2259, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SupplyChannelPassengerReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2255, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SupplyChannelPassengerReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameFirst')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2256, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SupplyChannelPassengerReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameMiddle')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2257, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SupplyChannelPassengerReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameLast')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2258, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SupplyChannelPassengerReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCards')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2259, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SupplyChannelPassengerReferenceType._Automaton = _BuildAutomaton_134()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard'), PassengerLoyaltyCardType, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2262, 24)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2262, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_135()




TravelPointPairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint'), TravelPointType, scope=TravelPointPairType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2299, 3)))

TravelPointPairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint'), TravelPointType, scope=TravelPointPairType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2300, 3)))

TravelPointPairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'departureDateTimeWindow'), DateTimeWindowType, scope=TravelPointPairType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2301, 3)))

TravelPointPairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'arrivalDateTimeWindow'), DateTimeWindowType, scope=TravelPointPairType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2302, 3)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2301, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2302, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TravelPointPairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2299, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TravelPointPairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2300, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TravelPointPairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'departureDateTimeWindow')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2301, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TravelPointPairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'arrivalDateTimeWindow')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2302, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TravelPointPairType._Automaton = _BuildAutomaton_136()




BaseTravelPointPairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint'), TravelPointType, scope=BaseTravelPointPairType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2307, 6)))

BaseTravelPointPairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint'), TravelPointType, scope=BaseTravelPointPairType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2308, 6)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseTravelPointPairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2307, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseTravelPointPairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2308, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseTravelPointPairType._Automaton = _BuildAutomaton_137()




CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amenity'), AmenityType, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2346, 6)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amenity')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2346, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_138()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viaTravelPoint'), TravelPointType, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2358, 6)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'viaTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2358, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_139()




TravelDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'documentNumber'), pyxb.binding.datatypes.string, scope=TravelDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2383, 3)))

TravelDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'documentType'), STD_ANON_30, scope=TravelDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2384, 3)))

TravelDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expirationDate'), pyxb.binding.datatypes.date, scope=TravelDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2395, 3)))

TravelDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'issuingAuthority'), CTD_ANON_89, scope=TravelDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2396, 3)))

TravelDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'documentAffiliation'), STD_ANON_31, scope=TravelDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2404, 3)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2404, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TravelDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'documentNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2383, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TravelDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'documentType')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2384, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TravelDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2395, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TravelDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'issuingAuthority')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2396, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TravelDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'documentAffiliation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2404, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TravelDocumentType._Automaton = _BuildAutomaton_140()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'countryCode'), ISOCountryCodeType, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2399, 6)))

CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'stateProv'), StateProvType, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2400, 6)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2400, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'countryCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2399, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'stateProv')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2400, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_141()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coupon'), ValueDocumentCouponType, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2467, 24)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coupon')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2467, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_142()




VoucherType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=VoucherType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2503, 3)))

VoucherType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'validationCode'), pyxb.binding.datatypes.string, scope=VoucherType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2504, 12)))

VoucherType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'recipientName'), pyxb.binding.datatypes.string, scope=VoucherType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2505, 3)))

VoucherType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expirationDate'), pyxb.binding.datatypes.date, scope=VoucherType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2506, 3)))

VoucherType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), MoneyType, scope=VoucherType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2507, 12)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2504, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2507, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VoucherType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2503, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VoucherType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'validationCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2504, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VoucherType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'recipientName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2505, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VoucherType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2506, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VoucherType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2507, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VoucherType._Automaton = _BuildAutomaton_143()




TypesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.binding.datatypes.string, scope=TypesType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2558, 12)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TypesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2558, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TypesType._Automaton = _BuildAutomaton_144()




PaymentRequirementsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'acceptableFormsOfPayment'), CTD_ANON_93, scope=PaymentRequirementsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2563, 12)))

PaymentRequirementsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'confirmationUponAddPayment'), pyxb.binding.datatypes.boolean, scope=PaymentRequirementsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2571, 12)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PaymentRequirementsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'acceptableFormsOfPayment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2563, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PaymentRequirementsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'confirmationUponAddPayment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2571, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PaymentRequirementsType._Automaton = _BuildAutomaton_145()




CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'formOfPayment'), FormOfPaymentType, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2566, 24)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formOfPayment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2566, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_146()




BaseTransactionFeeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fee'), MoneyType, scope=BaseTransactionFeeType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2578, 3)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseTransactionFeeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fee')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2578, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseTransactionFeeType._Automaton = _BuildAutomaton_147()




ConfirmationOptionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'creditCardOption'), CTD_ANON_94, scope=ConfirmationOptionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2586, 3)))

ConfirmationOptionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debitCardOption'), CTD_ANON_95, scope=ConfirmationOptionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2593, 3)))

ConfirmationOptionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCardOption'), CTD_ANON_96, scope=ConfirmationOptionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2601, 3)))

ConfirmationOptionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'personalInformationCardOption'), CTD_ANON_98, scope=ConfirmationOptionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2616, 3)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2586, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2593, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2601, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2616, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConfirmationOptionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'creditCardOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2586, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConfirmationOptionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debitCardOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2593, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConfirmationOptionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCardOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2601, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ConfirmationOptionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'personalInformationCardOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2616, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ConfirmationOptionsType._Automaton = _BuildAutomaton_148()




CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'types'), TypesType, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2589, 6)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'types')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2589, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_94._Automaton = _BuildAutomaton_149()




CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'types'), TypesType, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2596, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sortCodeRequired'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2597, 6)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'types')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2596, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sortCodeRequired')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2597, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_95._Automaton = _BuildAutomaton_150()




CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'programs'), CTD_ANON_97, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2604, 6)))

CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expirationDateRequired'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2612, 6)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'programs')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2604, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationDateRequired')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2612, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_96._Automaton = _BuildAutomaton_151()




CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'program'), pyxb.binding.datatypes.string, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2607, 9)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'program')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2607, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_97._Automaton = _BuildAutomaton_152()




CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'countryCodes'), CTD_ANON_99, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2619, 6)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'countryCodes')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2619, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_98._Automaton = _BuildAutomaton_153()




CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'countryCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_99, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2622, 9)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'countryCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2622, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_99._Automaton = _BuildAutomaton_154()




ConfirmationInformationRequiredOverrideType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionCode'), TicketingCodeConfirmationRequiredOverride, scope=ConfirmationInformationRequiredOverrideType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2642, 3)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2642, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConfirmationInformationRequiredOverrideType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2642, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ConfirmationInformationRequiredOverrideType._Automaton = _BuildAutomaton_155()




BaseTravelPointRestrictionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'carrierRestriction'), CarrierRestrictionsType, scope=BaseTravelPointRestrictionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2684, 20)))

BaseTravelPointRestrictionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'equipmentTypeRestrictions'), EquipmentTypeRestrictionsType, scope=BaseTravelPointRestrictionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2685, 20)))

BaseTravelPointRestrictionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingRestrictions'), RoutingRestrictionsType, scope=BaseTravelPointRestrictionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2686, 8)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2684, 20))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2685, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2686, 8))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BaseTravelPointRestrictionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'carrierRestriction')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2684, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BaseTravelPointRestrictionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'equipmentTypeRestrictions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2685, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BaseTravelPointRestrictionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingRestrictions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2686, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BaseTravelPointRestrictionsType._Automaton = _BuildAutomaton_156()




RevisionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reason'), RevisionReasonType, scope=RevisionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2692, 3)))

RevisionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'revisedDepartureDateTime'), pyxb.binding.datatypes.dateTime, scope=RevisionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2693, 3)))

RevisionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'revisedArrivalDateTime'), pyxb.binding.datatypes.dateTime, scope=RevisionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2694, 3)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2692, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2693, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2694, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RevisionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'reason')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2692, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RevisionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'revisedDepartureDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2693, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RevisionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'revisedArrivalDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2694, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RevisionType._Automaton = _BuildAutomaton_157()




def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
RevisionReasonType._Automaton = _BuildAutomaton_158()




BaseCreditCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=BaseCreditCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 81, 12)))

BaseCreditCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth'), pyxb.binding.datatypes.gYearMonth, scope=BaseCreditCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 82, 3)))

BaseCreditCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderName'), pyxb.binding.datatypes.string, scope=BaseCreditCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 83, 3)))

BaseCreditCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billingAddress'), AddressType, scope=BaseCreditCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 84, 3)))

BaseCreditCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteCard'), pyxb.binding.datatypes.boolean, scope=BaseCreditCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 85, 3)))

BaseCreditCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentToken'), pyxb.binding.datatypes.string, scope=BaseCreditCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 86, 12)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 81, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 85, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 86, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseCreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 81, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseCreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 82, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseCreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 83, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseCreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billingAddress')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 84, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BaseCreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 85, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BaseCreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentToken')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 86, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseCreditCardType._Automaton = _BuildAutomaton_159()




BaseDebitCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'number'), pyxb.binding.datatypes.string, scope=BaseDebitCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 104, 12)))

BaseDebitCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startYearMonth'), pyxb.binding.datatypes.gYearMonth, scope=BaseDebitCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 105, 3)))

BaseDebitCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth'), pyxb.binding.datatypes.gYearMonth, scope=BaseDebitCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 106, 3)))

BaseDebitCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cardholderName'), pyxb.binding.datatypes.string, scope=BaseDebitCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 107, 3)))

BaseDebitCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'billingAddress'), AddressType, scope=BaseDebitCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 108, 3)))

BaseDebitCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentToken'), pyxb.binding.datatypes.string, scope=BaseDebitCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 109, 12)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 104, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 105, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 109, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseDebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 104, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseDebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startYearMonth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 105, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseDebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 106, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseDebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 107, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseDebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billingAddress')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 108, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BaseDebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentToken')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 109, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseDebitCardType._Automaton = _BuildAutomaton_160()




def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 124, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 125, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 126, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 127, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 128, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameLast')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 123, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameFirst')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 124, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameMiddle')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 125, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 126, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentToken')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 127, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 128, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_100._Automaton = _BuildAutomaton_161()




CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sortCode'), pyxb.binding.datatypes.string, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 146, 32)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 142, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 124, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 125, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 126, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 127, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 128, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 146, 32))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameLast')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 123, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameFirst')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 124, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderNameMiddle')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 125, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 126, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentToken')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 127, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 128, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sortCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 146, 32))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_101._Automaton = _BuildAutomaton_162()




BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateable'), UpdateableBookingType, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 216, 12)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bookingDate'), pyxb.binding.datatypes.date, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 217, 3)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'departureDate'), pyxb.binding.datatypes.date, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 218, 3)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberOfOrders'), pyxb.binding.datatypes.int, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 219, 3)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'revenueTotal'), MoneyType, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 220, 3)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'receiptsTotal'), MoneyType, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 221, 3)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengers'), CTD_ANON_4, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 222, 3)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orders'), CTD_ANON_5, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 230, 3)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentRequirements'), CTD_ANON_12, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 323, 3)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceFeeAllowed'), pyxb.binding.datatypes.boolean, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 353, 12)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'financials'), CTD_ANON_14, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 354, 3)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'externalIdentification'), ExternalIdentificationType, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 410, 3)))

BookingRecordType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customInformation'), CustomInformationType, scope=BookingRecordType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 411, 3)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 216, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 323, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 353, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 354, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 410, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 411, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updateable')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 216, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bookingDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 217, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'departureDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 218, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberOfOrders')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 219, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'revenueTotal')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 220, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'receiptsTotal')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 221, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengers')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 222, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orders')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 230, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentRequirements')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 323, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceFeeAllowed')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 353, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'financials')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 354, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'externalIdentification')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 410, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(BookingRecordType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 411, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BookingRecordType._Automaton = _BuildAutomaton_163()




def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 449, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 450, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AddedOrderNoteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 449, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AddedOrderNoteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createdDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 450, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AddedOrderNoteType._Automaton = _BuildAutomaton_164()




CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'voucherAmount'), MoneyType, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 491, 24)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'voucherValue'), MoneyType, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 492, 24)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 487, 20))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'voucherAmount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 491, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'voucherValue')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 492, 24))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_102._Automaton = _BuildAutomaton_165()




def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SelectedCancellationOptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refundTarget')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 485, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SelectedCancellationOptionType._Automaton = _BuildAutomaton_166()




CancellationOptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'penalty'), CTD_ANON_19, scope=CancellationOptionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 510, 33)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 510, 33))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CancellationOptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refundTarget')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 485, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CancellationOptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'penalty')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 510, 33))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CancellationOptionType._Automaton = _BuildAutomaton_167()




ECheckType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessorInfo'), PaymentProcessorInfoType, scope=ECheckType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 783, 5)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 180, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECheckType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessorInfo')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 783, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECheckType._Automaton = _BuildAutomaton_168()




CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilityText'), pyxb.binding.datatypes.string, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 904, 36)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 904, 36))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilityText')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 904, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_103._Automaton = _BuildAutomaton_169()




CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilityText'), pyxb.binding.datatypes.string, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 952, 36)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 952, 36))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareApplicabilityText')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 952, 36))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_104._Automaton = _BuildAutomaton_170()




FareQualifierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'program'), pyxb.binding.datatypes.string, scope=FareQualifierType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 986, 3)))

FareQualifierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'identifier'), pyxb.binding.datatypes.string, scope=FareQualifierType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 987, 3)))

FareQualifierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorizationNumbers'), AuthorizationNumbersType, scope=FareQualifierType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 988, 12)))

FareQualifierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'passengerReferences'), CTD_ANON_39, scope=FareQualifierType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 989, 12)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 987, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 988, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 989, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FareQualifierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'program')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 986, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FareQualifierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'identifier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 987, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FareQualifierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authorizationNumbers')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 988, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FareQualifierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'passengerReferences')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 989, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FareQualifierType._Automaton = _BuildAutomaton_171()




OptionalPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'price'), CTD_ANON_109, scope=OptionalPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1248, 12)))

OptionalPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=OptionalPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1267, 12)))

OptionalPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'applicableTravelSegments'), CTD_ANON_47, scope=OptionalPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1268, 12)))

OptionalPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rules'), RulesType, scope=OptionalPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1277, 12)))

OptionalPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fareCodes'), CTD_ANON_48, scope=OptionalPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1278, 9)))

OptionalPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionsAvailable'), TicketingOptionsAvailableType, scope=OptionalPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1285, 9)))

OptionalPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'consumptionRules'), ConsumptionRulesType, scope=OptionalPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1286, 9)))

OptionalPriceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maximumBookableQuantity'), pyxb.binding.datatypes.int, scope=OptionalPriceType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1287, 9)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1267, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1268, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1277, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1278, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1285, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1286, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1287, 9))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OptionalPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'price')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1248, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OptionalPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1267, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OptionalPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'applicableTravelSegments')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1268, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OptionalPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rules')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1277, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OptionalPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fareCodes')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1278, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OptionalPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptionsAvailable')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1285, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OptionalPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'consumptionRules')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1286, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(OptionalPriceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maximumBookableQuantity')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1287, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OptionalPriceType._Automaton = _BuildAutomaton_172()




AgeBreakConsumptionRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minAge'), pyxb.binding.datatypes.int, scope=AgeBreakConsumptionRuleType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1336, 5)))

AgeBreakConsumptionRuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxAge'), pyxb.binding.datatypes.int, scope=AgeBreakConsumptionRuleType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1337, 5)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1336, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1337, 5))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AgeBreakConsumptionRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'minAge')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1336, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AgeBreakConsumptionRuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxAge')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1337, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AgeBreakConsumptionRuleType._Automaton = _BuildAutomaton_173()




OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'supplyChannelRecordLocator'), AnorakRecordLocatorType, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1417, 3)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'supplierLocator'), AnorakRecordLocatorType, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1418, 12)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateBooked'), pyxb.binding.datatypes.date, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1419, 3)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateCancelled'), pyxb.binding.datatypes.dateTime, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1420, 12)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceAlerts'), CTD_ANON_49, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1421, 3)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'holdExpiration'), HoldExpirationType, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1429, 3)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fulfillmentInformation'), CTD_ANON_50, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1430, 3)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refundEligibility'), CTD_ANON_51, scope=OrderType, documentation='refundEligibility is deprecated. Please use cancellationSummary instead.', location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1443, 3)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancellationSummary'), CancellationSummaryType, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1480, 12)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rules'), RulesType, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1482, 3)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shipmentTrackingInformation'), CTD_ANON_53, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1484, 3)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cancellationReason'), CancellationReasonType, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1492, 3)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'internalCancellationReason'), pyxb.binding.datatypes.string, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1494, 3)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'availableTicketLanguages'), CTD_ANON_54, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1496, 12)))

OrderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isInventoryCanceled'), pyxb.binding.datatypes.boolean, scope=OrderType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1504, 12)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1417, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1418, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1420, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1421, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1430, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1480, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1482, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1484, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1492, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1494, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1496, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1504, 12))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'supplyChannelRecordLocator')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1417, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'supplierLocator')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1418, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateBooked')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1419, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateCancelled')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1420, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceAlerts')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1421, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'holdExpiration')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1429, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fulfillmentInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1430, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refundEligibility')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1443, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cancellationSummary')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1480, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rules')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1482, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipmentTrackingInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1484, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cancellationReason')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1492, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'internalCancellationReason')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1494, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'availableTicketLanguages')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1496, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(OrderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isInventoryCanceled')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1504, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OrderType._Automaton = _BuildAutomaton_174()




PassengerFareQualifierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'program'), pyxb.binding.datatypes.string, scope=PassengerFareQualifierType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1529, 3)))

PassengerFareQualifierType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'identifier'), pyxb.binding.datatypes.string, scope=PassengerFareQualifierType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1530, 3)))

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1530, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PassengerFareQualifierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'program')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1529, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PassengerFareQualifierType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'identifier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1530, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PassengerFareQualifierType._Automaton = _BuildAutomaton_175()




PassengerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelDocuments'), CTD_ANON_55, scope=PassengerType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1555, 5)))

PassengerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderReferences'), CTD_ANON_56, scope=PassengerType, documentation='Will only be returned if the includeOrderDetails flag is true in the request ', location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1563, 5)))

PassengerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customerReference'), CTD_ANON_57, scope=PassengerType, documentation='Will only be returned if the includeOrderDetails flag is true in the request ', location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1574, 20)))

PassengerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'customInformation'), CustomInformationType, scope=PassengerType, documentation='Element is only valid for update booking requests and retrieve booking responses.\n                            ', location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1588, 20)))

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 697, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 698, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 699, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 700, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 701, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 702, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 703, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 704, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 705, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 706, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 714, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 715, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1555, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1563, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1574, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1588, 20))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'title')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 697, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameFirst')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 698, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameMiddle')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 699, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameLast')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 700, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'suffix')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 701, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dob')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 702, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'gender')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 703, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'residenceInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 704, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 705, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'contactInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 706, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ageAtTimeOfTravel')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 714, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'loyaltyCards')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 715, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelDocuments')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1555, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderReferences')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1563, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customerReference')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1574, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(PassengerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'customInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1588, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PassengerType._Automaton = _BuildAutomaton_176()




PaymentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'formOfPayment'), FormOfPaymentType, scope=PaymentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1630, 3)))

PaymentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'creditCard'), CreditCardType, scope=PaymentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1632, 4)))

PaymentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'check'), CheckType, scope=PaymentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1633, 4)))

PaymentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onAccount'), OnAccountType, scope=PaymentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1634, 4)))

PaymentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'debitCard'), DebitCardType, scope=PaymentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1635, 4)))

PaymentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'voucher'), VoucherType, scope=PaymentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1636, 4)))

PaymentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eCheck'), ECheckType, scope=PaymentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1637, 4)))

PaymentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amount'), MoneyType, scope=PaymentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1639, 3)))

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1631, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PaymentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formOfPayment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1630, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PaymentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'creditCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1632, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PaymentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'check')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1633, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PaymentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onAccount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1634, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PaymentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debitCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1635, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PaymentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'voucher')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1636, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PaymentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCheck')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1637, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PaymentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1639, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PaymentType._Automaton = _BuildAutomaton_177()




CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'statusMessage'), StatusMessageType, scope=CTD_ANON_105, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1719, 8)))

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'statusMessage')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1719, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_105._Automaton = _BuildAutomaton_178()




RoutingRestrictionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'routingTravelPoint'), TravelPointType, scope=RoutingRestrictionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1753, 3)))

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RoutingRestrictionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'routingTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1753, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RoutingRestrictionType._Automaton = _BuildAutomaton_179()




RuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=RuleType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1781, 3)))

RuleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'penalty'), MoneyType, scope=RuleType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1782, 3)))

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1781, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1782, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1781, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RuleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'penalty')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1782, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RuleType._Automaton = _BuildAutomaton_180()




TicketingOptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=TicketingOptionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2271, 3)))

TicketingOptionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fee'), RefundableMoneyType, scope=TicketingOptionType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2272, 3)))

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2271, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2272, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TicketingOptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2271, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TicketingOptionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fee')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2272, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TicketingOptionType._Automaton = _BuildAutomaton_181()




TravelPointPairDateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=TravelPointPairDateType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2315, 17)))

TravelPointPairDateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endDate'), pyxb.binding.datatypes.date, scope=TravelPointPairDateType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2316, 17)))

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2316, 17))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TravelPointPairDateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2307, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TravelPointPairDateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2308, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TravelPointPairDateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2315, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TravelPointPairDateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2316, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TravelPointPairDateType._Automaton = _BuildAutomaton_182()




TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint'), TravelPointType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2330, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint'), TravelPointType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2331, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'departureDateTime'), pyxb.binding.datatypes.dateTime, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2332, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'arrivalDateTime'), pyxb.binding.datatypes.dateTime, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2333, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceOrigins'), SegmentServiceListType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2334, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serviceDestinations'), SegmentServiceListType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2335, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'designator'), pyxb.binding.datatypes.string, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2336, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marketingCarrier'), CarrierType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2337, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'operatingCarrier'), CarrierType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2338, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'supplierEquipmentType'), SupplierEquipmentTypeType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2339, 12)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'distance'), DistanceType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2340, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'duration'), pyxb.binding.datatypes.duration, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2341, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onTimePercentage'), pyxb.binding.datatypes.double, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2342, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'amenities'), CTD_ANON_87, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2343, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'crossBorderInfo'), pyxb.binding.datatypes.boolean, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2350, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'supplierRecordLocator'), AnorakRecordLocatorType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2351, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'equipmentType'), EquipmentTypeType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2353, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'carbonOffset'), pyxb.binding.datatypes.double, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2354, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viaTravelPoints'), CTD_ANON_88, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2355, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marketingServiceName'), pyxb.binding.datatypes.string, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2363, 3)))

TravelSegmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marketingInformation'), MarketingInformationType, scope=TravelSegmentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2364, 12)))

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2334, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2335, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2336, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2337, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2338, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2339, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2340, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2341, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2342, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2343, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2350, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2351, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2353, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2354, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2355, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2363, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2364, 12))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2330, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2331, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'departureDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2332, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'arrivalDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2333, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceOrigins')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2334, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceDestinations')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2335, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'designator')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2336, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'marketingCarrier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2337, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operatingCarrier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2338, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'supplierEquipmentType')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2339, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distance')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2340, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'duration')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2341, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onTimePercentage')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2342, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amenities')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2343, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'crossBorderInfo')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2350, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'supplierRecordLocator')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2351, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'equipmentType')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2353, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'carbonOffset')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2354, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'viaTravelPoints')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2355, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'marketingServiceName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2363, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(TravelSegmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'marketingInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2364, 12))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TravelSegmentType._Automaton = _BuildAutomaton_183()




ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'couponReceivedDate'), pyxb.binding.datatypes.date, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2425, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'origin'), TravelPointType, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2426, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'destination'), TravelPointType, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2427, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refundApprovedDate'), pyxb.binding.datatypes.date, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2428, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'authorization'), CTD_ANON_90, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2429, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'departureDateTime'), pyxb.binding.datatypes.dateTime, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2438, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketTypeCode'), pyxb.binding.datatypes.string, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2439, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketType'), pyxb.binding.datatypes.string, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2440, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberAdults'), pyxb.binding.datatypes.string, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2441, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'numberChildren'), pyxb.binding.datatypes.string, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2442, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'railcardPrintingName'), pyxb.binding.datatypes.string, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2443, 20)))

ValueDocumentCouponType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketableFareIDRef'), pyxb.binding.datatypes.IDREF, scope=ValueDocumentCouponType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2444, 5)))

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 637, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2425, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2426, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2427, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2428, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2429, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2438, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2439, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2440, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2441, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2442, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2443, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2444, 5))
    counters.add(cc_12)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'couponNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 637, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'couponReceivedDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2425, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'origin')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2426, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destination')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2427, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refundApprovedDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2428, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'authorization')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2429, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'departureDateTime')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2438, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketTypeCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2439, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketType')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2440, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberAdults')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2441, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'numberChildren')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2442, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'railcardPrintingName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2443, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentCouponType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketableFareIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2444, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValueDocumentCouponType._Automaton = _BuildAutomaton_184()




ValueDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'valueDocumentLocator'), AnorakRecordLocatorType, scope=ValueDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2460, 3)))

ValueDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'retrievalCustomer'), pyxb.binding.datatypes.string, scope=ValueDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2461, 3)))

ValueDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'retrievalMaskedCreditCard'), pyxb.binding.datatypes.string, scope=ValueDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2462, 3)))

ValueDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'retrievalCode'), pyxb.binding.datatypes.string, scope=ValueDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2463, 12)))

ValueDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coupons'), CTD_ANON_91, scope=ValueDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2464, 12)))

ValueDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'url'), pyxb.binding.datatypes.string, scope=ValueDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2472, 3)))

ValueDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'selectedTicketLanguage'), pyxb.binding.datatypes.string, scope=ValueDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2473, 12)))

ValueDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'issuedDate'), pyxb.binding.datatypes.date, scope=ValueDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2474, 12)))

ValueDocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'data'), CTD_ANON_92, scope=ValueDocumentType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2475, 12)))

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2464, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2472, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2473, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2474, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2475, 12))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'valueDocumentLocator')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2460, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'retrievalCustomer')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2461, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'retrievalMaskedCreditCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2462, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'retrievalCode')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2463, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coupons')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2464, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'url')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2472, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'selectedTicketLanguage')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2473, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'issuedDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2474, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ValueDocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'data')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2475, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueDocumentType._Automaton = _BuildAutomaton_185()




PassengerInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'acceptableFormOfTravelDocument'), STD_ANON_34, scope=PassengerInformationType, documentation='\n                        PERMRESIDENT: Legal Permanent Resident Card\n                        PASSPORT: Passport\n                        NATURALCERT: Naturalization Certificate\n                        MILORDER: Military Order\n                        PHOTOCARD: Photocard required in the UK for acquiring season tickets\n\n                        Consult the SilverRail Documentation Portal for further information.\n                    ', location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2518, 12)))

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2518, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PassengerInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'acceptableFormOfTravelDocument')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2518, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PassengerInformationType._Automaton = _BuildAutomaton_186()




CarrierRestrictionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'carrier'), CarrierType, scope=CarrierRestrictionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2654, 12)))

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CarrierRestrictionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'carrier')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2654, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CarrierRestrictionsType._Automaton = _BuildAutomaton_187()




EquipmentTypeRestrictionsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'equipmentType'), EquipmentTypeType, scope=EquipmentTypeRestrictionsType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2669, 12)))

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EquipmentTypeRestrictionsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'equipmentType')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2669, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EquipmentTypeRestrictionsType._Automaton = _BuildAutomaton_188()




CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'updateable'), UpdateableOrderType, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 238, 44)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'travelSegments'), CTD_ANON_6, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 239, 11)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketableFares'), CTD_ANON_7, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 248, 11)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptions'), CTD_ANON_8, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 257, 11)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'financials'), CTD_ANON_9, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 266, 11)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'supplyChannelPassengers'), CTD_ANON_10, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 285, 44)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orderNotes'), CTD_ANON_11, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 294, 44)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'confirmationInformationRequired'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 303, 44)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentCardRequiredForConfirmationInformation'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 305, 44)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'confirmationInformationRequiredOverrides'), ConfirmationInformationRequiredOverrideType, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 308, 11)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'confirmationOptions'), ConfirmationOptionsType, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 310, 44)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'selectedConfirmationOption'), selectedConfirmationOptionType, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 311, 44)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commercialAgentName'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 314, 44)))

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1417, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1418, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1420, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1421, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1430, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1480, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1482, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1484, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1492, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1494, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1496, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1504, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 238, 44))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 239, 11))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 248, 11))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 257, 11))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 266, 11))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 285, 44))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 294, 44))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 303, 44))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 305, 44))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 308, 11))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 310, 44))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 311, 44))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 314, 44))
    counters.add(cc_24)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'supplyChannelRecordLocator')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1417, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'supplierLocator')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1418, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateBooked')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1419, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateCancelled')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1420, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serviceAlerts')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1421, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'holdExpiration')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1429, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fulfillmentInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1430, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refundEligibility')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1443, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cancellationSummary')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1480, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rules')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1482, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shipmentTrackingInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1484, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cancellationReason')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1492, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'internalCancellationReason')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1494, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'availableTicketLanguages')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1496, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isInventoryCanceled')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1504, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'updateable')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 238, 44))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'travelSegments')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 239, 11))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketableFares')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 248, 11))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ticketingOptions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 257, 11))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'financials')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 266, 11))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'supplyChannelPassengers')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 285, 44))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orderNotes')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 294, 44))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'confirmationInformationRequired')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 303, 44))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentCardRequiredForConfirmationInformation')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 305, 44))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'confirmationInformationRequiredOverrides')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 308, 11))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'confirmationOptions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 310, 44))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'selectedConfirmationOption')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 311, 44))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commercialAgentName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 314, 44))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, True) ]))
    st_27._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_106._Automaton = _BuildAutomaton_189()




CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'priceIDRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 394, 56)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'balanceAmount'), MoneyType, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 395, 56)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'postingDate'), pyxb.binding.datatypes.date, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 396, 56)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'receiptNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 397, 56)))

CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenceReceiptNumber'), pyxb.binding.datatypes.string, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 398, 56)))

def _BuildAutomaton_190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1631, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 394, 56))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 395, 56))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 396, 56))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 397, 56))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 398, 56))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formOfPayment')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1630, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'creditCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1632, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'check')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1633, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onAccount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1634, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'debitCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1635, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'voucher')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1636, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eCheck')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1637, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'amount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1639, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'priceIDRef')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 394, 56))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'balanceAmount')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 395, 56))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'postingDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 396, 56))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'receiptNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 397, 56))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenceReceiptNumber')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 398, 56))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_107._Automaton = _BuildAutomaton_190()




CreditCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessorInfo'), PaymentProcessorInfoType, scope=CreditCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 644, 5)))

def _BuildAutomaton_191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 81, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 85, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 86, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 644, 5))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 81, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 82, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 83, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billingAddress')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 84, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteCard')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 85, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentToken')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 86, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CreditCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessorInfo')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 644, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CreditCardType._Automaton = _BuildAutomaton_191()




DebitCardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessorInfo'), PaymentProcessorInfoType, scope=DebitCardType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 743, 5)))

def _BuildAutomaton_192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 104, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 105, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 109, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'number')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 104, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startYearMonth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 105, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expirationYearMonth')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 106, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cardholderName')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 107, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'billingAddress')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 108, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentToken')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 109, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DebitCardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paymentProcessorInfo')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 743, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DebitCardType._Automaton = _BuildAutomaton_192()




QueryTravelPointPairPassType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'restrictions'), BaseTravelPointRestrictionsType, scope=QueryTravelPointPairPassType, location=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1686, 17)))

def _BuildAutomaton_193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2316, 17))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1686, 17))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(QueryTravelPointPairPassType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2307, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(QueryTravelPointPairPassType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'destinationTravelPoint')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2308, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(QueryTravelPointPairPassType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2315, 17))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(QueryTravelPointPairPassType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endDate')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 2316, 17))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(QueryTravelPointPairPassType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'restrictions')), pyxb.utils.utility.Location('/Users/bloomberglondonrd1/IdeaProjects/silvercore/xsd/CommonTypes_2_65.xsd', 1686, 17))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
QueryTravelPointPairPassType._Automaton = _BuildAutomaton_193()

